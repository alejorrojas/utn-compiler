
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 11 18:47:20 ART 2023
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 11 18:47:20 ART 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\006\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\003" +
    "\000\002\005\006\000\002\005\005\000\002\005\006\000" +
    "\002\005\005\000\002\005\006\000\002\005\005\000\002" +
    "\005\006\000\002\005\005\000\002\005\006\000\002\005" +
    "\005\000\002\005\006\000\002\005\005\000\002\005\006" +
    "\000\002\005\005\000\002\005\006\000\002\005\005\000" +
    "\002\005\006\000\002\005\005\000\002\004\005\000\002" +
    "\004\010\000\002\004\005\000\002\010\003\000\002\010" +
    "\010\000\002\010\005\000\002\010\010\000\002\010\005" +
    "\000\002\010\010\000\002\010\005\000\002\010\010\000" +
    "\002\010\005\000\002\010\010\000\002\010\005\000\002" +
    "\010\010\000\002\010\005\000\002\010\010\000\002\010" +
    "\005\000\002\011\003\000\002\011\006\000\002\011\005" +
    "\000\002\011\010\000\002\011\004\000\002\011\007\000" +
    "\002\011\005\000\002\011\010\000\002\012\003\000\002" +
    "\016\003\000\002\016\010\000\002\016\005\000\002\016" +
    "\010\000\002\016\005\000\002\017\003\000\002\017\006" +
    "\000\002\017\010\000\002\017\005\000\002\017\010\000" +
    "\002\017\005\000\002\017\010\000\002\017\005\000\002" +
    "\017\010\000\002\017\005\000\002\017\005\000\002\035" +
    "\003\000\002\036\003\000\002\037\003\000\002\040\003" +
    "\000\002\022\003\000\002\041\003\000\002\042\003\000" +
    "\002\024\003\000\002\015\003\000\002\015\013\000\002" +
    "\015\013\000\002\015\010\000\002\015\010\000\002\015" +
    "\010\000\002\015\010\000\002\015\005\000\002\015\005" +
    "\000\002\013\003\000\002\013\013\000\002\013\010\000" +
    "\002\013\005\000\002\025\003\000\002\025\006\000\002" +
    "\025\003\000\002\014\003\000\002\014\006\000\002\014" +
    "\003\000\002\014\006\000\002\014\005\000\002\014\006" +
    "\000\002\014\005\000\002\030\006\000\002\030\003\000" +
    "\002\027\006\000\002\027\003\000\002\031\003\000\002" +
    "\032\003\000\002\020\003\000\002\006\005\000\002\007" +
    "\006\000\002\007\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\125\005\001\002\000\004\002\376\001" +
    "\002\000\004\032\006\001\002\000\024\005\007\011\020" +
    "\013\016\015\015\017\017\021\012\023\021\034\013\036" +
    "\010\001\002\000\002\001\002\000\012\015\244\017\245" +
    "\027\246\121\247\001\002\000\004\033\367\001\002\000" +
    "\002\001\002\000\002\001\002\000\012\030\ufffc\031\335" +
    "\033\ufffc\040\336\001\002\000\002\001\002\000\016\046" +
    "\147\050\150\052\151\054\154\056\155\121\152\001\002" +
    "\000\002\001\002\000\012\025\025\111\031\113\032\121" +
    "\027\001\002\000\002\001\002\000\004\022\023\001\002" +
    "\000\036\005\007\011\020\013\016\015\015\017\017\021" +
    "\012\023\021\030\ufffa\031\ufffa\033\ufffa\034\013\036\010" +
    "\040\ufffa\041\ufffa\001\002\000\014\030\ufffb\031\ufffb\033" +
    "\ufffb\040\ufffb\041\ufffb\001\002\000\022\007\051\011\047" +
    "\013\044\027\045\036\041\042\050\044\043\121\042\001" +
    "\002\000\004\010\uffa4\001\002\000\004\010\uffa6\001\002" +
    "\000\004\010\316\001\002\000\006\025\305\121\307\001" +
    "\002\000\006\025\033\121\035\001\002\000\022\007\051" +
    "\011\047\013\044\027\045\036\041\042\050\044\043\121" +
    "\042\001\002\000\004\114\037\001\002\000\004\114\uff9b" +
    "\001\002\000\004\114\uff9e\001\002\000\004\010\uffa0\001" +
    "\002\000\004\010\uffa1\001\002\000\012\015\244\017\245" +
    "\027\246\121\247\001\002\000\004\024\uffe6\001\002\000" +
    "\006\064\221\121\220\001\002\000\016\046\147\050\150" +
    "\052\151\054\154\056\155\121\152\001\002\000\012\056" +
    "\117\070\113\072\115\121\116\001\002\000\004\024\111" +
    "\001\002\000\012\025\025\111\031\113\032\121\027\001" +
    "\002\000\010\060\063\062\060\121\062\001\002\000\002" +
    "\001\002\000\004\006\uffcf\001\002\000\004\006\054\001" +
    "\002\000\006\024\uffe4\025\055\001\002\000\022\007\051" +
    "\011\047\013\044\027\045\036\041\042\050\044\043\121" +
    "\042\001\002\000\004\024\057\001\002\000\004\024\uffe5" +
    "\001\002\000\002\001\002\000\004\043\072\001\002\000" +
    "\004\043\uffce\001\002\000\002\001\002\000\004\061\066" +
    "\001\002\000\004\061\uffb9\001\002\000\006\042\067\043" +
    "\uffcc\001\002\000\010\060\063\062\060\121\062\001\002" +
    "\000\004\043\071\001\002\000\004\043\uffcd\001\002\000" +
    "\006\024\uffda\025\073\001\002\000\022\007\051\011\047" +
    "\013\044\027\045\036\041\042\050\044\043\121\042\001" +
    "\002\000\004\024\075\001\002\000\004\024\uffdb\001\002" +
    "\000\004\063\100\001\002\000\004\063\uffb8\001\002\000" +
    "\006\042\101\043\uffca\001\002\000\010\060\063\062\060" +
    "\121\062\001\002\000\004\043\103\001\002\000\004\043" +
    "\uffcb\001\002\000\004\010\105\001\002\000\006\024\uffe0" +
    "\025\106\001\002\000\022\007\051\011\047\013\044\027" +
    "\045\036\041\042\050\044\043\121\042\001\002\000\004" +
    "\024\110\001\002\000\004\024\uffe1\001\002\000\004\121" +
    "\035\001\002\000\004\114\uff9f\001\002\000\004\121\142" +
    "\001\002\000\004\026\135\001\002\000\002\001\002\000" +
    "\006\026\uffd7\027\126\001\002\000\002\001\002\000\004" +
    "\057\122\001\002\000\004\057\uffba\001\002\000\006\026" +
    "\uffd1\027\123\001\002\000\012\056\117\070\113\072\115" +
    "\121\116\001\002\000\004\026\125\001\002\000\004\026" +
    "\uffd0\001\002\000\012\056\117\070\113\072\115\121\116" +
    "\001\002\000\004\026\130\001\002\000\004\026\uffd6\001" +
    "\002\000\006\026\uffd3\027\132\001\002\000\012\056\117" +
    "\070\113\072\115\121\116\001\002\000\004\026\134\001" +
    "\002\000\004\026\uffd2\001\002\000\006\024\uffd8\025\136" +
    "\001\002\000\022\007\051\011\047\013\044\027\045\036" +
    "\041\042\050\044\043\121\042\001\002\000\004\024\140" +
    "\001\002\000\004\024\uffd9\001\002\000\004\071\143\001" +
    "\002\000\004\071\uff99\001\002\000\006\026\uffd5\027\144" +
    "\001\002\000\012\056\117\070\113\072\115\121\116\001" +
    "\002\000\004\026\146\001\002\000\004\026\uffd4\001\002" +
    "\000\002\001\002\000\002\001\002\000\002\001\002\000" +
    "\006\012\uffc9\013\172\001\002\000\004\012\166\001\002" +
    "\000\002\001\002\000\002\001\002\000\004\057\157\001" +
    "\002\000\004\012\uffbf\001\002\000\004\055\162\001\002" +
    "\000\004\055\uffbb\001\002\000\006\012\uffc0\013\163\001" +
    "\002\000\016\046\147\050\150\052\151\054\154\056\155" +
    "\121\152\001\002\000\004\012\165\001\002\000\004\012" +
    "\uffc1\001\002\000\006\024\uffdc\025\167\001\002\000\022" +
    "\007\051\011\047\013\044\027\045\036\041\042\050\044" +
    "\043\121\042\001\002\000\004\024\171\001\002\000\004" +
    "\024\uffdd\001\002\000\016\046\147\050\150\052\151\054" +
    "\154\056\155\121\152\001\002\000\004\012\174\001\002" +
    "\000\004\012\uffc8\001\002\000\004\053\uffbc\001\002\000" +
    "\004\053\177\001\002\000\006\012\uffc2\013\200\001\002" +
    "\000\016\046\147\050\150\052\151\054\154\056\155\121" +
    "\152\001\002\000\004\012\202\001\002\000\004\012\uffc3" +
    "\001\002\000\004\051\205\001\002\000\004\051\uffbd\001" +
    "\002\000\006\012\uffc4\013\206\001\002\000\016\046\147" +
    "\050\150\052\151\054\154\056\155\121\152\001\002\000" +
    "\004\012\210\001\002\000\004\012\uffc5\001\002\000\004" +
    "\047\uffbe\001\002\000\004\047\213\001\002\000\006\012" +
    "\uffc6\013\214\001\002\000\016\046\147\050\150\052\151" +
    "\054\154\056\155\121\152\001\002\000\004\012\216\001" +
    "\002\000\004\012\uffc7\001\002\000\004\045\240\001\002" +
    "\000\004\045\uffad\001\002\000\002\001\002\000\004\065" +
    "\uffb7\001\002\000\004\065\224\001\002\000\006\044\225" +
    "\045\uffaa\001\002\000\006\064\221\121\220\001\002\000" +
    "\004\045\227\001\002\000\006\045\uffab\066\230\001\002" +
    "\000\004\121\232\001\002\000\004\067\237\001\002\000" +
    "\004\067\uffa9\001\002\000\006\066\234\067\uffa7\001\002" +
    "\000\004\121\232\001\002\000\004\067\236\001\002\000" +
    "\004\067\uffa8\001\002\000\004\045\uffac\001\002\000\006" +
    "\024\uffe2\025\241\001\002\000\022\007\051\011\047\013" +
    "\044\027\045\036\041\042\050\044\043\121\042\001\002" +
    "\000\004\024\243\001\002\000\004\024\uffe3\001\002\000" +
    "\002\001\002\000\002\001\002\000\012\056\117\070\113" +
    "\072\115\121\116\001\002\000\004\037\uffb6\001\002\000" +
    "\004\037\251\001\002\000\006\024\uffde\025\252\001\002" +
    "\000\022\007\051\011\047\013\044\027\045\036\041\042" +
    "\050\044\043\121\042\001\002\000\004\024\254\001\002" +
    "\000\004\024\uffdf\001\002\000\004\026\256\001\002\000" +
    "\006\015\257\017\260\001\002\000\002\001\002\000\002" +
    "\001\002\000\004\016\262\001\002\000\006\015\263\037" +
    "\uffb3\001\002\000\002\001\002\000\004\014\265\001\002" +
    "\000\004\037\uffb5\001\002\000\004\014\267\001\002\000" +
    "\006\017\270\037\uffb2\001\002\000\002\001\002\000\004" +
    "\016\272\001\002\000\004\037\uffb4\001\002\000\004\016" +
    "\274\001\002\000\006\015\275\037\uffaf\001\002\000\002" +
    "\001\002\000\004\014\277\001\002\000\004\037\uffb1\001" +
    "\002\000\004\014\301\001\002\000\006\017\302\037\uffae" +
    "\001\002\000\002\001\002\000\004\016\304\001\002\000" +
    "\004\037\uffb0\001\002\000\022\007\051\011\047\013\044" +
    "\027\045\036\041\042\050\044\043\121\042\001\002\000" +
    "\004\112\311\001\002\000\004\112\uff9a\001\002\000\004" +
    "\112\uff9c\001\002\000\004\010\uffa2\001\002\000\004\010" +
    "\uffa3\001\002\000\004\024\314\001\002\000\004\121\307" +
    "\001\002\000\004\112\uff9d\001\002\000\036\005\007\011" +
    "\020\013\016\015\015\017\017\021\012\023\021\030\ufff0" +
    "\031\ufff0\033\ufff0\034\013\036\010\040\ufff0\041\ufff0\001" +
    "\002\000\014\030\ufff1\031\ufff1\033\ufff1\040\ufff1\041\ufff1" +
    "\001\002\000\004\024\321\001\002\000\002\001\002\000" +
    "\004\010\uffa5\001\002\000\004\016\324\001\002\000\036" +
    "\005\007\011\020\013\016\015\015\017\017\021\012\023" +
    "\021\030\ufff6\031\ufff6\033\ufff6\034\013\036\010\040\ufff6" +
    "\041\ufff6\001\002\000\014\030\ufff7\031\ufff7\033\ufff7\040" +
    "\ufff7\041\ufff7\001\002\000\004\012\327\001\002\000\036" +
    "\005\007\011\020\013\016\015\015\017\017\021\012\023" +
    "\021\030\ufff2\031\ufff2\033\ufff2\034\013\036\010\040\ufff2" +
    "\041\ufff2\001\002\000\014\030\ufff3\031\ufff3\033\ufff3\040" +
    "\ufff3\041\ufff3\001\002\000\004\014\332\001\002\000\036" +
    "\005\007\011\020\013\016\015\015\017\017\021\012\023" +
    "\021\030\ufff4\031\ufff4\033\ufff4\034\013\036\010\040\ufff4" +
    "\041\ufff4\001\002\000\014\030\ufff5\031\ufff5\033\ufff5\040" +
    "\ufff5\041\ufff5\001\002\000\010\030\ufffe\033\ufffe\040\336" +
    "\001\002\000\024\005\007\011\020\013\016\015\015\017" +
    "\017\021\012\023\021\034\013\036\010\001\002\000\030" +
    "\005\007\011\020\013\016\015\015\017\017\021\012\023" +
    "\021\025\343\027\342\034\013\036\010\001\002\000\006" +
    "\030\ufffd\033\ufffd\001\002\000\024\005\007\011\020\013" +
    "\016\015\015\017\017\021\012\023\021\034\013\036\010" +
    "\001\002\000\004\041\353\001\002\000\012\056\117\070" +
    "\113\072\115\121\116\001\002\000\022\007\051\011\047" +
    "\013\044\027\045\036\041\042\050\044\043\121\042\001" +
    "\002\000\004\024\345\001\002\000\026\005\uffe9\011\uffe9" +
    "\013\uffe9\015\uffe9\017\uffe9\021\uffe9\023\uffe9\027\346\034" +
    "\uffe9\036\uffe9\001\002\000\012\056\117\070\113\072\115" +
    "\121\116\001\002\000\004\026\350\001\002\000\024\005" +
    "\uffe8\011\uffe8\013\uffe8\015\uffe8\017\uffe8\021\uffe8\023\uffe8" +
    "\034\uffe8\036\uffe8\001\002\000\004\026\352\001\002\000" +
    "\024\005\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021\uffe7" +
    "\023\uffe7\034\uffe7\036\uffe7\001\002\000\006\030\uff96\033" +
    "\uff96\001\002\000\004\041\355\001\002\000\006\030\uff97" +
    "\033\uff97\001\002\000\004\030\357\001\002\000\010\030" +
    "\uff98\033\uff98\040\uff98\001\002\000\006\030\uffff\033\uffff" +
    "\001\002\000\004\035\362\001\002\000\036\005\007\011" +
    "\020\013\016\015\015\017\017\021\012\023\021\030\uffec" +
    "\031\uffec\033\uffec\034\013\036\010\040\uffec\041\uffec\001" +
    "\002\000\014\030\uffed\031\uffed\033\uffed\040\uffed\041\uffed" +
    "\001\002\000\004\020\365\001\002\000\036\005\007\011" +
    "\020\013\016\015\015\017\017\021\012\023\021\030\ufff8" +
    "\031\ufff8\033\ufff8\034\013\036\010\040\ufff8\041\ufff8\001" +
    "\002\000\014\030\ufff9\031\ufff9\033\ufff9\040\ufff9\041\ufff9" +
    "\001\002\000\004\002\000\001\002\000\004\037\371\001" +
    "\002\000\036\005\007\011\020\013\016\015\015\017\017" +
    "\021\012\023\021\030\uffea\031\uffea\033\uffea\034\013\036" +
    "\010\040\uffea\041\uffea\001\002\000\014\030\uffeb\031\uffeb" +
    "\033\uffeb\040\uffeb\041\uffeb\001\002\000\004\004\374\001" +
    "\002\000\036\005\007\011\020\013\016\015\015\017\017" +
    "\021\012\023\021\030\uffee\031\uffee\033\uffee\034\013\036" +
    "\010\040\uffee\041\uffee\001\002\000\014\030\uffef\031\uffef" +
    "\033\uffef\040\uffef\041\uffef\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\010\005\013\001\001\000\004" +
    "\045\372\001\001\000\004\015\367\001\001\000\002\001" +
    "\001\000\004\044\363\001\001\000\004\046\360\001\001" +
    "\000\006\006\333\007\336\001\001\000\004\034\330\001" +
    "\001\000\004\017\325\001\001\000\004\033\322\001\001" +
    "\000\006\014\027\026\025\001\001\000\004\043\021\001" +
    "\001\000\002\001\001\000\004\005\023\001\001\000\002" +
    "\001\001\000\004\010\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\305\032\307" +
    "\001\001\000\006\030\033\031\035\001\001\000\004\010" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\037\001\001\000\002\001\001\000" +
    "\004\015\247\001\001\000\002\001\001\000\004\013\216" +
    "\001\001\000\004\017\152\001\001\000\004\011\113\001" +
    "\001\000\002\001\001\000\006\014\103\026\025\001\001" +
    "\000\004\016\060\001\001\000\006\012\052\023\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\076\042\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\064\041\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\111\001\001\000\002\001\001\000\004\020" +
    "\140\001\001\000\002\001\001\000\004\021\130\001\001" +
    "\000\002\001\001\000\006\022\117\023\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\210\035\211\001\001\000\006\023\203\036\202\001\001" +
    "\000\006\023\174\037\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\160\040\157\001\001\000\006" +
    "\022\155\023\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\221\024\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\232\025\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\232\025\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\277\001\001\000\004\033\272" +
    "\001\001\000\004\011\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\265\001\001\000\004\033\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\314\001\001\000\002" +
    "\001\001\000\004\005\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\332\001\001\000" +
    "\002\001\001\000\004\007\357\001\001\000\006\003\355" +
    "\005\013\001\001\000\006\004\337\005\340\001\001\000" +
    "\002\001\001\000\004\005\353\001\001\000\002\001\001" +
    "\000\004\011\350\001\001\000\004\010\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\362\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\371\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\374\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getSymbol(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SECTSIMPLE ::= AperturaSimpleSect CONTENIDO CierreSimpleSect 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SECTSIMPLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SECTSIMPLE ::= AperturaSimpleSect ENCABEZADO CONTENIDO CierreSimpleSect 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SECTSIMPLE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SECCION ::= AperturaSection ARTICULO CierreSection 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SECCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EMPHASIS ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EMPHASIS",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VIDEODATAN ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VIDEODATAN",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IMAGEDATAN ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMAGEDATAN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VIDEOOBJECT ::= VIDEODATAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VIDEOOBJECT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VIDEOOBJECT ::= AperturaInfo INFORMACION CierreInfo VIDEODATAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VIDEOOBJECT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IMAGEOBJECT ::= IMAGEDATAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMAGEOBJECT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IMAGEOBJECT ::= AperturaInfo INFORMACION CierreInfo IMAGEDATAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMAGEOBJECT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // MEDIAOBJECT ::= AperturaImageobject IMAGEOBJECT CierreImageobject 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // MEDIAOBJECT ::= AperturaImageobject IMAGEOBJECT CierreImageobject NOTERMINAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // MEDIAOBJECT ::= AperturaVideoobject VIDEOOBJECT CierreVideoobject 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MEDIAOBJECT ::= AperturaVideoobject VIDEOOBJECT CierreVideoobject NOTERMINAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MEDIAOBJECT ::= NOTERMINAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MEDIAOBJECT ::= AperturaInfo INFORMACION CierreInfo NOTERMINAL2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MEDIAOBJECT ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MEDIAOBJECT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // HOLDER ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOLDER",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // HOLDER ::= NOTERMINALN AperturaHolder HOLDER CierreHolder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOLDER",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // HOLDER ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOLDER",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // COPYRIGHT ::= AperturaYear YEAR CierreYear 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COPYRIGHT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COPYRIGHT ::= AperturaYear YEAR CierreYear AperturaCopyright COPYRIGHT CierreCopyright 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COPYRIGHT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // COPYRIGHT ::= AperturaYear YEAR CierreYear AperturaCopyright COPYRIGHT CierreCopyright AperturaHolder HOLDER CierreHolder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COPYRIGHT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // COPYRIGHT ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COPYRIGHT",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ABSTRACT ::= AperturaSimPara SIMPARRAFO CierreSimPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ABSTRACT ::= AperturaPara PARRAFO CierrePara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ABSTRACT ::= AperturaSimPara SIMPARRAFO CierreSimPara AperturaPara PARRAFO CierrePara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ABSTRACT ::= AperturaPara PARRAFO CierrePara AperturaSimPara SIMPARRAFO CierreSimPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ABSTRACT ::= AperturaTitulo TITULO CierreTitulo AperturaSimPara SIMPARRAFO CierreSimPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ABSTRACT ::= AperturaTitulo TITULO CierreTitulo AperturaPara PARRAFO CierrePara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ABSTRACT ::= AperturaTitulo TITULO CierreTitulo AperturaSimPara SIMPARRAFO CierreSimPara AperturaPara PARRAFO CierrePara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ABSTRACT ::= AperturaTitulo TITULO CierreTitulo AperturaPara PARRAFO CierrePara AperturaSimPara SIMPARRAFO CierreSimPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ABSTRACT ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ABSTRACT",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // YEAR ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("YEAR",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SURNAME ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SURNAME",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FIRSTNAME ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FIRSTNAME",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EMAIL ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EMAIL",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PHONE ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PHONE",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // STATE ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STATE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CITY ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CITY",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // STREET ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STREET",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ADDRESS ::= AperturaEmail EMAIL CierreEmail 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ADDRESS ::= AperturaPhone PHONE CierrePhone 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ADDRESS ::= AperturaPhone PHONE CierrePhone AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ADDRESS ::= AperturaState STATE CierreState 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ADDRESS ::= AperturaState STATE CierreState AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ADDRESS ::= AperturaCity CITY CierreCity 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ADDRESS ::= AperturaCity CITY CierreCity AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ADDRESS ::= AperturaStreet STREET CierreStreet 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ADDRESS ::= AperturaStreet STREET CierreStreet AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ADDRESS ::= Texto AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ADDRESS ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ADDRESS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // AUTHOR ::= AperturaSurname SURNAME CierreSurname 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUTHOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // AUTHOR ::= AperturaSurname SURNAME CierreSurname AperturaAuthor AUTHOR CierreAuthor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUTHOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AUTHOR ::= AperturaFirstName FIRSTNAME CierreFirstName 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUTHOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AUTHOR ::= AperturaFirstName FIRSTNAME CierreFirstName AperturaAuthor AUTHOR CierreAuthor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUTHOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AUTHOR ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUTHOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DATE ::= NOTERMINALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TITULO ::= AperturaEmail EMAIL CierreEmail AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TITULO ::= AperturaEmail EMAIL CierreEmail 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TITULO ::= Link NLINK AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TITULO ::= Link NLINK 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TITULO ::= AperturaEmphasis EMPHASIS CierreEmphasis AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TITULO ::= AperturaEmphasis EMPHASIS CierreEmphasis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TITULO ::= Texto AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TITULO ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TITULO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INFORMACION ::= AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INFORMACION ::= AperturaTitulo TITULO CierreTitulo AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INFORMACION ::= AperturaAuthor AUTHOR CierreAuthor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INFORMACION ::= AperturaAuthor AUTHOR CierreAuthor AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INFORMACION ::= AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INFORMACION ::= AperturaAddress ADDRESS CierreAddress AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INFORMACION ::= AperturaAbstract ABSTRACT CierreAbstract 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INFORMACION ::= AperturaAbstract ABSTRACT CierreAbstract AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INFORMACION ::= AperturaMediaObject MEDIAOBJECT CierreMediaObject 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INFORMACION ::= AperturaMediaObject MEDIAOBJECT CierreMediaObject AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INFORMACION ::= AperturaCopyright COPYRIGHT CierreCopyright 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INFORMACION ::= AperturaCopyright COPYRIGHT CierreCopyright AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INFORMACION ::= AperturaDate DATE CierreDate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INFORMACION ::= AperturaDate DATE CierreDate AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INFORMACION ::= Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INFORMACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ENCABEZADO ::= AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ENCABEZADO ::= AperturaInfo INFORMACION CierreInfo AperturaTitulo TITULO CierreTitulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ENCABEZADO ::= AperturaInfo INFORMACION CierreInfo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO ::= AperturaAbstract ABSTRACT CierreAbstract 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO ::= AperturaAbstract ABSTRACT CierreAbstract CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONTENIDO ::= AperturaComment COMMENT CierreComment 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTENIDO ::= AperturaComment COMMENT CierreComment CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTENIDO ::= AperturaInformalTable INFORMALTABLE CierreInformalTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONTENIDO ::= AperturaInformalTable INFORMALTABLE CierreInformalTable CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDO ::= AperturaMediaObject MEDIAOBJECT CierreMediaObject 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDO ::= AperturaMediaObject MEDIAOBJECT CierreMediaObject CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDO ::= AperturaAddress ADDRESS CierreAddress 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDO ::= AperturaAddress ADDRESS CierreAddress CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTENIDO ::= AperturaSimPara SIMPARRAFO CierreSimPara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTENIDO ::= AperturaSimPara SIMPARRAFO CierreSimPara CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTENIDO ::= AperturaPara PARRAFO CierrePara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONTENIDO ::= AperturaPara PARRAFO CierrePara CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO ::= AperturaImportant IMPORTANT CierreImportant 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENIDO ::= AperturaImportant IMPORTANT CierreImportant CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO ::= AperturaItemizedList ITEMIZEDLIST CierreItemizedList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO ::= AperturaItemizedList ITEMIZEDLIST CierreItemizedList CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARTICULO ::= CONTENIDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ARTICULO ::= CONTENIDO SECTSIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARTICULO ::= CONTENIDO SECCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARTICULO ::= CONTENIDO SECCION SECTSIMPLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARTICULO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= EncabezadoXML AperturaArticulo ARTICULO CierreArticulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

