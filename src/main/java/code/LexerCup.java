/* The following code was generated by JFlex 1.4.3 on 29/4/23, 23:01 */

package code;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/4/23, 23:01 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/neatbeans-lexer/src/main/java/code/lexer.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 16,  0,  0, 16,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    28, 27,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0, 29, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  0,  0,  1,  0, 13,  0, 
     0, 14, 14, 14,  2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  0,  0,  0,  0, 14, 
     0,  9, 23,  4, 21,  8, 18, 25, 26, 11, 24, 14, 12, 19, 17,  3, 
     7, 14, 10, 22,  5, 14, 14, 14, 14,  6, 20,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\127\0\1\4\5\0\1\5"+
    "\2\0\1\6\21\0\1\7\14\0\1\10\5\0\1\11"+
    "\2\0\1\12\16\0\1\13\11\0\1\14\1\15\1\16"+
    "\22\0\1\17\7\0\1\20\1\21\1\22\6\0\1\23"+
    "\2\0\1\24\4\0\1\25\10\0\1\26\1\0\1\27"+
    "\2\0\1\30\4\0\1\31\4\0\1\32\1\33\4\0"+
    "\1\34\1\35\1\0\1\36\2\0\1\37\1\0\1\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\u0294\0\u02b2"+
    "\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366\0\u0384\0\u03a2"+
    "\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492"+
    "\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564\0\u0582"+
    "\0\u05a0\0\u05be\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672"+
    "\0\u0690\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762"+
    "\0\u0780\0\u079e\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0834\0\u0852"+
    "\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942"+
    "\0\u0960\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32"+
    "\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\36\0\u0ac8\0\u0ae6\0\u0b04"+
    "\0\u0b22\0\u0b40\0\36\0\u0b5e\0\u0b7c\0\36\0\u0b9a\0\u0bb8"+
    "\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8"+
    "\0\u0cc6\0\u0ce4\0\u0d02\0\u0d20\0\u0d3e\0\u0d5c\0\u0d7a\0\36"+
    "\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a"+
    "\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\36\0\u0f00\0\u0f1e\0\u0f3c"+
    "\0\u0f5a\0\u0f78\0\36\0\u0f96\0\u0fb4\0\36\0\u0fd2\0\u0ff0"+
    "\0\u100e\0\u102c\0\u104a\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0"+
    "\0\u10fe\0\u111c\0\u113a\0\u1158\0\36\0\u1176\0\u1194\0\u11b2"+
    "\0\u11d0\0\u11ee\0\u120c\0\u122a\0\u1248\0\u1266\0\36\0\36"+
    "\0\36\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc\0\u131a\0\u1338"+
    "\0\u1356\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec\0\u140a\0\u1428"+
    "\0\u1446\0\u1464\0\u1482\0\36\0\u14a0\0\u14be\0\u14dc\0\u14fa"+
    "\0\u1518\0\u1536\0\u1554\0\36\0\36\0\36\0\u1572\0\u1590"+
    "\0\u15ae\0\u15cc\0\u15ea\0\u1608\0\36\0\u1626\0\u1644\0\36"+
    "\0\u1662\0\u1680\0\u169e\0\u16bc\0\36\0\u16da\0\u16f8\0\u1716"+
    "\0\u1734\0\u1752\0\u1770\0\u178e\0\u17ac\0\36\0\u17ca\0\36"+
    "\0\u17e8\0\u1806\0\36\0\u1824\0\u1842\0\u1860\0\u187e\0\36"+
    "\0\u189c\0\u18ba\0\u18d8\0\u18f6\0\36\0\36\0\u1914\0\u1932"+
    "\0\u1950\0\u196e\0\36\0\36\0\u198c\0\36\0\u19aa\0\u19c8"+
    "\0\36\0\u19e6\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\13\4\1\2\1\4\1\2\1\5\12\4"+
    "\1\2\1\5\1\2\42\0\1\6\1\7\1\0\1\10"+
    "\1\0\1\11\1\0\1\12\7\0\1\13\1\0\1\14"+
    "\1\15\4\0\1\16\1\0\1\17\2\0\13\4\1\0"+
    "\15\4\1\0\1\4\21\0\1\5\13\0\1\5\4\0"+
    "\1\20\45\0\1\21\33\0\1\22\36\0\1\23\12\0"+
    "\1\24\1\0\1\25\13\0\1\26\13\0\1\27\1\0"+
    "\1\30\22\0\1\31\36\0\1\32\37\0\1\33\24\0"+
    "\1\34\37\0\1\35\1\36\1\0\1\37\1\0\1\40"+
    "\1\0\1\41\7\0\1\42\1\0\1\43\1\44\16\0"+
    "\1\45\13\0\1\46\17\0\1\47\42\0\1\50\30\0"+
    "\1\51\55\0\1\52\36\0\1\53\17\0\1\54\47\0"+
    "\1\55\22\0\1\56\53\0\1\57\15\0\1\60\53\0"+
    "\1\61\15\0\1\62\35\0\1\63\45\0\1\64\33\0"+
    "\1\65\36\0\1\66\12\0\1\67\1\0\1\70\13\0"+
    "\1\71\13\0\1\72\1\0\1\73\22\0\1\74\36\0"+
    "\1\75\37\0\1\76\30\0\1\77\52\0\1\100\26\0"+
    "\1\101\32\0\1\102\37\0\1\103\34\0\1\104\30\0"+
    "\1\105\53\0\1\106\15\0\1\107\35\0\1\110\45\0"+
    "\1\111\32\0\1\112\34\0\1\113\32\0\1\114\40\0"+
    "\1\115\13\0\1\116\17\0\1\117\42\0\1\120\30\0"+
    "\1\121\55\0\1\122\36\0\1\123\17\0\1\124\47\0"+
    "\1\125\22\0\1\126\53\0\1\127\15\0\1\130\53\0"+
    "\1\131\24\0\1\132\33\0\1\133\35\0\1\134\42\0"+
    "\1\135\24\0\1\136\41\0\1\137\37\0\1\140\36\0"+
    "\1\141\34\0\1\142\2\0\1\143\32\0\1\144\34\0"+
    "\1\145\41\0\1\146\34\0\1\147\26\0\1\150\36\0"+
    "\1\151\52\0\1\152\26\0\1\153\32\0\1\154\37\0"+
    "\1\155\34\0\1\156\30\0\1\157\53\0\1\160\15\0"+
    "\1\161\35\0\1\162\45\0\1\163\32\0\1\164\34\0"+
    "\1\165\41\0\1\166\43\0\1\167\31\0\1\170\34\0"+
    "\1\171\47\0\1\172\20\0\1\173\50\0\1\174\34\0"+
    "\1\175\17\0\1\176\33\0\1\177\42\0\1\200\33\0"+
    "\1\201\41\0\1\202\33\0\1\203\35\0\1\204\42\0"+
    "\1\205\24\0\1\206\41\0\1\207\37\0\1\210\36\0"+
    "\1\211\34\0\1\212\2\0\1\213\32\0\1\214\34\0"+
    "\1\215\41\0\1\216\34\0\1\217\52\0\1\220\11\0"+
    "\1\221\40\0\1\222\53\0\1\223\13\0\1\224\41\0"+
    "\1\225\36\0\1\226\35\0\1\227\53\0\1\230\34\0"+
    "\1\231\16\0\1\232\41\0\1\233\43\0\1\234\31\0"+
    "\1\235\34\0\1\236\47\0\1\237\20\0\1\240\50\0"+
    "\1\241\34\0\1\242\17\0\1\243\33\0\1\244\42\0"+
    "\1\245\57\0\1\246\20\0\1\247\35\0\1\250\35\0"+
    "\1\251\25\0\1\252\55\0\1\253\24\0\1\254\42\0"+
    "\1\255\44\0\1\256\15\0\1\257\35\0\1\260\56\0"+
    "\1\261\11\0\1\262\40\0\1\263\53\0\1\264\13\0"+
    "\1\265\41\0\1\266\36\0\1\267\35\0\1\270\53\0"+
    "\1\271\34\0\1\272\14\0\1\273\45\0\1\274\34\0"+
    "\1\275\26\0\1\276\35\0\1\277\40\0\1\300\31\0"+
    "\1\301\65\0\1\302\33\0\1\303\20\0\1\304\35\0"+
    "\1\305\35\0\1\306\25\0\1\307\55\0\1\310\24\0"+
    "\1\311\42\0\1\312\44\0\1\313\15\0\1\314\42\0"+
    "\1\315\33\0\1\316\33\0\1\317\41\0\1\320\24\0"+
    "\1\321\36\0\1\322\41\0\1\323\31\0\1\324\45\0"+
    "\1\325\34\0\1\326\26\0\1\327\35\0\1\330\40\0"+
    "\1\331\31\0\1\332\57\0\1\333\36\0\1\334\13\0"+
    "\1\335\45\0\1\336\32\0\1\337\40\0\1\340\33\0"+
    "\1\341\33\0\1\342\41\0\1\343\24\0\1\344\36\0"+
    "\1\345\35\0\1\346\44\0\1\347\36\0\1\350\25\0"+
    "\1\351\56\0\1\352\36\0\1\353\13\0\1\354\45\0"+
    "\1\355\35\0\1\356\30\0\1\357\40\0\1\360\27\0"+
    "\1\361\44\0\1\362\36\0\1\363\35\0\1\364\24\0"+
    "\1\365\46\0\1\366\30\0\1\367\41\0\1\370\36\0"+
    "\1\371\30\0\1\372\42\0\1\373\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\127\0\1\11\5\0\1\11\2\0"+
    "\1\11\21\0\1\11\14\0\1\11\5\0\1\11\2\0"+
    "\1\11\16\0\1\11\11\0\3\11\22\0\1\11\7\0"+
    "\3\11\6\0\1\11\2\0\1\11\4\0\1\11\10\0"+
    "\1\11\1\0\1\11\2\0\1\11\4\0\1\11\4\0"+
    "\2\11\4\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[251];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return new Symbol(sym.AperturaTablaInformal, yychar, yyline, yytext());
          }
        case 33: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 34: break;
        case 12: 
          { return new Symbol(sym.AperturaComentario, yychar, yyline, yytext());
          }
        case 35: break;
        case 7: 
          { return new Symbol(sym.AperturaTitulo, yychar, yyline, yytext());
          }
        case 36: break;
        case 16: 
          { return new Symbol(sym.CierreComentario, yychar, yyline, yytext());
          }
        case 37: break;
        case 2: 
          { return new Symbol(sym.Texto, yychar, yyline, yytext());
          }
        case 38: break;
        case 22: 
          { return new Symbol(sym.AperturaSeccionSimple, yychar, yyline, yytext());
          }
        case 39: break;
        case 19: 
          { return new Symbol(sym.AperturaDerechos, yychar, yyline, yytext());
          }
        case 40: break;
        case 17: 
          { return new Symbol(sym.ArticleCierre, yychar, yyline, yytext());
          }
        case 41: break;
        case 30: 
          { return new Symbol(sym.CierreListaPuntos, yychar, yyline, yytext());
          }
        case 42: break;
        case 20: 
          { return new Symbol(sym.AperturaImportante, yychar, yyline, yytext());
          }
        case 43: break;
        case 24: 
          { return new Symbol(sym.CierreImportante, yychar, yyline, yytext());
          }
        case 44: break;
        case 31: 
          { return new Symbol(sym.CierreTablaInformal, yychar, yyline, yytext());
          }
        case 45: break;
        case 32: 
          { return new Symbol(sym.Encabezado, yychar, yyline, yytext());
          }
        case 46: break;
        case 4: 
          { return new Symbol(sym.AperturaParrafo, yychar, yyline, yytext());
          }
        case 47: break;
        case 25: 
          { return new Symbol(sym.AperturaObjetoMedios, yychar, yyline, yytext());
          }
        case 48: break;
        case 26: 
          { return new Symbol(sym.CierreSeccionSimple, yychar, yyline, yytext());
          }
        case 49: break;
        case 9: 
          { return new Symbol(sym.CierreInfo, yychar, yyline, yytext());
          }
        case 50: break;
        case 8: 
          { return new Symbol(sym.CierreParrafo, yychar, yyline, yytext());
          }
        case 51: break;
        case 28: 
          { return new Symbol(sym.CierreObjetoMedios, yychar, yyline, yytext());
          }
        case 52: break;
        case 27: 
          { return new Symbol(sym.AperturaListaPuntos, yychar, yyline, yytext());
          }
        case 53: break;
        case 10: 
          { return new Symbol(sym.CierreFecha, yychar, yyline, yytext());
          }
        case 54: break;
        case 23: 
          { return new Symbol(sym.CierreDerechos, yychar, yyline, yytext());
          }
        case 55: break;
        case 15: 
          { return new Symbol(sym.AperturaResumen, yychar, yyline, yytext());
          }
        case 56: break;
        case 11: 
          { return new Symbol(sym.CierreTitulo, yychar, yyline, yytext());
          }
        case 57: break;
        case 21: 
          { return new Symbol(sym.CierreResumen, yychar, yyline, yytext());
          }
        case 58: break;
        case 3: 
          { /*Ignore*/
          }
        case 59: break;
        case 5: 
          { return new Symbol(sym.AperturaInfo, yychar, yyline, yytext());
          }
        case 60: break;
        case 6: 
          { return new Symbol(sym.AperturaFecha, yychar, yyline, yytext());
          }
        case 61: break;
        case 18: 
          { return new Symbol(sym.CierreDireccion, yychar, yyline, yytext());
          }
        case 62: break;
        case 14: 
          { return new Symbol(sym.AperturaDireccion, yychar, yyline, yytext());
          }
        case 63: break;
        case 13: 
          { return new Symbol(sym.ArticleApertura, yychar, yyline, yytext());
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
