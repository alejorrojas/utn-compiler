/* The following code was generated by JFlex 1.4.3 on 1/7/23, 23:41 */

package code;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/7/23, 23:41 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/utn-parser/src/main/java/code/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    17, 30, 21,  4,  2,  2,  4,  0,  2,  2,  2,  2,  3,  4,  1, 10, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  2, 12, 27, 22,  2, 
     2,  1,  1, 33, 31, 37,  1,  1,  1,  1,  1,  1,  1,  1,  1, 32, 
    36,  1,  1,  1, 34,  1,  1,  1,  1, 35,  1,  2,  2,  2,  0,  1, 
     0, 26, 40, 38, 24, 20, 11, 29,  5, 14, 41, 16, 13, 28, 15, 25, 
     7,  1, 19,  8,  6, 42, 23, 44, 18, 43, 39,  2,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  2, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\2\270\0\1\3\26\0\1\4"+
    "\32\0\1\5\23\0\1\6\6\0\1\7\6\0\1\10"+
    "\2\0\1\11\1\0\1\12\1\13\1\14\1\0\1\15"+
    "\1\16\1\0\1\17\13\0\1\20\10\0\1\21\2\0"+
    "\1\22\6\0\1\23\5\0\1\24\2\0\1\25\11\0"+
    "\1\26\1\0\1\27\12\0\1\30\1\31\1\32\5\0"+
    "\1\33\1\34\1\35\1\0\1\36\1\37\1\0\1\40"+
    "\13\0\1\41\1\0\1\42\27\0\1\43\5\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\20\0\1\52\17\0"+
    "\1\53\1\54\4\0\1\55\2\0\1\56\1\57\1\60"+
    "\11\0\1\61\1\62\3\0\1\63\1\0\1\64\6\0"+
    "\1\65\1\66\2\0\1\67\6\0\1\70\4\0\1\71"+
    "\1\72\1\0\1\73\2\0\1\74\3\0\1\75\6\0"+
    "\1\76\1\77\1\0\1\100\2\0\1\101\3\0\1\102"+
    "\11\0\1\103\11\0\1\104\1\0\1\105\1\106\3\0"+
    "\1\107\1\110\1\111\1\0\1\112\4\0\1\113\2\0"+
    "\1\114\3\0\1\115\13\0\1\116\71\0\1\117\6\0"+
    "\1\120\31\0\1\121\64\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[721];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"+
    "\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573"+
    "\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db"+
    "\0\u0708\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843"+
    "\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13"+
    "\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b"+
    "\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b"+
    "\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3"+
    "\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b"+
    "\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383"+
    "\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb"+
    "\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\u1923"+
    "\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b"+
    "\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3"+
    "\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b"+
    "\0\u1d88\0\u1db5\0\u1de2\0\u1e0f\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3"+
    "\0\u1ef0\0\u1f1d\0\u1f4a\0\u1f77\0\u1fa4\0\u1fd1\0\u1ffe\0\u202b"+
    "\0\u2058\0\u2085\0\u20b2\0\u20df\0\55\0\u210c\0\u2139\0\u2166"+
    "\0\u2193\0\u21c0\0\u21ed\0\u221a\0\u2247\0\u2274\0\u22a1\0\u22ce"+
    "\0\u22fb\0\u2328\0\u2355\0\u2382\0\u23af\0\u23dc\0\u2409\0\u2436"+
    "\0\u2463\0\u2490\0\u24bd\0\55\0\u24ea\0\u2517\0\u2544\0\u2571"+
    "\0\u259e\0\u25cb\0\u25f8\0\u2625\0\u2652\0\u267f\0\u26ac\0\u26d9"+
    "\0\u2706\0\u2733\0\u2760\0\u278d\0\u27ba\0\u27e7\0\u2814\0\u2841"+
    "\0\u286e\0\u289b\0\u28c8\0\u28f5\0\u2922\0\u294f\0\55\0\u297c"+
    "\0\u29a9\0\u29d6\0\u2a03\0\u2a30\0\u2a5d\0\u2a8a\0\u2ab7\0\u2ae4"+
    "\0\u2b11\0\u2b3e\0\u2b6b\0\u2b98\0\u2bc5\0\u2bf2\0\u2c1f\0\u2c4c"+
    "\0\u2c79\0\u2ca6\0\55\0\u2cd3\0\u2d00\0\u2d2d\0\u2d5a\0\u2d87"+
    "\0\u2db4\0\55\0\u2de1\0\u2e0e\0\u2e3b\0\u2e68\0\u2e95\0\u2ec2"+
    "\0\55\0\u2eef\0\u2f1c\0\55\0\u2f49\0\55\0\55\0\55"+
    "\0\u2f76\0\55\0\55\0\u2fa3\0\55\0\u2fd0\0\u2ffd\0\u302a"+
    "\0\u3057\0\u3084\0\u30b1\0\u30de\0\u310b\0\u3138\0\u3165\0\u3192"+
    "\0\55\0\u31bf\0\u31ec\0\u3219\0\u3246\0\u3273\0\u32a0\0\u32cd"+
    "\0\u32fa\0\55\0\u3327\0\u3354\0\55\0\u3381\0\u33ae\0\u33db"+
    "\0\u3408\0\u3435\0\u3462\0\55\0\u348f\0\u34bc\0\u34e9\0\u3516"+
    "\0\u3543\0\55\0\u3570\0\u359d\0\55\0\u35ca\0\u35f7\0\u3624"+
    "\0\u3651\0\u367e\0\u36ab\0\u36d8\0\u3705\0\u3732\0\55\0\u375f"+
    "\0\55\0\u378c\0\u37b9\0\u37e6\0\u3813\0\u3840\0\u386d\0\u389a"+
    "\0\u38c7\0\u38f4\0\u3921\0\55\0\55\0\55\0\u394e\0\u397b"+
    "\0\u39a8\0\u39d5\0\u3a02\0\55\0\55\0\55\0\u3a2f\0\55"+
    "\0\55\0\u3a5c\0\55\0\u3a89\0\u3ab6\0\u3ae3\0\u3b10\0\u3b3d"+
    "\0\u3b6a\0\u3b97\0\u3bc4\0\u3bf1\0\u3c1e\0\u3c4b\0\55\0\u3c78"+
    "\0\55\0\u3ca5\0\u3cd2\0\u3cff\0\u3d2c\0\u3d59\0\u3d86\0\u3db3"+
    "\0\u3de0\0\u3e0d\0\u3e3a\0\u3e67\0\u3e94\0\u3ec1\0\u3eee\0\u3f1b"+
    "\0\u3f48\0\u3f75\0\u3fa2\0\u3fcf\0\u3ffc\0\u4029\0\u4056\0\u4083"+
    "\0\55\0\u40b0\0\u40dd\0\u410a\0\u4137\0\u4164\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\u4191\0\u41be\0\u41eb\0\u4218"+
    "\0\u4245\0\u4272\0\u429f\0\u42cc\0\u42f9\0\u4326\0\u4353\0\u4380"+
    "\0\u43ad\0\u43da\0\u4407\0\u4434\0\55\0\u4461\0\u448e\0\u44bb"+
    "\0\u44e8\0\u4515\0\u4542\0\u456f\0\u459c\0\u45c9\0\u45f6\0\u4623"+
    "\0\u4650\0\u467d\0\u46aa\0\u46d7\0\55\0\55\0\u4704\0\u4731"+
    "\0\u475e\0\u478b\0\55\0\u47b8\0\u47e5\0\55\0\55\0\55"+
    "\0\u4812\0\u483f\0\u486c\0\u4899\0\u48c6\0\u48f3\0\u4920\0\u494d"+
    "\0\u497a\0\55\0\55\0\u49a7\0\u49d4\0\u4a01\0\55\0\u4a2e"+
    "\0\55\0\u4a5b\0\u4a88\0\u4ab5\0\u4ae2\0\u4b0f\0\u4b3c\0\55"+
    "\0\55\0\u4b69\0\u4b96\0\55\0\u4bc3\0\u4bf0\0\u4c1d\0\u4c4a"+
    "\0\u4c77\0\u4ca4\0\55\0\u4cd1\0\u4cfe\0\u4d2b\0\u4d58\0\55"+
    "\0\55\0\u4d85\0\55\0\u4db2\0\u4ddf\0\55\0\u4e0c\0\u4e39"+
    "\0\u4e66\0\55\0\u4e93\0\u4ec0\0\u4eed\0\u4f1a\0\u4f47\0\u4f74"+
    "\0\55\0\55\0\u4fa1\0\55\0\u4fce\0\u4ffb\0\55\0\u5028"+
    "\0\u5055\0\u5082\0\55\0\u50af\0\u50dc\0\u5109\0\u5136\0\u5163"+
    "\0\u5190\0\u51bd\0\u51ea\0\u5217\0\55\0\u5244\0\u5271\0\u529e"+
    "\0\u52cb\0\u52f8\0\u5325\0\u5352\0\u537f\0\u53ac\0\55\0\u53d9"+
    "\0\55\0\55\0\u5406\0\u5433\0\u5460\0\55\0\55\0\55"+
    "\0\u548d\0\55\0\u54ba\0\u54e7\0\u5514\0\u5541\0\55\0\u556e"+
    "\0\u559b\0\55\0\u55c8\0\u55f5\0\u5622\0\55\0\u564f\0\u567c"+
    "\0\u56a9\0\u56d6\0\u5703\0\u5730\0\u575d\0\u578a\0\u57b7\0\u57e4"+
    "\0\u5811\0\55\0\u583e\0\u586b\0\u5898\0\u58c5\0\u58f2\0\u591f"+
    "\0\u594c\0\u5979\0\u59a6\0\u59d3\0\u5a00\0\u5a2d\0\u5a5a\0\u5a87"+
    "\0\u5ab4\0\u5ae1\0\u5b0e\0\u5b3b\0\u5b68\0\u5b95\0\u5bc2\0\u5bef"+
    "\0\u5c1c\0\u5c49\0\u5c76\0\u5ca3\0\u5cd0\0\u5cfd\0\u5d2a\0\u5d57"+
    "\0\u5d84\0\u5db1\0\u5dde\0\u5e0b\0\u5e38\0\u5e65\0\u5e92\0\u5ebf"+
    "\0\u5eec\0\u5f19\0\u5f46\0\u5f73\0\u5fa0\0\u5fcd\0\u5ffa\0\u6027"+
    "\0\u6054\0\u6081\0\u60ae\0\u60db\0\u6108\0\u6135\0\u6162\0\u618f"+
    "\0\u61bc\0\u61e9\0\u6216\0\55\0\u6243\0\u6270\0\u629d\0\u62ca"+
    "\0\u62f7\0\u6324\0\55\0\u6351\0\u637e\0\u63ab\0\u63d8\0\u6405"+
    "\0\u6432\0\u645f\0\u648c\0\u64b9\0\u64e6\0\u6513\0\u6540\0\u656d"+
    "\0\u659a\0\u65c7\0\u65f4\0\u6621\0\u664e\0\u667b\0\u66a8\0\u66d5"+
    "\0\u6702\0\u672f\0\u675c\0\u6789\0\55\0\u67b6\0\u67e3\0\u6810"+
    "\0\u683d\0\u686a\0\u6897\0\u68c4\0\u68f1\0\u691e\0\u694b\0\u6978"+
    "\0\u69a5\0\u69d2\0\u69ff\0\u6a2c\0\u6a59\0\u6a86\0\u6ab3\0\u6ae0"+
    "\0\u6b0d\0\u6b3a\0\u6b67\0\u6b94\0\u6bc1\0\u6bee\0\u6c1b\0\u6c48"+
    "\0\u6c75\0\u6ca2\0\u6ccf\0\u6cfc\0\u6d29\0\u6d56\0\u6d83\0\u6db0"+
    "\0\u6ddd\0\u6e0a\0\u6e37\0\u6e64\0\u6e91\0\u6ebe\0\u6eeb\0\u6f18"+
    "\0\u6f45\0\u6f72\0\u6f9f\0\u6fcc\0\u6ff9\0\u7026\0\u7053\0\u7080"+
    "\0\u70ad";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[721];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\13\3\1\4\11\3\1\2\26\3\56\0\13\3"+
    "\1\0\11\3\1\0\26\3\5\0\1\5\1\6\1\7"+
    "\1\10\1\0\1\11\1\12\1\0\1\13\1\14\4\0"+
    "\1\15\1\16\2\0\1\17\1\20\1\0\1\21\1\0"+
    "\1\22\1\0\1\23\7\0\1\24\4\0\1\25\32\0"+
    "\1\26\30\0\1\27\5\0\1\30\2\0\1\31\16\0"+
    "\1\32\12\0\1\33\11\0\1\34\24\0\1\35\30\0"+
    "\1\36\7\0\1\37\5\0\1\40\25\0\1\41\7\0"+
    "\1\42\1\43\1\44\1\45\2\0\1\46\1\0\1\47"+
    "\1\50\4\0\1\51\1\52\2\0\1\53\1\54\1\0"+
    "\1\55\1\0\1\56\11\0\1\57\4\0\1\60\17\0"+
    "\1\61\54\0\1\62\44\0\1\63\10\0\1\64\14\0"+
    "\1\65\51\0\1\66\42\0\1\67\14\0\1\70\36\0"+
    "\1\71\70\0\1\72\45\0\1\73\4\0\1\74\17\0"+
    "\1\75\1\0\1\76\26\0\1\77\67\0\1\100\33\0"+
    "\1\101\12\0\1\102\47\0\1\103\45\0\1\104\63\0"+
    "\1\105\61\0\1\106\31\0\1\107\71\0\1\110\62\0"+
    "\1\111\54\0\1\112\46\0\1\113\54\0\1\114\6\0"+
    "\1\115\56\0\1\116\66\0\1\117\31\0\1\120\62\0"+
    "\1\121\30\0\1\122\5\0\1\123\2\0\1\124\16\0"+
    "\1\125\12\0\1\126\11\0\1\127\24\0\1\130\30\0"+
    "\1\131\7\0\1\132\5\0\1\133\25\0\1\134\20\0"+
    "\1\135\54\0\1\136\44\0\1\137\10\0\1\140\14\0"+
    "\1\141\51\0\1\142\42\0\1\143\14\0\1\144\36\0"+
    "\1\145\70\0\1\146\45\0\1\147\4\0\1\150\17\0"+
    "\1\151\1\0\1\152\26\0\1\153\46\0\1\154\12\0"+
    "\1\155\47\0\1\156\53\0\1\157\41\0\1\160\6\0"+
    "\1\161\61\0\1\162\43\0\1\163\50\0\1\164\22\0"+
    "\1\165\76\0\1\166\6\0\1\167\55\0\1\170\22\0"+
    "\1\171\52\0\1\172\32\0\1\173\54\0\1\174\76\0"+
    "\1\175\34\0\1\176\52\0\1\177\76\0\1\200\64\0"+
    "\1\201\22\0\1\202\55\0\1\203\24\0\1\204\52\0"+
    "\1\205\52\0\1\206\56\0\1\207\53\0\1\210\40\0"+
    "\1\211\70\0\1\212\53\0\1\213\43\0\1\214\67\0"+
    "\1\215\46\0\1\216\36\0\1\217\55\0\1\220\53\0"+
    "\1\221\65\0\1\222\52\0\1\223\63\0\1\224\61\0"+
    "\1\225\31\0\1\226\71\0\1\227\62\0\1\230\54\0"+
    "\1\231\46\0\1\232\54\0\1\233\6\0\1\234\56\0"+
    "\1\235\66\0\1\236\31\0\1\237\54\0\1\240\41\0"+
    "\1\241\6\0\1\242\61\0\1\243\43\0\1\244\50\0"+
    "\1\245\22\0\1\246\76\0\1\247\6\0\1\250\55\0"+
    "\1\251\22\0\1\252\52\0\1\253\32\0\1\254\54\0"+
    "\1\255\76\0\1\256\34\0\1\257\52\0\1\260\76\0"+
    "\1\261\32\0\1\262\55\0\1\263\24\0\1\264\52\0"+
    "\1\265\32\0\1\266\52\0\1\267\66\0\1\270\70\0"+
    "\1\271\51\0\1\272\54\0\1\273\60\0\1\274\45\0"+
    "\1\275\51\0\1\276\36\0\1\277\65\0\1\300\62\0"+
    "\1\301\54\0\1\302\46\0\1\303\61\0\1\304\37\0"+
    "\1\305\53\0\1\306\65\0\1\307\77\0\1\310\66\0"+
    "\1\311\54\0\1\312\35\0\1\313\43\0\1\314\55\0"+
    "\1\315\60\0\1\316\32\0\1\317\72\0\1\320\102\0"+
    "\1\321\55\0\1\322\25\0\1\323\56\0\1\324\52\0"+
    "\1\325\54\0\1\326\45\0\1\327\14\0\1\330\40\0"+
    "\1\331\70\0\1\332\52\0\1\333\56\0\1\334\53\0"+
    "\1\335\40\0\1\336\70\0\1\337\53\0\1\340\43\0"+
    "\1\341\67\0\1\342\46\0\1\343\36\0\1\344\55\0"+
    "\1\345\53\0\1\346\65\0\1\347\45\0\1\350\52\0"+
    "\1\351\66\0\1\352\70\0\1\353\51\0\1\354\54\0"+
    "\1\355\60\0\1\356\45\0\1\357\51\0\1\360\36\0"+
    "\1\361\65\0\1\362\62\0\1\363\54\0\1\364\46\0"+
    "\1\365\61\0\1\366\37\0\1\367\53\0\1\370\65\0"+
    "\1\371\111\0\1\372\54\0\1\373\35\0\1\374\43\0"+
    "\1\375\37\0\1\376\64\0\1\377\57\0\1\u0100\51\0"+
    "\1\u0101\61\0\1\u0102\2\0\1\u0103\51\0\1\u0104\55\0"+
    "\1\u0105\103\0\1\u0106\33\0\1\u0107\37\0\1\u0108\70\0"+
    "\1\u0109\51\0\1\u010a\74\0\1\u010b\32\0\1\u010c\53\0"+
    "\1\u010d\62\0\1\u010e\55\0\1\u010f\64\0\1\u0110\40\0"+
    "\1\u0111\51\0\1\u0112\55\0\1\u0113\56\0\1\u0114\51\0"+
    "\1\u0115\57\0\1\u0116\54\0\1\u0117\54\0\1\u0118\35\0"+
    "\1\u0119\73\0\1\u011a\54\0\1\u011b\34\0\1\u011c\74\0"+
    "\1\u011d\52\0\1\u011e\53\0\1\u011f\62\0\1\u0120\57\0"+
    "\1\u0121\44\0\1\u0122\60\0\1\u0123\32\0\1\u0124\72\0"+
    "\1\u0125\102\0\1\u0126\55\0\1\u0127\25\0\1\u0128\56\0"+
    "\1\u0129\52\0\1\u012a\54\0\1\u012b\45\0\1\u012c\14\0"+
    "\1\u012d\40\0\1\u012e\70\0\1\u012f\30\0\1\u0130\64\0"+
    "\1\u0131\64\0\1\u0132\44\0\1\u0133\61\0\1\u0134\2\0"+
    "\1\u0135\51\0\1\u0136\55\0\1\u0137\103\0\1\u0138\33\0"+
    "\1\u0139\37\0\1\u013a\70\0\1\u013b\51\0\1\u013c\74\0"+
    "\1\u013d\32\0\1\u013e\53\0\1\u013f\62\0\1\u0140\55\0"+
    "\1\u0141\50\0\1\u0142\51\0\1\u0143\55\0\1\u0144\56\0"+
    "\1\u0145\45\0\1\u0146\43\0\1\u0147\70\0\1\u0148\101\0"+
    "\1\u0149\41\0\1\u014a\26\0\1\u014b\76\0\1\u014c\1\u014d"+
    "\31\0\1\u014e\17\0\1\u014f\36\0\1\u0150\72\0\1\u0151"+
    "\56\0\1\u0152\1\u0153\40\0\1\u0154\47\0\1\u0155\76\0"+
    "\1\u0156\45\0\1\u0157\62\0\1\u0158\66\0\1\u0159\27\0"+
    "\1\u015a\55\0\1\u015b\63\0\1\u015c\54\0\1\u015d\54\0"+
    "\1\u015e\36\0\1\u015f\76\0\1\u0160\41\0\1\u0161\61\0"+
    "\1\u0162\53\0\1\u0163\57\0\1\u0164\54\0\1\u0165\54\0"+
    "\1\u0166\35\0\1\u0167\73\0\1\u0168\54\0\1\u0169\34\0"+
    "\1\u016a\74\0\1\u016b\52\0\1\u016c\53\0\1\u016d\62\0"+
    "\1\u016e\57\0\1\u016f\37\0\1\u0170\43\0\1\u0171\115\0"+
    "\1\u0172\41\0\1\u0173\26\0\1\u0174\77\0\1\u0175\31\0"+
    "\1\u0176\17\0\1\u0177\36\0\1\u0178\72\0\1\u0179\57\0"+
    "\1\u017a\40\0\1\u017b\47\0\1\u017c\76\0\1\u017d\45\0"+
    "\1\u017e\62\0\1\u017f\41\0\1\u0180\55\0\1\u0181\67\0"+
    "\1\u0182\46\0\1\u0183\45\0\1\u0184\63\0\1\u0185\62\0"+
    "\1\u0186\54\0\1\u0187\54\0\1\u0188\72\0\1\u0189\54\0"+
    "\1\u018a\22\0\1\u018b\70\0\1\u018c\72\0\1\u018d\30\0"+
    "\1\u018e\40\0\1\u018f\112\0\1\u0190\34\0\1\u0191\76\0"+
    "\1\u0192\50\0\1\u0193\45\0\1\u0194\25\0\1\u0195\72\0"+
    "\1\u0196\56\0\1\u0197\54\0\1\u0198\54\0\1\u0199\54\0"+
    "\1\u019a\54\0\1\u019b\54\0\1\u019c\36\0\1\u019d\76\0"+
    "\1\u019e\41\0\1\u019f\61\0\1\u01a0\62\0\1\u01a1\46\0"+
    "\1\u01a2\54\0\1\u01a3\62\0\1\u01a4\54\0\1\u01a5\72\0"+
    "\1\u01a6\54\0\1\u01a7\22\0\1\u01a8\106\0\1\u01a9\30\0"+
    "\1\u01aa\40\0\1\u01ab\112\0\1\u01ac\34\0\1\u01ad\76\0"+
    "\1\u01ae\41\0\1\u01af\25\0\1\u01b0\102\0\1\u01b1\54\0"+
    "\1\u01b2\36\0\1\u01b3\66\0\1\u01b4\41\0\1\u01b5\56\0"+
    "\1\u01b6\43\0\1\u01b7\117\0\1\u01b8\20\0\1\u01b9\47\0"+
    "\1\u01ba\52\0\1\u01bb\117\0\1\u01bc\31\0\1\u01bd\54\0"+
    "\1\u01be\34\0\1\u01bf\117\0\1\u01c0\50\0\1\u01c1\14\0"+
    "\1\u01c2\75\0\1\u01c3\74\0\1\u01c4\32\0\1\u01c5\56\0"+
    "\1\u01c6\54\0\1\u01c7\54\0\1\u01c8\62\0\1\u01c9\54\0"+
    "\1\u01ca\50\0\1\u01cb\41\0\1\u01cc\56\0\1\u01cd\106\0"+
    "\1\u01ce\20\0\1\u01cf\47\0\1\u01d0\115\0\1\u01d1\31\0"+
    "\1\u01d2\54\0\1\u01d3\34\0\1\u01d4\117\0\1\u01d5\10\0"+
    "\1\u01d6\75\0\1\u01d7\52\0\1\u01d8\56\0\1\u01d9\45\0"+
    "\1\u01da\52\0\1\u01db\45\0\1\u01dc\54\0\1\u01dd\100\0"+
    "\1\u01de\46\0\1\u01df\56\0\1\u01e0\54\0\1\u01e1\60\0"+
    "\1\u01e2\46\0\1\u01e3\56\0\1\u01e4\52\0\1\u01e5\51\0"+
    "\1\u01e6\41\0\1\u01e7\54\0\1\u01e8\114\0\1\u01e9\32\0"+
    "\1\u01ea\56\0\1\u01eb\43\0\1\u01ec\45\0\1\u01ed\54\0"+
    "\1\u01ee\72\0\1\u01ef\56\0\1\u01f0\54\0\1\u01f1\52\0"+
    "\1\u01f2\56\0\1\u01f3\52\0\1\u01f4\36\0\1\u01f5\74\0"+
    "\1\u01f6\46\0\1\u01f7\52\0\1\u01f8\70\0\1\u01f9\50\0"+
    "\1\u01fa\47\0\1\u01fb\101\0\1\u01fc\27\0\1\u01fd\101\0"+
    "\1\u01fe\54\0\1\u01ff\40\0\1\u0200\50\0\1\u0201\54\0"+
    "\1\u0202\34\0\1\u0203\74\0\1\u0204\44\0\1\u0205\70\0"+
    "\1\u0206\50\0\1\u0207\74\0\1\u0208\54\0\1\u0209\54\0"+
    "\1\u020a\34\0\1\u020b\37\0\1\u020c\53\0\1\u020d\114\0"+
    "\1\u020e\17\0\1\u020f\47\0\1\u0210\61\0\1\u0211\47\0"+
    "\1\u0212\54\0\1\u0213\71\0\1\u0214\57\0\1\u0215\36\0"+
    "\1\u0216\114\0\1\u0217\12\0\1\u0218\54\0\1\u0219\54\0"+
    "\1\u021a\53\0\1\u021b\55\0\1\u021c\63\0\1\u021d\55\0"+
    "\1\u021e\64\0\1\u021f\44\0\1\u0220\64\0\1\u0221\54\0"+
    "\1\u0222\34\0\1\u0223\54\0\1\u0224\63\0\1\u0225\65\0"+
    "\1\u0226\54\0\1\u0227\54\0\1\u0228\51\0\1\u0229\57\0"+
    "\1\u022a\52\0\1\u022b\45\0\1\u022c\54\0\1\u022d\55\0"+
    "\1\u022e\64\0\1\u022f\52\0\1\u0230\54\0\1\u0231\56\0"+
    "\1\u0232\52\0\1\u0233\54\0\1\u0234\76\0\1\u0235\34\0"+
    "\1\u0236\41\0\1\u0237\64\0\1\u0238\54\0\1\u0239\46\0"+
    "\1\u023a\50\0\1\u023b\67\0\1\u023c\54\0\1\u023d\54\0"+
    "\1\u023e\55\0\1\u023f\42\0\1\u0240\54\0\1\u0241\67\0"+
    "\1\u0242\33\0\1\u0243\5\0\1\u0244\1\u0245\51\0\1\u0246"+
    "\21\0\1\u0247\32\0\1\u0248\21\0\1\u0249\27\0\1\u0244"+
    "\54\0\1\u024a\63\0\1\u024b\64\0\1\u024c\54\0\1\u024d"+
    "\54\0\1\u024e\54\0\1\u024f\36\0\1\u0250\63\0\1\u0251"+
    "\37\0\1\u0252\1\0\1\u0252\1\0\1\u0253\3\u0252\1\0"+
    "\1\u0252\1\u0254\1\u0255\4\u0252\1\0\3\u0252\2\0\4\u0252"+
    "\1\0\2\u0252\1\0\16\u0252\1\0\1\u0256\1\0\1\u0256"+
    "\1\0\1\u0257\3\u0256\1\0\1\u0256\1\u0258\1\u0259\4\u0256"+
    "\1\0\3\u0256\2\0\4\u0256\1\0\2\u0256\1\0\16\u0256"+
    "\1\0\1\u025a\1\0\1\u025a\1\0\1\u025b\3\u025a\1\0"+
    "\1\u025a\1\u025c\1\u025d\4\u025a\1\0\3\u025a\2\0\4\u025a"+
    "\1\0\2\u025a\1\0\16\u025a\1\0\1\u025e\1\0\1\u025e"+
    "\1\0\1\u025f\3\u025e\1\0\1\u025e\1\u0260\1\u0261\4\u025e"+
    "\1\0\3\u025e\2\0\4\u025e\1\0\2\u025e\1\0\16\u025e"+
    "\10\0\1\u0262\1\u0263\62\0\1\161\36\0\1\u0252\1\0"+
    "\1\u0252\1\0\1\u0253\3\u0252\1\0\1\u0252\1\u0254\1\0"+
    "\4\u0252\1\0\3\u0252\1\u0264\1\0\4\u0252\1\0\2\u0252"+
    "\1\0\16\u0252\1\0\1\u0252\1\0\1\u0252\1\0\1\u0253"+
    "\1\u0254\2\u0252\1\0\1\u0252\1\u0254\1\0\4\u0252\1\0"+
    "\3\u0252\1\u0264\1\0\4\u0252\1\0\2\u0252\1\0\16\u0252"+
    "\1\0\1\u0252\1\0\1\u0252\1\0\1\u0253\1\u0265\2\u0252"+
    "\1\0\1\u0252\1\u0254\1\0\4\u0252\1\0\3\u0252\1\u0264"+
    "\1\0\4\u0252\1\0\2\u0252\1\0\16\u0252\16\0\1\u0266"+
    "\37\0\1\u0256\1\0\1\u0256\1\0\1\u0257\3\u0256\1\0"+
    "\1\u0256\1\u0258\1\0\4\u0256\1\0\3\u0256\1\u0267\1\0"+
    "\4\u0256\1\0\2\u0256\1\0\16\u0256\1\0\1\u0256\1\0"+
    "\1\u0256\1\0\1\u0257\1\u0258\2\u0256\1\0\1\u0256\1\u0258"+
    "\1\0\4\u0256\1\0\3\u0256\1\u0267\1\0\4\u0256\1\0"+
    "\2\u0256\1\0\16\u0256\1\0\1\u0256\1\0\1\u0256\1\0"+
    "\1\u0257\1\u0268\2\u0256\1\0\1\u0256\1\u0258\1\0\4\u0256"+
    "\1\0\3\u0256\1\u0267\1\0\4\u0256\1\0\2\u0256\1\0"+
    "\16\u0256\16\0\1\u0269\37\0\1\u025a\1\0\1\u025a\1\0"+
    "\1\u025b\3\u025a\1\0\1\u025a\1\u025c\1\0\4\u025a\1\0"+
    "\3\u025a\1\u026a\1\0\4\u025a\1\0\2\u025a\1\0\16\u025a"+
    "\1\0\1\u025a\1\0\1\u025a\1\0\1\u025b\1\u025c\2\u025a"+
    "\1\0\1\u025a\1\u025c\1\0\4\u025a\1\0\3\u025a\1\u026a"+
    "\1\0\4\u025a\1\0\2\u025a\1\0\16\u025a\1\0\1\u025a"+
    "\1\0\1\u025a\1\0\1\u025b\1\u026b\2\u025a\1\0\1\u025a"+
    "\1\u025c\1\0\4\u025a\1\0\3\u025a\1\u026a\1\0\4\u025a"+
    "\1\0\2\u025a\1\0\16\u025a\27\0\1\u026c\26\0\1\u025e"+
    "\1\0\1\u025e\1\0\1\u025f\3\u025e\1\0\1\u025e\1\u0260"+
    "\1\0\4\u025e\1\0\3\u025e\1\u026d\1\0\4\u025e\1\0"+
    "\2\u025e\1\0\16\u025e\1\0\1\u025e\1\0\1\u025e\1\0"+
    "\1\u025f\1\u0260\2\u025e\1\0\1\u025e\1\u0260\1\0\4\u025e"+
    "\1\0\3\u025e\1\u026d\1\0\4\u025e\1\0\2\u025e\1\0"+
    "\16\u025e\1\0\1\u025e\1\0\1\u025e\1\0\1\u025f\1\u026e"+
    "\2\u025e\1\0\1\u025e\1\u0260\1\0\4\u025e\1\0\3\u025e"+
    "\1\u026d\1\0\4\u025e\1\0\2\u025e\1\0\16\u025e\27\0"+
    "\1\u026f\36\0\1\u0263\55\0\1\u0270\54\0\1\u0271\43\0"+
    "\1\u0252\1\0\1\u0252\1\0\1\u0253\1\u0252\1\u0272\1\u0252"+
    "\1\0\1\u0252\1\u0254\1\0\4\u0252\1\0\3\u0252\1\u0264"+
    "\1\0\4\u0252\1\0\2\u0252\1\0\16\u0252\34\0\1\u0273"+
    "\41\0\1\u0264\34\0\1\u0256\1\0\1\u0256\1\0\1\u0257"+
    "\1\u0256\1\u0274\1\u0256\1\0\1\u0256\1\u0258\1\0\4\u0256"+
    "\1\0\3\u0256\1\u0267\1\0\4\u0256\1\0\2\u0256\1\0"+
    "\16\u0256\34\0\1\u0275\32\0\1\u0276\43\0\1\u025a\1\0"+
    "\1\u025a\1\0\1\u025b\1\u025a\1\u0277\1\u025a\1\0\1\u025a"+
    "\1\u025c\1\0\4\u025a\1\0\3\u025a\1\u026a\1\0\4\u025a"+
    "\1\0\2\u025a\1\0\16\u025a\16\0\1\u0278\57\0\1\u026a"+
    "\34\0\1\u025e\1\0\1\u025e\1\0\1\u025f\1\u025e\1\u0279"+
    "\1\u025e\1\0\1\u025e\1\u0260\1\0\4\u025e\1\0\3\u025e"+
    "\1\u026d\1\0\4\u025e\1\0\2\u025e\1\0\16\u025e\16\0"+
    "\1\u027a\50\0\1\u027b\70\0\1\u027c\27\0\1\u0252\1\0"+
    "\1\u0252\1\0\1\u0253\2\u0252\1\u027d\1\u027e\1\u0252\1\u0254"+
    "\1\0\4\u0252\1\0\3\u0252\1\u0264\1\0\4\u0252\1\0"+
    "\2\u0252\1\0\16\u0252\32\0\1\u027f\23\0\1\u0256\1\0"+
    "\1\u0256\1\0\1\u0257\2\u0256\1\u0280\1\u0281\1\u0256\1\u0258"+
    "\1\0\4\u0256\1\0\3\u0256\1\u0267\1\0\4\u0256\1\0"+
    "\2\u0256\1\0\16\u0256\32\0\1\u0282\50\0\1\u0283\27\0"+
    "\1\u025a\1\0\1\u025a\1\0\1\u025b\2\u025a\1\u0284\1\u0285"+
    "\1\u025a\1\u025c\1\0\4\u025a\1\0\3\u025a\1\u026a\1\0"+
    "\4\u025a\1\0\2\u025a\1\0\16\u025a\30\0\1\u0286\25\0"+
    "\1\u025e\1\0\1\u025e\1\0\1\u025f\2\u025e\1\u0287\1\u0288"+
    "\1\u025e\1\u0260\1\0\4\u025e\1\0\3\u025e\1\u026d\1\0"+
    "\4\u025e\1\0\2\u025e\1\0\16\u025e\30\0\1\u0289\25\0"+
    "\1\u028a\2\0\10\u028a\1\0\4\u028a\1\0\3\u028a\2\0"+
    "\7\u028a\1\0\16\u028a\1\0\1\u0252\1\0\1\u0252\1\0"+
    "\1\u0253\3\u0252\1\u027e\1\u0252\1\u0254\1\0\4\u0252\1\0"+
    "\3\u0252\1\u0264\1\0\4\u0252\1\0\2\u0252\1\0\16\u0252"+
    "\12\0\1\u028b\77\0\1\u028c\20\0\1\u0256\1\0\1\u0256"+
    "\1\0\1\u0257\3\u0256\1\u0281\1\u0256\1\u0258\1\0\4\u0256"+
    "\1\0\3\u0256\1\u0267\1\0\4\u0256\1\0\2\u0256\1\0"+
    "\16\u0256\12\0\1\u028d\77\0\1\u028e\20\0\1\u025a\1\0"+
    "\1\u025a\1\0\1\u025b\3\u025a\1\u0285\1\u025a\1\u025c\1\0"+
    "\4\u025a\1\0\3\u025a\1\u026a\1\0\4\u025a\1\0\2\u025a"+
    "\1\0\16\u025a\12\0\1\u028f\66\0\1\u0290\31\0\1\u025e"+
    "\1\0\1\u025e\1\0\1\u025f\3\u025e\1\u0288\1\u025e\1\u0260"+
    "\1\0\4\u025e\1\0\3\u025e\1\u026d\1\0\4\u025e\1\0"+
    "\2\u025e\1\0\16\u025e\12\0\1\u0291\66\0\1\u0292\31\0"+
    "\1\u028a\2\0\10\u028a\1\0\4\u028a\1\0\3\u028a\1\u0293"+
    "\1\0\7\u028a\1\0\16\u028a\12\0\1\u0294\66\0\1\u0295"+
    "\42\0\1\u0296\66\0\1\u0297\42\0\1\u0298\73\0\1\u0299"+
    "\35\0\1\u029a\73\0\1\u029b\44\0\1\u029c\4\0\1\u029d"+
    "\27\0\1\u029e\2\0\10\u029e\1\0\4\u029e\1\0\3\u029e"+
    "\2\0\7\u029e\1\0\16\u029e\30\0\1\u029f\25\0\1\u02a0"+
    "\2\0\10\u02a0\1\0\4\u02a0\1\0\3\u02a0\2\0\7\u02a0"+
    "\1\0\16\u02a0\30\0\1\u02a1\25\0\1\u02a2\2\0\10\u02a2"+
    "\1\0\4\u02a2\1\0\3\u02a2\2\0\7\u02a2\1\0\16\u02a2"+
    "\30\0\1\u02a3\25\0\1\u02a4\2\0\10\u02a4\1\0\4\u02a4"+
    "\1\0\3\u02a4\2\0\7\u02a4\1\0\16\u02a4\30\0\1\u02a5"+
    "\52\0\1\u029d\27\0\1\u029e\1\0\1\u0252\10\u029e\1\0"+
    "\4\u029e\1\0\3\u029e\1\u0264\1\0\7\u029e\1\0\16\u029e"+
    "\32\0\1\u02a6\23\0\1\u02a0\1\0\1\u0256\10\u02a0\1\0"+
    "\4\u02a0\1\0\3\u02a0\1\u0267\1\0\7\u02a0\1\0\16\u02a0"+
    "\32\0\1\u02a7\23\0\1\u02a2\1\0\1\u025a\10\u02a2\1\0"+
    "\4\u02a2\1\0\3\u02a2\1\u026a\1\0\7\u02a2\1\0\16\u02a2"+
    "\32\0\1\u02a8\23\0\1\u02a4\1\0\1\u025e\10\u02a4\1\0"+
    "\4\u02a4\1\0\3\u02a4\1\u026d\1\0\7\u02a4\1\0\16\u02a4"+
    "\32\0\1\u02a9\30\0\1\u02aa\54\0\1\u02ab\54\0\1\u02ac"+
    "\54\0\1\u02ad\100\0\1\u02ae\54\0\1\u02af\54\0\1\u02b0"+
    "\54\0\1\u02b1\43\0\1\u02b2\54\0\1\u02b3\54\0\1\u02b4"+
    "\54\0\1\u02b5\46\0\1\u02b6\54\0\1\u02b7\54\0\1\u02b8"+
    "\54\0\1\u02b9\57\0\1\u02ba\54\0\1\u02bb\54\0\1\u02bc"+
    "\54\0\1\u02bd\53\0\1\u02be\54\0\1\u02bf\54\0\1\u02c0"+
    "\54\0\1\u02c1\63\0\1\u02c2\54\0\1\u02c3\54\0\1\u02c4"+
    "\54\0\1\u02c5\53\0\1\u02c6\54\0\1\u02c7\54\0\1\u02c8"+
    "\54\0\1\u02c9\55\0\1\u02ca\54\0\1\u02cb\54\0\1\u02cc"+
    "\54\0\1\u02cd\43\0\1\u02ce\54\0\1\u02cf\54\0\1\u02d0"+
    "\54\0\1\u02d1\52\0\1\u0246\76\0\1\u0247\32\0\1\u0248"+
    "\76\0\1\u0249\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28890];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\2\1\270\0\1\11\26\0\1\11\32\0"+
    "\1\11\23\0\1\11\6\0\1\11\6\0\1\11\2\0"+
    "\1\11\1\0\3\11\1\0\2\11\1\0\1\11\13\0"+
    "\1\11\10\0\1\11\2\0\1\11\6\0\1\11\5\0"+
    "\1\11\2\0\1\11\11\0\1\11\1\0\1\11\12\0"+
    "\3\11\5\0\3\11\1\0\2\11\1\0\1\11\13\0"+
    "\1\11\1\0\1\11\27\0\1\11\5\0\6\11\20\0"+
    "\1\11\17\0\2\11\4\0\1\11\2\0\3\11\11\0"+
    "\2\11\3\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\1\11\6\0\1\11\4\0\2\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\6\0\2\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\11\0\1\11\11\0\1\11\1\0"+
    "\2\11\3\0\3\11\1\0\1\11\4\0\1\11\2\0"+
    "\1\11\3\0\1\11\13\0\1\11\71\0\1\11\6\0"+
    "\1\11\31\0\1\11\64\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[721];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
    * Crea y devuelve un nuevo simbolo para luego ser utilizado en parser
    */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { return new Symbol(sym.CierreAuthor, yychar, yyline, yytext());
          }
        case 82: break;
        case 45: 
          { return new Symbol(sym.AperturaComment, yychar, yyline, yytext());
          }
        case 83: break;
        case 18: 
          { return new Symbol(sym.CierreInfo, yychar, yyline, yytext());
          }
        case 84: break;
        case 66: 
          { return new Symbol(sym.CierreCopyright, yychar, yyline, yytext());
          }
        case 85: break;
        case 40: 
          { return new Symbol(sym.CierreTgroup, yychar, yyline, yytext());
          }
        case 86: break;
        case 76: 
          { return new Symbol(sym.AperturaInformalTable, yychar, yyline, yytext());
          }
        case 87: break;
        case 16: 
          { return new Symbol(sym.CierrePara, yychar, yyline, yytext());
          }
        case 88: break;
        case 37: 
          { return new Symbol(sym.AperturaSection, yychar, yyline, yytext());
          }
        case 89: break;
        case 32: 
          { return new Symbol(sym.CierreState, yychar, yyline, yytext());
          }
        case 90: break;
        case 11: 
          { return new Symbol(sym.AperturaTfoot, yychar, yyline, yytext());
          }
        case 91: break;
        case 73: 
          { return new Symbol(sym.CierreMediaObject, yychar, yyline, yytext());
          }
        case 92: break;
        case 29: 
          { return new Symbol(sym.CierreTitulo, yychar, yyline, yytext());
          }
        case 93: break;
        case 60: 
          { return new Symbol(sym.AperturaFirstName, yychar, yyline, yytext());
          }
        case 94: break;
        case 50: 
          { return new Symbol(sym.CierreAddress, yychar, yyline, yytext());
          }
        case 95: break;
        case 79: 
          { return new Symbol(sym.Imagedata, yychar, yyline, yytext());
          }
        case 96: break;
        case 64: 
          { return new Symbol(sym.CierreFirstName, yychar, yyline, yytext());
          }
        case 97: break;
        case 31: 
          { return new Symbol(sym.CierrePhone, yychar, yyline, yytext());
          }
        case 98: break;
        case 9: 
          { return new Symbol(sym.AperturaYear, yychar, yyline, yytext());
          }
        case 99: break;
        case 26: 
          { return new Symbol(sym.AperturaStreet, yychar, yyline, yytext());
          }
        case 100: break;
        case 33: 
          { return new Symbol(sym.CierreEntry, yychar, yyline, yytext());
          }
        case 101: break;
        case 46: 
          { return new Symbol(sym.CierreSimPara, yychar, yyline, yytext());
          }
        case 102: break;
        case 10: 
          { return new Symbol(sym.AperturaThead, yychar, yyline, yytext());
          }
        case 103: break;
        case 81: 
          { return new Symbol(sym.AperturaLink, yychar, yyline, yytext());
          }
        case 104: break;
        case 35: 
          { return new Symbol(sym.AperturaAuthor, yychar, yyline, yytext());
          }
        case 105: break;
        case 1: 
          { return new Symbol(sym.Texto, yychar, yyline, yytext());
          }
        case 106: break;
        case 55: 
          { return new Symbol(sym.AperturaAbstract, yychar, yyline, yytext());
          }
        case 107: break;
        case 15: 
          { return new Symbol(sym.AperturaState, yychar, yyline, yytext());
          }
        case 108: break;
        case 25: 
          { return new Symbol(sym.AperturaTgroup, yychar, yyline, yytext());
          }
        case 109: break;
        case 67: 
          { return new Symbol(sym.CierreSimpleSect, yychar, yyline, yytext());
          }
        case 110: break;
        case 48: 
          { return new Symbol(sym.CierreSurname, yychar, yyline, yytext());
          }
        case 111: break;
        case 59: 
          { return new Symbol(sym.CierreAbstract, yychar, yyline, yytext());
          }
        case 112: break;
        case 72: 
          { return new Symbol(sym.CierreVideoobject, yychar, yyline, yytext());
          }
        case 113: break;
        case 61: 
          { return new Symbol(sym.AperturaImportant, yychar, yyline, yytext());
          }
        case 114: break;
        case 3: 
          { return new Symbol(sym.AperturaRow, yychar, yyline, yytext());
          }
        case 115: break;
        case 78: 
          { return new Symbol(sym.EncabezadoXML, yychar, yyline, yytext());
          }
        case 116: break;
        case 71: 
          { return new Symbol(sym.CierreImageobject, yychar, yyline, yytext());
          }
        case 117: break;
        case 58: 
          { return new Symbol(sym.CierreEmphasis, yychar, yyline, yytext());
          }
        case 118: break;
        case 30: 
          { return new Symbol(sym.CierreTbody, yychar, yyline, yytext());
          }
        case 119: break;
        case 51: 
          { return new Symbol(sym.CierreComment, yychar, yyline, yytext());
          }
        case 120: break;
        case 54: 
          { return new Symbol(sym.AperturaEmphasis, yychar, yyline, yytext());
          }
        case 121: break;
        case 14: 
          { return new Symbol(sym.AperturaPhone, yychar, yyline, yytext());
          }
        case 122: break;
        case 65: 
          { return new Symbol(sym.CierreImportant, yychar, yyline, yytext());
          }
        case 123: break;
        case 21: 
          { return new Symbol(sym.CierreYear, yychar, yyline, yytext());
          }
        case 124: break;
        case 22: 
          { return new Symbol(sym.AperturaEntry, yychar, yyline, yytext());
          }
        case 125: break;
        case 12: 
          { return new Symbol(sym.AperturaTitulo, yychar, yyline, yytext());
          }
        case 126: break;
        case 17: 
          { return new Symbol(sym.CierreLink, yychar, yyline, yytext());
          }
        case 127: break;
        case 80: 
          { return new Symbol(sym.Videodata, yychar, yyline, yytext());
          }
        case 128: break;
        case 52: 
          { return new Symbol(sym.AperturaListItem, yychar, yyline, yytext());
          }
        case 129: break;
        case 7: 
          { return new Symbol(sym.AperturaDate, yychar, yyline, yytext());
          }
        case 130: break;
        case 70: 
          { return new Symbol(sym.AperturaMediaObject, yychar, yyline, yytext());
          }
        case 131: break;
        case 63: 
          { return new Symbol(sym.AperturaSimpleSect, yychar, yyline, yytext());
          }
        case 132: break;
        case 47: 
          { return new Symbol(sym.CierreSection, yychar, yyline, yytext());
          }
        case 133: break;
        case 57: 
          { return new Symbol(sym.CierreEntrytbl, yychar, yyline, yytext());
          }
        case 134: break;
        case 56: 
          { return new Symbol(sym.CierreListItem, yychar, yyline, yytext());
          }
        case 135: break;
        case 8: 
          { return new Symbol(sym.AperturaCity, yychar, yyline, yytext());
          }
        case 136: break;
        case 53: 
          { return new Symbol(sym.AperturaEntrytbl, yychar, yyline, yytext());
          }
        case 137: break;
        case 34: 
          { return new Symbol(sym.CierreEmail, yychar, yyline, yytext());
          }
        case 138: break;
        case 13: 
          { return new Symbol(sym.AperturaTbody, yychar, yyline, yytext());
          }
        case 139: break;
        case 69: 
          { return new Symbol(sym.AperturaVideoobject, yychar, yyline, yytext());
          }
        case 140: break;
        case 39: 
          { return new Symbol(sym.CierreHolder, yychar, yyline, yytext());
          }
        case 141: break;
        case 6: 
          { return new Symbol(sym.AperturaInfo, yychar, yyline, yytext());
          }
        case 142: break;
        case 44: 
          { return new Symbol(sym.AperturaAddress, yychar, yyline, yytext());
          }
        case 143: break;
        case 43: 
          { return new Symbol(sym.AperturaArticulo, yychar, yyline, yytext());
          }
        case 144: break;
        case 77: 
          { return new Symbol(sym.CierreInformalTable, yychar, yyline, yytext());
          }
        case 145: break;
        case 5: 
          { return new Symbol(sym.CierreRow, yychar, yyline, yytext());
          }
        case 146: break;
        case 68: 
          { return new Symbol(sym.AperturaImageobject, yychar, yyline, yytext());
          }
        case 147: break;
        case 23: 
          { return new Symbol(sym.AperturaEmail, yychar, yyline, yytext());
          }
        case 148: break;
        case 74: 
          { return new Symbol(sym.AperturaItemizedList, yychar, yyline, yytext());
          }
        case 149: break;
        case 49: 
          { return new Symbol(sym.CierreArticulo, yychar, yyline, yytext());
          }
        case 150: break;
        case 36: 
          { return new Symbol(sym.AperturaSimPara, yychar, yyline, yytext());
          }
        case 151: break;
        case 19: 
          { return new Symbol(sym.CierreDate, yychar, yyline, yytext());
          }
        case 152: break;
        case 38: 
          { return new Symbol(sym.AperturaSurname, yychar, yyline, yytext());
          }
        case 153: break;
        case 4: 
          { return new Symbol(sym.AperturaPara, yychar, yyline, yytext());
          }
        case 154: break;
        case 62: 
          { return new Symbol(sym.AperturaCopyright, yychar, yyline, yytext());
          }
        case 155: break;
        case 75: 
          { return new Symbol(sym.CierreItemizedList, yychar, yyline, yytext());
          }
        case 156: break;
        case 24: 
          { return new Symbol(sym.AperturaHolder, yychar, yyline, yytext());
          }
        case 157: break;
        case 2: 
          { throw new Error("Lexer Error. Simbolo no reconocido");
          }
        case 158: break;
        case 20: 
          { return new Symbol(sym.CierreCity, yychar, yyline, yytext());
          }
        case 159: break;
        case 28: 
          { return new Symbol(sym.CierreTfoot, yychar, yyline, yytext());
          }
        case 160: break;
        case 27: 
          { return new Symbol(sym.CierreThead, yychar, yyline, yytext());
          }
        case 161: break;
        case 41: 
          { return new Symbol(sym.CierreStreet, yychar, yyline, yytext());
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
