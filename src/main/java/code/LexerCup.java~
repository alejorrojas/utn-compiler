/* The following code was generated by JFlex 1.4.3 on 6/7/23, 17:22 */

package code;
import java_cup.runtime.Symbol;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/7/23, 17:22 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/utn-parser/src/main/java/code/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    20, 26, 10,  3,  1,  1,  3,  0,  1,  1,  1,  1,  1,  3,  3,  9, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  8,  1, 13, 23, 11,  3, 
     1,  3,  3, 29, 27, 33,  3,  3,  3,  3,  3,  3,  3,  3,  3, 28, 
    32,  3,  3,  3, 30,  3,  3,  3,  3, 31,  3,  1,  1,  1,  0,  3, 
     0, 19, 37, 34, 16, 17, 12, 25,  4, 15, 38, 42, 21, 24, 35, 18, 
     6,  3, 22,  7,  5, 39, 14, 41, 43, 40, 36,  1,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  1, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\2\2\1\1\2\1\1\21\0"+
    "\1\1\56\0\2\1\102\0\1\1\100\0\1\3\6\0"+
    "\1\1\7\0\1\4\43\0\1\5\12\0\1\6\1\0"+
    "\1\7\13\0\1\10\2\0\1\11\1\1\1\0\1\12"+
    "\1\13\1\14\1\0\1\15\1\16\1\17\14\0\1\20"+
    "\13\0\1\21\1\0\1\22\10\0\1\23\1\0\1\24"+
    "\2\0\1\25\11\0\1\26\1\0\1\27\12\0\1\1"+
    "\1\30\1\31\1\32\5\0\1\33\1\34\1\35\1\0"+
    "\1\36\1\37\1\40\14\0\1\41\1\0\1\42\25\0"+
    "\1\43\6\0\1\1\1\44\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\17\0\1\53\16\0\1\54\1\55"+
    "\6\0\1\56\1\0\1\57\1\0\1\60\1\61\10\0"+
    "\1\62\1\63\4\0\1\64\10\0\1\65\1\66\1\67"+
    "\1\70\14\0\1\71\1\72\1\73\1\74\2\0\1\75"+
    "\3\0\1\76\6\0\1\77\1\100\1\0\1\101\2\0"+
    "\1\102\3\0\1\103\11\0\1\104\6\0\1\105\2\0"+
    "\1\106\2\0\1\107\1\0\1\110\1\0\1\111\1\0"+
    "\1\112\1\0\1\113\4\0\1\114\3\0\1\115\2\0"+
    "\1\116\12\0\1\117\1\120\36\0\1\121\2\0\1\122"+
    "\72\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\u0554"+
    "\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4"+
    "\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4"+
    "\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314"+
    "\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4"+
    "\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734"+
    "\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894"+
    "\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4"+
    "\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54"+
    "\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4"+
    "\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14"+
    "\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4"+
    "\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234"+
    "\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310\0\54\0\u233c\0\u2368"+
    "\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c\0\u24c8"+
    "\0\u24f4\0\u2520\0\u254c\0\u2578\0\54\0\u25a4\0\u25d0\0\u25fc"+
    "\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c"+
    "\0\u2788\0\u27b4\0\u27e0\0\u280c\0\u2838\0\u2864\0\u2890\0\u28bc"+
    "\0\u28e8\0\u2914\0\u2940\0\u296c\0\u2998\0\u29c4\0\u29f0\0\u2a1c"+
    "\0\u2a48\0\u2a74\0\u2aa0\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c"+
    "\0\54\0\u2ba8\0\u2bd4\0\u2c00\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0"+
    "\0\u2cdc\0\u2d08\0\u2d34\0\54\0\u2d60\0\54\0\u2d8c\0\u2db8"+
    "\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0\0\u2eec\0\u2f18"+
    "\0\u2f44\0\54\0\u2f70\0\u2f9c\0\54\0\u2fc8\0\u2ff4\0\54"+
    "\0\54\0\54\0\u3020\0\54\0\54\0\54\0\u304c\0\u3078"+
    "\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154\0\u3180\0\u31ac\0\u31d8"+
    "\0\u3204\0\u3230\0\54\0\u325c\0\u3288\0\u32b4\0\u32e0\0\u330c"+
    "\0\u3338\0\u3364\0\u3390\0\u33bc\0\u33e8\0\u3414\0\54\0\u3440"+
    "\0\54\0\u346c\0\u3498\0\u34c4\0\u34f0\0\u351c\0\u3548\0\u3574"+
    "\0\u35a0\0\54\0\u35cc\0\54\0\u35f8\0\u3624\0\54\0\u3650"+
    "\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784\0\u37b0"+
    "\0\54\0\u37dc\0\54\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8"+
    "\0\u38e4\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\54\0\54"+
    "\0\54\0\u39ec\0\u3a18\0\u3a44\0\u3a70\0\u3a9c\0\54\0\54"+
    "\0\54\0\u3ac8\0\54\0\54\0\54\0\u3af4\0\u3b20\0\u3b4c"+
    "\0\u3b78\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac"+
    "\0\u3cd8\0\54\0\u3d04\0\54\0\u3d30\0\u3d5c\0\u3d88\0\u3db4"+
    "\0\u3de0\0\u3e0c\0\u3e38\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14"+
    "\0\u3f40\0\u3f6c\0\u3f98\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074"+
    "\0\u40a0\0\54\0\u40cc\0\u40f8\0\u4124\0\u4150\0\u417c\0\u41a8"+
    "\0\u41d4\0\54\0\54\0\u4200\0\54\0\54\0\54\0\54"+
    "\0\54\0\u422c\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334"+
    "\0\u4360\0\u438c\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494"+
    "\0\54\0\u44c0\0\u44ec\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8"+
    "\0\u45f4\0\u4620\0\u464c\0\u4678\0\u46a4\0\u46d0\0\u46fc\0\54"+
    "\0\54\0\u4728\0\u4754\0\u4780\0\u47ac\0\u47d8\0\u4804\0\54"+
    "\0\u4830\0\54\0\u485c\0\54\0\54\0\u4888\0\u48b4\0\u48e0"+
    "\0\u490c\0\u4938\0\u4964\0\u4990\0\u49bc\0\54\0\54\0\u49e8"+
    "\0\u4a14\0\u4a40\0\u4a6c\0\54\0\u4a98\0\u4ac4\0\u4af0\0\u4b1c"+
    "\0\u4b48\0\u4b74\0\u4ba0\0\u4bcc\0\54\0\54\0\54\0\54"+
    "\0\u4bf8\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c"+
    "\0\u4d58\0\u4d84\0\u4db0\0\u4ddc\0\54\0\54\0\54\0\54"+
    "\0\u4e08\0\u4e34\0\54\0\u4e60\0\u4e8c\0\u4eb8\0\54\0\u4ee4"+
    "\0\u4f10\0\u4f3c\0\u4f68\0\u4f94\0\u4fc0\0\54\0\54\0\u4fec"+
    "\0\54\0\u5018\0\u5044\0\54\0\u5070\0\u509c\0\u50c8\0\54"+
    "\0\u50f4\0\u5120\0\u514c\0\u5178\0\u51a4\0\u51d0\0\u51fc\0\u5228"+
    "\0\u5254\0\54\0\u5280\0\u52ac\0\u52d8\0\u5304\0\u5330\0\u535c"+
    "\0\54\0\u5388\0\u53b4\0\54\0\u53e0\0\u540c\0\54\0\u5438"+
    "\0\54\0\u5464\0\54\0\u5490\0\54\0\u54bc\0\54\0\u54e8"+
    "\0\u5514\0\u5540\0\u556c\0\54\0\u5598\0\u55c4\0\u55f0\0\54"+
    "\0\u561c\0\u5648\0\54\0\u5674\0\u56a0\0\u56cc\0\u56f8\0\u5724"+
    "\0\u5750\0\u577c\0\u57a8\0\u57d4\0\u5800\0\54\0\54\0\u582c"+
    "\0\u5858\0\u5884\0\u58b0\0\u58dc\0\u5908\0\u5934\0\u5960\0\u598c"+
    "\0\u59b8\0\u59e4\0\u5a10\0\u5a3c\0\u5a68\0\u5a94\0\u5ac0\0\u5aec"+
    "\0\u5b18\0\u5b44\0\u5b70\0\u5b9c\0\u5bc8\0\u5bf4\0\u5c20\0\u5c4c"+
    "\0\u5c78\0\u5ca4\0\u5cd0\0\u5cfc\0\u5d28\0\54\0\u5d54\0\u5d80"+
    "\0\54\0\u5dac\0\u5dd8\0\u5e04\0\u5e30\0\u5e5c\0\u5e88\0\u5eb4"+
    "\0\u5ee0\0\u5f0c\0\u5f38\0\u5f64\0\u5f90\0\u5fbc\0\u5fe8\0\u6014"+
    "\0\u6040\0\u606c\0\u6098\0\u60c4\0\u60f0\0\u611c\0\u6148\0\u6174"+
    "\0\u61a0\0\u61cc\0\u61f8\0\u6224\0\u6250\0\u627c\0\u62a8\0\u62d4"+
    "\0\u6300\0\u632c\0\u6358\0\u6384\0\u63b0\0\u63dc\0\u6408\0\u6434"+
    "\0\u6460\0\u648c\0\u64b8\0\u64e4\0\u6510\0\u653c\0\u6568\0\u6594"+
    "\0\u65c0\0\u65ec\0\u6618\0\u6644\0\u6670\0\u669c\0\u66c8\0\u66f4"+
    "\0\u6720\0\u674c\0\u6778";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\6\3\1\2\1\6"+
    "\1\7\6\3\1\4\27\3\55\0\12\3\1\0\1\3"+
    "\1\0\36\3\1\0\1\3\1\4\10\3\1\0\1\3"+
    "\1\0\6\3\1\4\27\3\1\0\4\3\1\6\5\3"+
    "\1\0\1\3\1\0\36\3\1\0\4\3\1\10\5\3"+
    "\1\0\1\3\1\0\36\3\4\0\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\2\0\1\16\1\0\1\17\1\20"+
    "\1\21\1\22\1\0\1\23\1\0\1\24\1\25\1\0"+
    "\1\26\1\0\1\27\7\0\1\30\5\0\1\31\4\0"+
    "\5\3\1\32\4\3\1\0\1\3\1\0\36\3\22\0"+
    "\1\33\35\0\1\34\7\0\1\35\2\0\1\36\11\0"+
    "\1\37\13\0\1\40\12\0\1\41\16\0\1\42\35\0"+
    "\1\43\11\0\1\44\1\0\1\45\25\0\1\46\10\0"+
    "\1\47\1\50\1\51\1\52\4\0\1\53\1\0\1\54"+
    "\1\55\1\56\1\57\1\0\1\60\1\0\1\61\1\62"+
    "\1\0\1\63\11\0\1\64\5\0\1\65\22\0\1\66"+
    "\53\0\1\67\41\0\1\70\22\0\1\71\12\0\1\72"+
    "\33\0\1\73\60\0\1\74\12\0\1\75\30\0\1\76"+
    "\5\0\1\77\16\0\1\100\1\0\1\101\23\0\1\102"+
    "\56\0\1\103\52\0\1\104\65\0\1\105\37\0\1\106"+
    "\2\0\1\107\52\0\1\110\33\0\6\3\1\111\1\112"+
    "\2\3\1\0\1\3\1\0\36\3\25\0\1\113\47\0"+
    "\1\114\54\0\1\115\36\0\1\116\74\0\1\117\47\0"+
    "\1\120\53\0\1\121\57\0\1\122\50\0\1\123\2\0"+
    "\1\124\55\0\1\125\65\0\1\126\37\0\1\127\47\0"+
    "\1\130\35\0\1\131\7\0\1\132\2\0\1\133\11\0"+
    "\1\134\13\0\1\135\12\0\1\136\16\0\1\137\35\0"+
    "\1\140\11\0\1\141\1\0\1\142\25\0\1\143\23\0"+
    "\1\144\53\0\1\145\41\0\1\146\22\0\1\147\12\0"+
    "\1\150\33\0\1\151\60\0\1\152\12\0\1\153\30\0"+
    "\1\154\5\0\1\155\16\0\1\156\1\0\1\157\23\0"+
    "\1\160\56\0\1\161\52\0\1\162\51\0\1\163\2\0"+
    "\1\164\52\0\1\165\60\0\1\166\45\0\1\167\54\0"+
    "\1\170\40\0\1\171\14\0\1\172\44\0\1\173\44\0"+
    "\1\174\54\0\1\175\14\0\1\176\35\0\1\177\66\0"+
    "\1\200\40\0\1\201\55\0\1\202\51\0\1\203\55\0"+
    "\1\204\33\0\1\205\61\0\1\206\22\0\1\207\67\0"+
    "\1\210\24\0\1\211\54\0\1\212\21\0\1\213\46\0"+
    "\1\214\31\0\7\3\1\112\2\3\1\0\1\3\1\0"+
    "\36\3\1\0\10\3\1\215\1\3\1\0\1\3\1\0"+
    "\36\3\20\0\1\216\56\0\1\217\52\0\1\220\56\0"+
    "\1\221\50\0\1\222\51\0\1\223\76\0\1\224\33\0"+
    "\1\225\35\0\1\226\67\0\1\227\40\0\1\230\52\0"+
    "\1\231\111\0\1\232\35\0\1\233\47\0\1\234\54\0"+
    "\1\235\36\0\1\236\74\0\1\237\47\0\1\240\53\0"+
    "\1\241\57\0\1\242\50\0\1\243\2\0\1\244\55\0"+
    "\1\245\65\0\1\246\37\0\1\247\53\0\1\250\45\0"+
    "\1\251\54\0\1\252\40\0\1\253\14\0\1\254\44\0"+
    "\1\255\44\0\1\256\54\0\1\257\14\0\1\260\35\0"+
    "\1\261\66\0\1\262\40\0\1\263\55\0\1\264\51\0"+
    "\1\265\55\0\1\266\33\0\1\267\61\0\1\270\22\0"+
    "\1\271\40\0\1\272\54\0\1\273\21\0\1\274\46\0"+
    "\1\275\37\0\1\276\65\0\1\277\62\0\1\300\45\0"+
    "\1\301\62\0\1\302\44\0\1\303\52\0\1\304\36\0"+
    "\1\305\66\0\1\306\62\0\1\307\53\0\1\310\44\0"+
    "\1\311\41\0\1\312\52\0\1\313\54\0\1\314\120\0"+
    "\1\315\14\0\1\316\57\0\1\317\71\0\1\320\66\0"+
    "\1\321\53\0\1\322\33\0\1\323\51\0\1\324\26\0"+
    "\10\3\1\325\1\3\1\0\1\3\1\0\36\3\21\0"+
    "\1\326\52\0\1\327\40\0\1\330\67\0\1\331\101\0"+
    "\1\332\54\0\1\333\24\0\1\334\45\0\1\335\61\0"+
    "\1\336\53\0\1\337\55\0\1\340\1\0\1\341\45\0"+
    "\1\342\57\0\1\343\50\0\1\344\56\0\1\345\52\0"+
    "\1\346\56\0\1\347\50\0\1\350\51\0\1\351\76\0"+
    "\1\352\33\0\1\353\35\0\1\354\67\0\1\355\40\0"+
    "\1\356\52\0\1\357\111\0\1\360\17\0\1\361\65\0"+
    "\1\362\62\0\1\363\45\0\1\364\62\0\1\365\44\0"+
    "\1\366\52\0\1\367\36\0\1\370\66\0\1\371\62\0"+
    "\1\372\53\0\1\373\44\0\1\374\41\0\1\375\52\0"+
    "\1\376\54\0\1\377\120\0\1\u0100\14\0\1\u0101\57\0"+
    "\1\u0102\104\0\1\u0103\53\0\1\u0104\33\0\1\u0105\51\0"+
    "\1\u0106\32\0\1\u0107\70\0\1\u0108\50\0\1\u0109\62\0"+
    "\1\u010a\46\0\1\u010b\45\0\1\u010c\12\0\1\u010d\40\0"+
    "\1\u010e\63\0\1\u010f\55\0\1\u0110\76\0\1\u0111\24\0"+
    "\1\u0112\74\0\1\u0113\37\0\1\u0114\47\0\1\u0115\50\0"+
    "\1\u0116\60\0\1\u0117\52\0\1\u0118\66\0\1\u0119\30\0"+
    "\1\u011a\66\0\1\u011b\46\0\1\u011c\45\0\1\u011d\41\0"+
    "\2\3\7\u011e\1\3\1\0\1\u011e\1\0\6\u011e\1\3"+
    "\5\u011e\1\3\21\u011e\26\0\1\u011f\40\0\1\u0120\53\0"+
    "\1\u0121\53\0\1\u0122\46\0\1\u0123\60\0\1\u0124\53\0"+
    "\1\u0125\53\0\1\u0126\45\0\1\u0127\74\0\1\u0128\46\0"+
    "\1\u0129\54\0\1\u012a\61\0\1\u012b\44\0\1\u012c\52\0"+
    "\1\u012d\40\0\1\u012e\67\0\1\u012f\101\0\1\u0130\54\0"+
    "\1\u0131\24\0\1\u0132\45\0\1\u0133\61\0\1\u0134\53\0"+
    "\1\u0135\55\0\1\u0136\1\0\1\u0137\45\0\1\u0138\57\0"+
    "\1\u0139\35\0\1\u013a\70\0\1\u013b\50\0\1\u013c\62\0"+
    "\1\u013d\46\0\1\u013e\45\0\1\u013f\12\0\1\u0140\40\0"+
    "\1\u0141\63\0\1\u0142\55\0\1\u0143\76\0\1\u0144\24\0"+
    "\1\u0145\74\0\1\u0146\37\0\1\u0147\47\0\1\u0148\50\0"+
    "\1\u0149\47\0\1\u014a\63\0\1\u014b\43\0\1\u014c\66\0"+
    "\1\u014d\46\0\1\u014e\45\0\1\u014f\103\0\1\u0150\30\0"+
    "\1\u0151\1\0\1\u0152\75\0\1\u0153\14\0\1\u0154\66\0"+
    "\1\u0155\1\0\1\u0156\61\0\1\u0157\32\0\1\u0158\57\0"+
    "\1\u0159\45\0\1\u015a\5\0\1\u015b\47\0\1\u015c\71\0"+
    "\1\u015d\51\0\1\u015e\56\0\1\u015f\32\0\1\u0160\121\0"+
    "\1\u0161\22\0\1\u0162\70\0\1\u0163\33\0\1\u0164\77\0"+
    "\1\u0165\11\0\2\3\7\u011e\1\u0166\1\0\1\u011e\1\0"+
    "\6\u011e\1\3\5\u011e\1\3\21\u011e\13\0\1\u0167\53\0"+
    "\1\u0168\53\0\1\u0169\63\0\1\u016a\37\0\1\u016b\107\0"+
    "\1\u016c\31\0\1\u016d\60\0\1\u016e\40\0\1\u016f\53\0"+
    "\1\u0170\53\0\1\u0171\46\0\1\u0172\60\0\1\u0173\53\0"+
    "\1\u0174\53\0\1\u0175\45\0\1\u0176\74\0\1\u0177\46\0"+
    "\1\u0178\54\0\1\u0179\61\0\1\u017a\66\0\1\u017b\32\0"+
    "\1\u017c\75\0\1\u017d\14\0\1\u017e\70\0\1\u017f\61\0"+
    "\1\u0180\32\0\1\u0181\57\0\1\u0182\45\0\1\u0183\5\0"+
    "\1\u0184\47\0\1\u0185\71\0\1\u0186\51\0\1\u0187\56\0"+
    "\1\u0188\32\0\1\u0189\70\0\1\u018a\50\0\1\u018b\77\0"+
    "\1\u018c\33\0\1\u018d\53\0\1\u018e\75\0\1\u018f\27\0"+
    "\1\u0190\55\0\1\u0191\53\0\1\u0192\75\0\1\u0193\31\0"+
    "\1\u0194\47\0\1\u0195\101\0\1\u0196\15\0\1\u0197\65\0"+
    "\1\u0198\74\0\1\u0199\24\0\1\u019a\61\0\1\u019b\57\0"+
    "\1\u019c\73\0\1\u019d\46\0\1\u019e\44\0\1\u019f\27\0"+
    "\1\u01a0\47\0\1\3\1\u01a1\7\3\1\u0166\1\u01a2\1\3"+
    "\1\0\6\3\1\u01a1\27\3\13\0\1\u01a3\61\0\1\u01a4"+
    "\45\0\1\u01a5\53\0\1\u01a6\53\0\1\u01a7\53\0\1\u01a8"+
    "\53\0\1\u01a9\63\0\1\u01aa\37\0\1\u01ab\107\0\1\u01ac"+
    "\31\0\1\u01ad\55\0\1\u01ae\75\0\1\u01af\27\0\1\u01b0"+
    "\55\0\1\u01b1\75\0\1\u01b2\31\0\1\u01b3\47\0\1\u01b4"+
    "\101\0\1\u01b5\15\0\1\u01b6\65\0\1\u01b7\74\0\1\u01b8"+
    "\24\0\1\u01b9\61\0\1\u01ba\77\0\1\u01bb\37\0\1\u01bc"+
    "\27\0\1\u01bd\76\0\1\u01be\30\0\1\u01bf\114\0\1\u01c0"+
    "\25\0\1\u01c1\76\0\1\u01c2\15\0\1\u01c3\114\0\1\u01c4"+
    "\32\0\1\u01c5\35\0\1\u01c6\71\0\1\u01c7\41\0\1\u01c8"+
    "\53\0\1\u01c9\45\0\1\u01ca\76\0\1\u01cb\42\0\1\u01cc"+
    "\102\0\1\u01cd\46\0\1\u01ce\16\0\1\u01cf\62\0\1\u01d0"+
    "\41\0\1\3\1\u01a1\10\3\1\u01a2\1\3\1\0\6\3"+
    "\1\u01a1\27\3\42\0\1\u01d1\24\0\1\u01d2\61\0\1\u01d3"+
    "\45\0\1\u01d4\53\0\1\u01d5\70\0\1\u01d6\71\0\1\u01d7"+
    "\25\0\1\u01d8\76\0\1\u01d9\56\0\1\u01da\32\0\1\u01db"+
    "\35\0\1\u01dc\71\0\1\u01dd\41\0\1\u01de\53\0\1\u01df"+
    "\45\0\1\u01e0\76\0\1\u01e1\71\0\1\u01e2\11\0\1\u01e3"+
    "\62\0\1\u01e4\61\0\1\u01e5\55\0\1\u01e6\51\0\1\u01e7"+
    "\57\0\1\u01e8\33\0\1\u01e9\71\0\1\u01ea\51\0\1\u01eb"+
    "\37\0\1\u01ec\61\0\1\u01ed\53\0\1\u01ee\53\0\1\u01ef"+
    "\53\0\1\u01f0\103\0\1\u01f1\31\0\1\u01f2\56\0\1\u01f3"+
    "\34\0\1\u01f4\53\0\1\u01f5\110\0\1\u01f6\32\0\1\u01f7"+
    "\53\0\1\u01f8\57\0\1\u01f9\33\0\1\u01fa\67\0\1\u01fb"+
    "\37\0\1\u01fc\61\0\1\u01fd\53\0\1\u01fe\53\0\1\u01ff"+
    "\53\0\1\u0200\61\0\1\u0201\37\0\1\u0202\61\0\1\u0203"+
    "\64\0\1\u0204\71\0\1\u0205\30\0\1\u0206\47\0\1\u0207"+
    "\64\0\1\u0208\71\0\1\u0209\34\0\1\u020a\102\0\1\u020b"+
    "\43\0\1\u020c\34\0\1\u020d\43\0\1\u020e\53\0\1\u020f"+
    "\45\0\1\u0210\61\0\1\u0211\102\0\1\u0212\30\0\1\u0213"+
    "\47\0\1\u0214\102\0\1\u0215\34\0\1\u0216\72\0\1\u0217"+
    "\24\0\1\u0218\54\0\1\u0219\44\0\1\u021a\55\0\1\u021b"+
    "\60\0\1\u021c\44\0\1\u021d\113\0\1\u021e\16\0\1\u021f"+
    "\50\0\1\u0220\74\0\1\u0221\40\0\1\u0222\45\0\1\u0223"+
    "\55\0\1\u0224\51\0\1\u0225\113\0\1\u0226\13\0\1\u0227"+
    "\65\0\1\u0228\47\0\1\u0229\45\0\1\u022a\65\0\1\u022b"+
    "\47\0\1\u022c\65\0\1\u022d\32\0\1\u022e\62\0\1\u022f"+
    "\45\0\1\u0230\61\0\1\u0231\45\0\1\u0232\61\0\1\u0233"+
    "\65\0\1\u0234\41\0\1\u0235\65\0\1\u0236\41\0\1\u0237"+
    "\65\0\1\u0238\47\0\1\u0239\60\0\1\u023a\44\0\1\u023b"+
    "\47\0\1\u023c\61\0\1\u023d\53\0\1\u023e\53\0\1\u023f"+
    "\45\0\1\u0240\61\0\1\u0241\74\0\1\u0242\24\0\1\u0243"+
    "\66\0\1\u0244\53\0\1\u0245\41\0\1\u0246\64\0\1\u0247"+
    "\47\0\1\u0248\53\0\1\u0249\42\0\1\u024a\64\0\1\u024b"+
    "\46\0\1\u024c\53\0\1\u024d\51\0\1\u024e\54\0\1\u024f"+
    "\50\0\1\u0250\16\0\1\u0251\34\0\1\u0252\16\0\1\u0253"+
    "\36\0\1\u0254\53\0\1\u0255\53\0\1\u0256\53\0\1\u0257"+
    "\44\0\7\u0258\2\0\1\u0258\1\u0259\6\u0258\1\0\5\u0258"+
    "\1\0\21\u0258\3\0\7\u025a\2\0\1\u025a\1\u025b\6\u025a"+
    "\1\0\5\u025a\1\0\21\u025a\3\0\7\u025c\2\0\1\u025c"+
    "\1\u025d\6\u025c\1\0\5\u025c\1\0\21\u025c\3\0\7\u025e"+
    "\2\0\1\u025e\1\u025f\6\u025e\1\0\5\u025e\1\0\21\u025e"+
    "\3\0\7\u0258\1\u0260\1\0\1\u0258\1\0\6\u0258\1\0"+
    "\5\u0258\1\0\21\u0258\16\0\1\u0261\40\0\7\u025a\1\u0262"+
    "\1\0\1\u025a\1\0\6\u025a\1\0\5\u025a\1\0\21\u025a"+
    "\16\0\1\u0263\40\0\7\u025c\1\u0264\1\0\1\u025c\1\0"+
    "\6\u025c\1\0\5\u025c\1\0\21\u025c\17\0\1\u0265\37\0"+
    "\7\u025e\1\u0266\1\0\1\u025e\1\0\6\u025e\1\0\5\u025e"+
    "\1\0\21\u025e\17\0\1\u0267\45\0\1\u0268\61\0\1\u0269"+
    "\60\0\1\u0260\46\0\1\u026a\45\0\1\u026b\72\0\1\u026c"+
    "\47\0\1\u0264\57\0\1\u026d\36\0\1\u026e\60\0\1\u026f"+
    "\53\0\1\u0270\46\0\1\u0271\63\0\1\u0272\53\0\1\u0273"+
    "\51\0\1\u0274\53\0\1\u0275\63\0\1\u0276\53\0\1\u0277"+
    "\44\0\1\u0278\53\0\1\u0279\52\0\1\u027a\53\0\1\u027b"+
    "\52\0\1\u027c\53\0\1\u027d\53\0\1\u027e\53\0\1\u027f"+
    "\56\0\1\u0280\53\0\1\u0281\53\0\1\u0282\53\0\1\u0283"+
    "\35\0\1\u0284\53\0\1\u0285\53\0\1\u0286\53\0\1\u0287"+
    "\71\0\1\u0288\53\0\1\u0289\53\0\1\u028a\53\0\1\u028b"+
    "\54\0\1\u028c\53\0\1\u028d\53\0\1\u028e\53\0\1\u028f"+
    "\43\0\1\u0290\53\0\1\u0291\53\0\1\u0292\53\0\1\u0293"+
    "\56\0\1\u0294\53\0\1\u0295\53\0\1\u0296\53\0\1\u0297"+
    "\61\0\1\u0298\53\0\1\u0299\53\0\1\u029a\53\0\1\u029b"+
    "\47\0\1\u029c\53\0\1\u029d\53\0\1\u029e\53\0\1\u029f"+
    "\60\0\1\u02a0\53\0\1\u02a1\53\0\1\u02a2\53\0\1\u02a3"+
    "\46\0\1\u02a4\53\0\1\u02a5\53\0\1\u02a6\53\0\1\u02a7"+
    "\46\0\1\u02a8\53\0\1\u02a9\53\0\1\u02aa\53\0\1\u02ab"+
    "\47\0\1\u0250\72\0\1\u0251\34\0\1\u0252\72\0\1\u0253"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26532];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\21\0\1\1\56\0\2\1\102\0"+
    "\1\1\100\0\1\11\6\0\1\1\7\0\1\11\43\0"+
    "\1\11\12\0\1\11\1\0\1\11\13\0\1\11\2\0"+
    "\1\11\1\1\1\0\3\11\1\0\3\11\14\0\1\11"+
    "\13\0\1\11\1\0\1\11\10\0\1\11\1\0\1\11"+
    "\2\0\1\11\11\0\1\11\1\0\1\11\12\0\1\1"+
    "\3\11\5\0\3\11\1\0\3\11\14\0\1\11\1\0"+
    "\1\11\25\0\1\11\6\0\1\1\2\11\1\0\5\11"+
    "\17\0\1\11\16\0\2\11\6\0\1\11\1\0\1\11"+
    "\1\0\2\11\10\0\2\11\4\0\1\11\10\0\4\11"+
    "\14\0\4\11\2\0\1\11\3\0\1\11\6\0\2\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\11\0\1\11"+
    "\6\0\1\11\2\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\4\0\1\11"+
    "\3\0\1\11\2\0\1\11\12\0\2\11\36\0\1\11"+
    "\2\0\1\11\72\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    BufferedWriter writer;  
    Boolean isSection = false;
    Boolean isInfo = false;

    /**
    * Inicializa el Writter para escribir sobre el HTML
    */
    public void InitFileWritter() throws IOException{
        this.writer = new BufferedWriter(new FileWriter("index.html"));
        this.Write("<html>\n"
            +"<head><title>UTN Parser</title></head>\n"
            +"<body>\n");
       
    }
    
    /**
    * Invoca al writter y nos permite escribir sobre el HTML
    * @param token String a escribir sobre el archivo de salida
    */
    public void Write(String token) throws IOException{
        this.writer.write(token);
    }

    /**
    * Cierra el archivo y agrega etiquetas de cierre HTML
    */
    public void CloseFileWritter() throws IOException{
        this.Write("</body>\n" + "</html>\n");
        this.writer.close();
    }

    /**
    * Crea y devuelve un nuevo simbolo para luego ser utilizado en parser
    */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
      try {
          this.InitFileWritter();
      } catch (IOException ex) {
          Logger.getLogger(LexerCup.class.getName()).log(Level.SEVERE, null, ex);
  }
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
      this.CloseFileWritter();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { this.isInfo = true;
    this.Write("<div style='background-color: green; color: white; font-size: 8px;'>"+"\n");
    return new Symbol(sym.AperturaInfo, yychar, yyline, yytext());
          }
        case 83: break;
        case 46: 
          { return new Symbol(sym.AperturaComment, yychar, yyline, yytext());
          }
        case 84: break;
        case 64: 
          { this.isSection = true;
    return new Symbol(sym.AperturaSimpleSect, yychar, yyline, yytext());
          }
        case 85: break;
        case 39: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaSurname, yychar, yyline, yytext());
          }
        case 86: break;
        case 41: 
          { this.Write("</table>"+"\n");
    return new Symbol(sym.CierreTgroup, yychar, yyline, yytext());
          }
        case 87: break;
        case 20: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreCity, yychar, yyline, yytext());
          }
        case 88: break;
        case 77: 
          { return new Symbol(sym.AperturaInformalTable, yychar, yyline, yytext());
          }
        case 89: break;
        case 18: 
          { if(this.isInfo == true){
        this.Write("<p>"+"\n");
    }
    return new Symbol(sym.CierreDate, yychar, yyline, yytext());
          }
        case 90: break;
        case 59: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAbstract, yychar, yyline, yytext());
          }
        case 91: break;
        case 68: 
          { this.isSection = false;
    return new Symbol(sym.CierreSimpleSect, yychar, yyline, yytext());
          }
        case 92: break;
        case 26: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaStreet, yychar, yyline, yytext());
          }
        case 93: break;
        case 54: 
          { this.Write("<td>");
    return new Symbol(sym.AperturaEntrytbl, yychar, yyline, yytext());
          }
        case 94: break;
        case 57: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreEmphasis, yychar, yyline, yytext());
          }
        case 95: break;
        case 34: 
          { this.Write("</td>");
    return new Symbol(sym.CierreEntry, yychar, yyline, yytext());
          }
        case 96: break;
        case 2: 
          { /*IGNORE*/
          }
        case 97: break;
        case 12: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }else if(this.isSection == true){
        this.Write("<h2>");
    }else{
        this.Write("<h1>");
    }
    return new Symbol(sym.AperturaTitulo, yychar, yyline, yytext());
          }
        case 98: break;
        case 56: 
          { this.Write("<li>");
    return new Symbol(sym.AperturaListItem, yychar, yyline, yytext());
          }
        case 99: break;
        case 40: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreHolder, yychar, yyline, yytext());
          }
        case 100: break;
        case 11: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaTfoot, yychar, yyline, yytext());
          }
        case 101: break;
        case 66: 
          { this.Write("</div>"+"\n");
    return new Symbol(sym.CierreImportant, yychar, yyline, yytext());
          }
        case 102: break;
        case 10: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaThead, yychar, yyline, yytext());
          }
        case 103: break;
        case 82: 
          { return new Symbol(sym.Imagedata, yychar, yyline, yytext());
          }
        case 104: break;
        case 22: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaEmail, yychar, yyline, yytext());
          }
        case 105: break;
        case 7: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaDate, yychar, yyline, yytext());
          }
        case 106: break;
        case 63: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaCopyright, yychar, yyline, yytext());
          }
        case 107: break;
        case 75: 
          { this.Write("<ul>"+"\n");
    return new Symbol(sym.AperturaItemizedList, yychar, yyline, yytext());
          }
        case 108: break;
        case 47: 
          { this.Write("</p>"+"\n");
    return new Symbol(sym.CierreSimPara, yychar, yyline, yytext());
          }
        case 109: break;
        case 62: 
          { this.Write("<div style='background-color: red; color: white;'>");
    return new Symbol(sym.AperturaImportant, yychar, yyline, yytext());
          }
        case 110: break;
        case 21: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreYear, yychar, yyline, yytext());
          }
        case 111: break;
        case 76: 
          { this.Write("</ul>"+"\n");
    return new Symbol(sym.CierreItemizedList, yychar, yyline, yytext());
          }
        case 112: break;
        case 8: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaCity, yychar, yyline, yytext());
          }
        case 113: break;
        case 28: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreTfoot, yychar, yyline, yytext());
          }
        case 114: break;
        case 72: 
          { return new Symbol(sym.CierreVideoobject, yychar, yyline, yytext());
          }
        case 115: break;
        case 74: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreMediaObject, yychar, yyline, yytext());
          }
        case 116: break;
        case 3: 
          { this.Write("<tr>");
    return new Symbol(sym.AperturaRow, yychar, yyline, yytext());
          }
        case 117: break;
        case 25: 
          { this.Write("<table>"+"\n");
    return new Symbol(sym.AperturaTgroup, yychar, yyline, yytext());
          }
        case 118: break;
        case 80: 
          { return new Symbol(sym.EncabezadoXML, yychar, yyline, yytext());
          }
        case 119: break;
        case 73: 
          { return new Symbol(sym.CierreImageobject, yychar, yyline, yytext());
          }
        case 120: break;
        case 27: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreThead, yychar, yyline, yytext());
          }
        case 121: break;
        case 52: 
          { return new Symbol(sym.CierreComment, yychar, yyline, yytext());
          }
        case 122: break;
        case 42: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreStreet, yychar, yyline, yytext());
          }
        case 123: break;
        case 43: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAuthor, yychar, yyline, yytext());
          }
        case 124: break;
        case 79: 
          { System.out.print(yytext());
    this.Write("<a href=\"");
    return new Symbol(sym.AperturaLink, yychar, yyline, yytext());
          }
        case 125: break;
        case 61: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaFirstName, yychar, yyline, yytext());
          }
        case 126: break;
        case 50: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAddress, yychar, yyline, yytext());
          }
        case 127: break;
        case 38: 
          { this.isSection = true;
    return new Symbol(sym.AperturaSection, yychar, yyline, yytext());
          }
        case 128: break;
        case 67: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreCopyright, yychar, yyline, yytext());
          }
        case 129: break;
        case 81: 
          { return new Symbol(sym.Videodata, yychar, yyline, yytext());
          }
        case 130: break;
        case 33: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreEmail, yychar, yyline, yytext());
          }
        case 131: break;
        case 17: 
          { this.isInfo = false;
    this.Write("</div>"+"\n");
    return new Symbol(sym.CierreInfo, yychar, yyline, yytext());
          }
        case 132: break;
        case 55: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAbstract, yychar, yyline, yytext());
          }
        case 133: break;
        case 36: 
          { this.Write(yytext());
        return new Symbol(sym.Url, yychar, yyline, yytext());
          }
        case 134: break;
        case 13: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaTbody, yychar, yyline, yytext());
          }
        case 135: break;
        case 4: 
          { this.Write("<p>");
    return new Symbol(sym.AperturaPara, yychar, yyline, yytext());
          }
        case 136: break;
        case 53: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaEmphasis, yychar, yyline, yytext());
          }
        case 137: break;
        case 15: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaState, yychar, yyline, yytext());
          }
        case 138: break;
        case 24: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaHolder, yychar, yyline, yytext());
          }
        case 139: break;
        case 69: 
          { return new Symbol(sym.AperturaVideoobject, yychar, yyline, yytext());
          }
        case 140: break;
        case 14: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaPhone, yychar, yyline, yytext());
          }
        case 141: break;
        case 16: 
          { this.Write("</p>"+"\n");
    return new Symbol(sym.CierrePara, yychar, yyline, yytext());
          }
        case 142: break;
        case 23: 
          { this.Write("<td>");
    return new Symbol(sym.AperturaEntry, yychar, yyline, yytext());
          }
        case 143: break;
        case 49: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreSurname, yychar, yyline, yytext());
          }
        case 144: break;
        case 45: 
          { return new Symbol(sym.AperturaArticulo, yychar, yyline, yytext());
          }
        case 145: break;
        case 29: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }else if(this.isSection == true){
        this.Write("</h2>"+"\n");
    }else{
        this.Write("</h1>"+"\n");
    }
    return new Symbol(sym.CierreTitulo, yychar, yyline, yytext());
          }
        case 146: break;
        case 65: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreFirstName, yychar, yyline, yytext());
          }
        case 147: break;
        case 78: 
          { return new Symbol(sym.CierreInformalTable, yychar, yyline, yytext());
          }
        case 148: break;
        case 19: 
          { this.Write("</a>"+"\n");
    return new Symbol(sym.CierreLink, yychar, yyline, yytext());
          }
        case 149: break;
        case 30: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreTbody, yychar, yyline, yytext());
          }
        case 150: break;
        case 9: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaYear, yychar, yyline, yytext());
          }
        case 151: break;
        case 5: 
          { this.Write("</tr>"+"\n");
    return new Symbol(sym.CierreRow, yychar, yyline, yytext());
          }
        case 152: break;
        case 71: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaMediaObject, yychar, yyline, yytext());
          }
        case 153: break;
        case 70: 
          { return new Symbol(sym.AperturaImageobject, yychar, yyline, yytext());
          }
        case 154: break;
        case 60: 
          { this.Write("</li>"+"\n");
    return new Symbol(sym.CierreListItem, yychar, yyline, yytext());
          }
        case 155: break;
        case 58: 
          { this.Write("</td>");
    return new Symbol(sym.CierreEntrytbl, yychar, yyline, yytext());
          }
        case 156: break;
        case 51: 
          { return new Symbol(sym.CierreArticulo, yychar, yyline, yytext());
          }
        case 157: break;
        case 48: 
          { this.isSection = false;
    return new Symbol(sym.CierreSection, yychar, yyline, yytext());
          }
        case 158: break;
        case 44: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAddress, yychar, yyline, yytext());
          }
        case 159: break;
        case 37: 
          { this.Write("<p>");
    return new Symbol(sym.AperturaSimPara, yychar, yyline, yytext());
          }
        case 160: break;
        case 31: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierrePhone, yychar, yyline, yytext());
          }
        case 161: break;
        case 35: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAuthor, yychar, yyline, yytext());
          }
        case 162: break;
        case 32: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreState, yychar, yyline, yytext());
          }
        case 163: break;
        case 1: 
          { this.Write(yytext());
    return new Symbol(sym.Texto, yychar, yyline, yytext());
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
