/* The following code was generated by JFlex 1.4.3 on 4/7/23, 12:22 */

package code;
import java_cup.runtime.Symbol;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/7/23, 12:22 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/utn-parser/src/main/java/code/lexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,  0,  0,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    21, 28,  6,  5,  3,  3,  5,  0,  3,  3,  3,  3,  1,  5,  5, 12, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 11,  3, 14, 24, 25,  5, 
     3,  4,  4, 31, 29, 35,  4,  4,  4,  4,  4,  4,  4,  4,  4, 30, 
    34,  4,  4,  4, 32,  4,  4,  4,  4, 33,  4,  3,  3,  3,  0,  4, 
     0, 20, 39, 36, 17, 18, 13, 27,  7, 16, 40, 44, 22, 26, 37, 19, 
     9,  4, 23, 10,  8, 41, 15, 43, 45, 42, 38,  3,  3,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  3, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  1,  0,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0, 
     0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\1\1\2\1\1\1\2\2\1\21\0"+
    "\1\1\56\0\1\1\102\0\2\1\100\0\1\3\6\0"+
    "\1\1\7\0\1\4\43\0\1\5\13\0\1\6\1\7"+
    "\13\0\1\10\2\0\1\11\1\1\1\0\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\14\0\1\20\14\0"+
    "\1\21\1\22\10\0\1\23\1\0\1\24\2\0\1\25"+
    "\11\0\1\26\1\0\1\27\12\0\1\1\1\30\1\31"+
    "\1\32\5\0\1\33\1\34\1\35\1\0\1\36\1\37"+
    "\1\40\14\0\1\41\1\0\1\42\25\0\1\43\6\0"+
    "\1\1\1\44\1\0\1\45\1\46\1\47\1\50\1\51"+
    "\17\0\1\52\16\0\1\53\1\54\6\0\1\55\2\1"+
    "\1\56\1\0\1\57\1\0\1\60\1\61\10\0\1\62"+
    "\1\63\4\0\1\64\10\0\1\65\1\66\1\67\1\70"+
    "\14\0\1\71\1\72\1\73\1\74\2\0\1\75\3\0"+
    "\1\76\6\0\1\77\1\100\1\0\1\101\2\0\1\102"+
    "\3\0\1\103\11\0\1\104\6\0\1\105\2\0\1\106"+
    "\2\0\1\107\1\0\1\110\1\0\1\111\1\0\1\112"+
    "\1\0\1\113\4\0\1\114\3\0\1\115\2\0\1\116"+
    "\6\0\1\117\3\0\1\120\60\0\1\121\4\0\1\122"+
    "\166\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422"+
    "\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592"+
    "\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52"+
    "\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2"+
    "\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282"+
    "\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562"+
    "\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842"+
    "\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2"+
    "\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92"+
    "\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4\0\u1e02"+
    "\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\u1f44\0\u1f72"+
    "\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4\0\u20e2"+
    "\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252"+
    "\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2"+
    "\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\56\0\u24d6\0\u2504"+
    "\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674"+
    "\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\56\0\u275a\0\u2788\0\u27b6"+
    "\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76"+
    "\0\56\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8"+
    "\0\u2ee6\0\u2f14\0\u2f42\0\u2f70\0\56\0\56\0\u2f9e\0\u2fcc"+
    "\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c"+
    "\0\u316a\0\56\0\u3198\0\u31c6\0\56\0\u31f4\0\u3222\0\56"+
    "\0\56\0\56\0\u3250\0\56\0\56\0\56\0\u327e\0\u32ac"+
    "\0\u32da\0\u3308\0\u3336\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c"+
    "\0\u344a\0\u3478\0\56\0\u34a6\0\u34d4\0\u3502\0\u3530\0\u355e"+
    "\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644\0\u3672\0\u36a0\0\56"+
    "\0\56\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786\0\u37b4\0\u37e2"+
    "\0\u3810\0\56\0\u383e\0\56\0\u386c\0\u389a\0\56\0\u38c8"+
    "\0\u38f6\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38"+
    "\0\56\0\u3a66\0\56\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c"+
    "\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04\0\u3c32\0\u3c60\0\56\0\56"+
    "\0\56\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46\0\56\0\56"+
    "\0\56\0\u3d74\0\56\0\56\0\56\0\u3da2\0\u3dd0\0\u3dfe"+
    "\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e"+
    "\0\u3f9c\0\56\0\u3fca\0\56\0\u3ff8\0\u4026\0\u4054\0\u4082"+
    "\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196\0\u41c4\0\u41f2"+
    "\0\u4220\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306\0\u4334\0\u4362"+
    "\0\u4390\0\56\0\u43be\0\u43ec\0\u441a\0\u4448\0\u4476\0\u44a4"+
    "\0\u44d2\0\56\0\u4500\0\56\0\56\0\56\0\56\0\56"+
    "\0\u452e\0\u455c\0\u458a\0\u45b8\0\u45e6\0\u4614\0\u4642\0\u4670"+
    "\0\u469e\0\u46cc\0\u46fa\0\u4728\0\u4756\0\u4784\0\u47b2\0\56"+
    "\0\u47e0\0\u480e\0\u483c\0\u486a\0\u4898\0\u48c6\0\u48f4\0\u4922"+
    "\0\u4950\0\u497e\0\u49ac\0\u49da\0\u4a08\0\u4a36\0\56\0\56"+
    "\0\u4a64\0\u4a92\0\u4ac0\0\u4aee\0\u4b1c\0\u4b4a\0\56\0\u4b78"+
    "\0\u4ba6\0\56\0\u4bd4\0\56\0\u4c02\0\56\0\56\0\u4c30"+
    "\0\u4c5e\0\u4c8c\0\u4cba\0\u4ce8\0\u4d16\0\u4d44\0\u4d72\0\56"+
    "\0\56\0\u4da0\0\u4dce\0\u4dfc\0\u4e2a\0\56\0\u4e58\0\u4e86"+
    "\0\u4eb4\0\u4ee2\0\u4f10\0\u4f3e\0\u4f6c\0\u4f9a\0\56\0\56"+
    "\0\56\0\56\0\u4fc8\0\u4ff6\0\u5024\0\u5052\0\u5080\0\u50ae"+
    "\0\u50dc\0\u510a\0\u5138\0\u5166\0\u5194\0\u51c2\0\56\0\56"+
    "\0\56\0\56\0\u51f0\0\u521e\0\56\0\u524c\0\u527a\0\u52a8"+
    "\0\56\0\u52d6\0\u5304\0\u5332\0\u5360\0\u538e\0\u53bc\0\56"+
    "\0\56\0\u53ea\0\56\0\u5418\0\u5446\0\56\0\u5474\0\u54a2"+
    "\0\u54d0\0\56\0\u54fe\0\u552c\0\u555a\0\u5588\0\u55b6\0\u55e4"+
    "\0\u5612\0\u5640\0\u566e\0\56\0\u569c\0\u56ca\0\u56f8\0\u5726"+
    "\0\u5754\0\u5782\0\56\0\u57b0\0\u57de\0\56\0\u580c\0\u583a"+
    "\0\56\0\u5868\0\56\0\u5896\0\56\0\u58c4\0\56\0\u58f2"+
    "\0\56\0\u5920\0\u594e\0\u597c\0\u59aa\0\56\0\u59d8\0\u5a06"+
    "\0\u5a34\0\56\0\u5a62\0\u5a90\0\56\0\u5abe\0\u5aec\0\u5b1a"+
    "\0\u5b48\0\u5b76\0\u5ba4\0\56\0\u5bd2\0\u5c00\0\u5c2e\0\56"+
    "\0\u5c5c\0\u5c8a\0\u5cb8\0\u5ce6\0\u5d14\0\u5d42\0\u5d70\0\u5d9e"+
    "\0\u5dcc\0\u5dfa\0\u5e28\0\u5e56\0\u5e84\0\u5eb2\0\u5ee0\0\u5f0e"+
    "\0\u5f3c\0\u5f6a\0\u5f98\0\u5fc6\0\u5ff4\0\u6022\0\u6050\0\u607e"+
    "\0\u60ac\0\u60da\0\u6108\0\u6136\0\u6164\0\u6192\0\u61c0\0\u61ee"+
    "\0\u621c\0\u624a\0\u6278\0\u62a6\0\u62d4\0\u6302\0\u6330\0\u635e"+
    "\0\u638c\0\u63ba\0\u63e8\0\u6416\0\u6444\0\u6472\0\u64a0\0\u64ce"+
    "\0\56\0\u64fc\0\u652a\0\u6558\0\u6586\0\56\0\u65b4\0\u65e2"+
    "\0\u6610\0\u663e\0\u666c\0\u669a\0\u66c8\0\u66f6\0\u6724\0\u6752"+
    "\0\u6780\0\u67ae\0\u67dc\0\u680a\0\u6838\0\u6866\0\u6894\0\u68c2"+
    "\0\u68f0\0\u691e\0\u694c\0\u697a\0\u69a8\0\u69d6\0\u6a04\0\u6a32"+
    "\0\u6a60\0\u6a8e\0\u6abc\0\u6aea\0\u6b18\0\u6b46\0\u6b74\0\u6ba2"+
    "\0\u6bd0\0\u6bfe\0\u6c2c\0\u6c5a\0\u6c88\0\u6cb6\0\u6ce4\0\u6d12"+
    "\0\u6d40\0\u6d6e\0\u6d9c\0\u6dca\0\u6df8\0\u6e26\0\u6e54\0\u6e82"+
    "\0\u6eb0\0\u6ede\0\u6f0c\0\u6f3a\0\u6f68\0\u6f96\0\u6fc4\0\u6ff2"+
    "\0\u7020\0\u704e\0\u707c\0\u70aa\0\u70d8\0\u7106\0\u7134\0\u7162"+
    "\0\u7190\0\u71be\0\u71ec\0\u721a\0\u7248\0\u7276\0\u72a4\0\u72d2"+
    "\0\u7300\0\u732e\0\u735c\0\u738a\0\u73b8\0\u73e6\0\u7414\0\u7442"+
    "\0\u7470\0\u749e\0\u74cc\0\u74fa\0\u7528\0\u7556\0\u7584\0\u75b2"+
    "\0\u75e0\0\u760e\0\u763c\0\u766a\0\u7698\0\u76c6\0\u76f4\0\u7722"+
    "\0\u7750\0\u777e\0\u77ac\0\u77da\0\u7808\0\u7836\0\u7864\0\u7892"+
    "\0\u78c0\0\u78ee\0\u791c\0\u794a\0\u7978\0\u79a6\0\u79d4\0\u7a02"+
    "\0\u7a30\0\u7a5e\0\u7a8c\0\u7aba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\3\1\5\7\3\1\6\6\3"+
    "\1\4\3\3\1\2\24\3\57\0\15\3\1\0\12\3"+
    "\1\0\24\3\1\0\1\3\1\4\13\3\1\0\6\3"+
    "\1\4\3\3\1\0\24\3\1\0\5\3\1\5\1\7"+
    "\5\3\1\10\1\0\12\3\1\0\24\3\7\0\1\11"+
    "\1\12\1\13\1\14\1\0\1\15\1\16\1\0\1\17"+
    "\1\20\1\21\1\22\1\0\1\23\1\0\1\24\1\25"+
    "\2\0\1\26\1\0\1\27\7\0\1\30\5\0\1\31"+
    "\4\0\7\3\1\10\5\3\1\0\12\3\1\0\24\3"+
    "\1\0\7\3\1\32\5\3\1\0\12\3\1\0\24\3"+
    "\23\0\1\33\41\0\1\34\5\0\1\35\2\0\1\36"+
    "\12\0\1\37\13\0\1\40\15\0\1\41\14\0\1\42"+
    "\41\0\1\43\7\0\1\44\1\0\1\45\26\0\1\46"+
    "\13\0\1\47\1\50\1\51\1\52\2\0\1\53\1\0"+
    "\1\54\1\55\1\56\1\57\1\0\1\60\1\0\1\61"+
    "\1\62\2\0\1\63\11\0\1\64\5\0\1\65\23\0"+
    "\1\66\55\0\1\67\45\0\1\70\21\0\1\71\12\0"+
    "\1\72\34\0\1\73\63\0\1\74\12\0\1\75\31\0"+
    "\1\76\5\0\1\77\17\0\1\100\1\0\1\101\24\0"+
    "\1\102\60\0\1\103\54\0\1\104\70\0\1\105\40\0"+
    "\1\106\2\0\1\107\54\0\1\110\34\0\10\3\1\111"+
    "\4\3\1\0\12\3\1\0\24\3\26\0\1\112\51\0"+
    "\1\113\56\0\1\114\42\0\1\115\74\0\1\116\51\0"+
    "\1\117\55\0\1\120\61\0\1\121\52\0\1\122\2\0"+
    "\1\123\60\0\1\124\67\0\1\125\40\0\1\126\51\0"+
    "\1\127\41\0\1\130\5\0\1\131\2\0\1\132\12\0"+
    "\1\133\13\0\1\134\15\0\1\135\14\0\1\136\41\0"+
    "\1\137\7\0\1\140\1\0\1\141\26\0\1\142\24\0"+
    "\1\143\55\0\1\144\45\0\1\145\21\0\1\146\12\0"+
    "\1\147\34\0\1\150\63\0\1\151\12\0\1\152\31\0"+
    "\1\153\5\0\1\154\17\0\1\155\1\0\1\156\24\0"+
    "\1\157\60\0\1\160\54\0\1\161\53\0\1\162\2\0"+
    "\1\163\54\0\1\164\62\0\1\165\47\0\1\166\56\0"+
    "\1\167\44\0\1\170\12\0\1\171\46\0\1\172\50\0"+
    "\1\173\56\0\1\174\12\0\1\175\41\0\1\176\66\0"+
    "\1\177\44\0\1\200\57\0\1\201\53\0\1\202\57\0"+
    "\1\203\32\0\1\204\63\0\1\205\23\0\1\206\72\0"+
    "\1\207\27\0\1\210\56\0\1\211\20\0\1\212\47\0"+
    "\1\213\32\0\11\3\1\214\1\215\2\3\1\0\12\3"+
    "\1\0\24\3\21\0\1\216\60\0\1\217\54\0\1\220"+
    "\60\0\1\221\52\0\1\222\53\0\1\223\101\0\1\224"+
    "\34\0\1\225\41\0\1\226\67\0\1\227\44\0\1\230"+
    "\54\0\1\231\112\0\1\232\36\0\1\233\51\0\1\234"+
    "\56\0\1\235\42\0\1\236\74\0\1\237\51\0\1\240"+
    "\55\0\1\241\61\0\1\242\52\0\1\243\2\0\1\244"+
    "\60\0\1\245\67\0\1\246\40\0\1\247\55\0\1\250"+
    "\47\0\1\251\56\0\1\252\44\0\1\253\12\0\1\254"+
    "\46\0\1\255\50\0\1\256\56\0\1\257\12\0\1\260"+
    "\41\0\1\261\66\0\1\262\44\0\1\263\57\0\1\264"+
    "\53\0\1\265\57\0\1\266\32\0\1\267\63\0\1\270"+
    "\23\0\1\271\44\0\1\272\56\0\1\273\20\0\1\274"+
    "\47\0\1\275\43\0\1\276\65\0\1\277\65\0\1\300"+
    "\46\0\1\301\65\0\1\302\45\0\1\303\54\0\1\304"+
    "\42\0\1\305\66\0\1\306\64\0\1\307\55\0\1\310"+
    "\46\0\1\311\45\0\1\312\54\0\1\313\56\0\1\314"+
    "\121\0\1\315\32\0\1\316\44\0\1\317\74\0\1\320"+
    "\70\0\1\321\55\0\1\322\35\0\1\323\52\0\1\324"+
    "\27\0\12\3\1\215\2\3\1\0\12\3\1\0\24\3"+
    "\1\0\13\3\1\325\1\3\1\0\12\3\1\0\24\3"+
    "\22\0\1\326\54\0\1\327\44\0\1\330\67\0\1\331"+
    "\104\0\1\332\56\0\1\333\25\0\1\334\64\0\1\335"+
    "\46\0\1\336\55\0\1\337\57\0\1\340\1\0\1\341"+
    "\47\0\1\342\61\0\1\343\52\0\1\344\60\0\1\345"+
    "\54\0\1\346\60\0\1\347\52\0\1\350\53\0\1\351"+
    "\101\0\1\352\34\0\1\353\41\0\1\354\67\0\1\355"+
    "\44\0\1\356\54\0\1\357\112\0\1\360\22\0\1\361"+
    "\65\0\1\362\65\0\1\363\46\0\1\364\65\0\1\365"+
    "\45\0\1\366\54\0\1\367\42\0\1\370\66\0\1\371"+
    "\64\0\1\372\55\0\1\373\46\0\1\374\45\0\1\375"+
    "\54\0\1\376\56\0\1\377\121\0\1\u0100\32\0\1\u0101"+
    "\44\0\1\u0102\107\0\1\u0103\55\0\1\u0104\35\0\1\u0105"+
    "\52\0\1\u0106\36\0\1\u0107\70\0\1\u0108\52\0\1\u0109"+
    "\64\0\1\u010a\50\0\1\u010b\62\0\1\u010c\1\0\1\u010d"+
    "\55\0\1\u010e\50\0\1\u010f\57\0\1\u0110\101\0\1\u0111"+
    "\25\0\1\u0112\77\0\1\u0113\40\0\1\u0114\51\0\1\u0115"+
    "\52\0\1\u0116\62\0\1\u0117\54\0\1\u0118\71\0\1\u0119"+
    "\46\0\1\u011a\53\0\1\u011b\50\0\1\u011c\64\0\1\u011d"+
    "\25\0\13\3\1\u011e\1\3\1\0\12\3\1\0\24\3"+
    "\27\0\1\u011f\57\0\1\u0120\55\0\1\u0121\55\0\1\u0122"+
    "\35\0\1\u0123\75\0\1\u0124\55\0\1\u0125\55\0\1\u0126"+
    "\34\0\1\u0127\74\0\1\u0128\50\0\1\u0129\56\0\1\u012a"+
    "\64\0\1\u012b\45\0\1\u012c\54\0\1\u012d\44\0\1\u012e"+
    "\67\0\1\u012f\104\0\1\u0130\56\0\1\u0131\25\0\1\u0132"+
    "\64\0\1\u0133\46\0\1\u0134\55\0\1\u0135\57\0\1\u0136"+
    "\1\0\1\u0137\47\0\1\u0138\61\0\1\u0139\41\0\1\u013a"+
    "\70\0\1\u013b\52\0\1\u013c\64\0\1\u013d\50\0\1\u013e"+
    "\62\0\1\u013f\1\0\1\u0140\55\0\1\u0141\50\0\1\u0142"+
    "\57\0\1\u0143\101\0\1\u0144\25\0\1\u0145\77\0\1\u0146"+
    "\40\0\1\u0147\51\0\1\u0148\52\0\1\u0149\66\0\1\u014a"+
    "\50\0\1\u014b\62\0\1\u014c\53\0\1\u014d\50\0\1\u014e"+
    "\64\0\1\u014f\71\0\1\u0150\31\0\1\u0151\1\0\1\u0152"+
    "\100\0\1\u0153\17\0\1\u0154\66\0\1\u0155\1\0\1\u0156"+
    "\64\0\1\u0157\35\0\1\u0158\74\0\1\u0159\34\0\1\u015a"+
    "\20\0\1\u015b\36\0\1\u015c\71\0\1\u015d\53\0\1\u015e"+
    "\60\0\1\u015f\36\0\1\u0160\122\0\1\u0161\23\0\1\u0162"+
    "\73\0\1\u0163\34\0\1\u0164\102\0\1\u0165\11\0\3\3"+
    "\2\u0166\1\3\7\u0166\1\0\6\u0166\1\3\3\u0166\1\0"+
    "\2\u0166\1\3\21\u0166\31\0\1\u0167\55\0\1\u0168\55\0"+
    "\1\u0169\50\0\1\u016a\43\0\1\u016b\110\0\1\u016c\32\0"+
    "\1\u016d\62\0\1\u016e\57\0\1\u016f\55\0\1\u0170\55\0"+
    "\1\u0171\35\0\1\u0172\75\0\1\u0173\55\0\1\u0174\55\0"+
    "\1\u0175\34\0\1\u0176\74\0\1\u0177\50\0\1\u0178\56\0"+
    "\1\u0179\64\0\1\u017a\70\0\1\u017b\33\0\1\u017c\100\0"+
    "\1\u017d\17\0\1\u017e\70\0\1\u017f\64\0\1\u0180\35\0"+
    "\1\u0181\74\0\1\u0182\34\0\1\u0183\20\0\1\u0184\36\0"+
    "\1\u0185\71\0\1\u0186\53\0\1\u0187\60\0\1\u0188\36\0"+
    "\1\u0189\70\0\1\u018a\52\0\1\u018b\102\0\1\u018c\34\0"+
    "\1\u018d\55\0\1\u018e\100\0\1\u018f\30\0\1\u0190\57\0"+
    "\1\u0191\55\0\1\u0192\100\0\1\u0193\32\0\1\u0194\51\0"+
    "\1\u0195\104\0\1\u0196\20\0\1\u0197\65\0\1\u0198\77\0"+
    "\1\u0199\42\0\1\u019a\46\0\1\u019b\61\0\1\u019c\76\0"+
    "\1\u019d\50\0\1\u019e\46\0\1\u019f\32\0\1\u01a0\46\0"+
    "\3\3\2\u0166\1\u01a1\7\u0166\1\0\6\u0166\1\3\3\u0166"+
    "\1\0\2\u0166\1\3\21\u0166\31\0\1\u01a2\46\0\1\u01a3"+
    "\64\0\1\u01a4\55\0\1\u01a5\55\0\1\u01a6\55\0\1\u01a7"+
    "\55\0\1\u01a8\50\0\1\u01a9\43\0\1\u01aa\110\0\1\u01ab"+
    "\32\0\1\u01ac\57\0\1\u01ad\100\0\1\u01ae\30\0\1\u01af"+
    "\57\0\1\u01b0\100\0\1\u01b1\32\0\1\u01b2\51\0\1\u01b3"+
    "\104\0\1\u01b4\20\0\1\u01b5\65\0\1\u01b6\77\0\1\u01b7"+
    "\42\0\1\u01b8\46\0\1\u01b9\102\0\1\u01ba\41\0\1\u01bb"+
    "\32\0\1\u01bc\77\0\1\u01bd\33\0\1\u01be\115\0\1\u01bf"+
    "\26\0\1\u01c0\101\0\1\u01c1\20\0\1\u01c2\115\0\1\u01c3"+
    "\33\0\1\u01c4\41\0\1\u01c5\71\0\1\u01c6\60\0\1\u01c7"+
    "\55\0\1\u01c8\34\0\1\u01c9\77\0\1\u01ca\43\0\1\u01cb"+
    "\105\0\1\u01cc\50\0\1\u01cd\21\0\1\u01ce\77\0\1\u01cf"+
    "\25\0\1\3\1\u01d0\3\3\1\u01d1\7\3\1\0\6\3"+
    "\1\u01d0\3\3\1\u01d2\24\3\44\0\1\u01d3\42\0\1\u01d4"+
    "\46\0\1\u01d5\64\0\1\u01d6\55\0\1\u01d7\56\0\1\u01d8"+
    "\73\0\1\u01d9\26\0\1\u01da\101\0\1\u01db\60\0\1\u01dc"+
    "\33\0\1\u01dd\41\0\1\u01de\71\0\1\u01df\60\0\1\u01e0"+
    "\55\0\1\u01e1\34\0\1\u01e2\77\0\1\u01e3\73\0\1\u01e4"+
    "\14\0\1\u01e5\77\0\1\u01e6\46\0\1\u01e7\57\0\1\u01e8"+
    "\53\0\1\u01e9\61\0\1\u01ea\37\0\1\u01eb\71\0\1\u01ec"+
    "\53\0\1\u01ed\43\0\1\u01ee\76\0\1\u01ef\55\0\1\u01f0"+
    "\55\0\1\u01f1\55\0\1\u01f2\71\0\1\u01f3\32\0\1\u01f4"+
    "\60\0\1\u01f5\40\0\1\u01f6\46\0\1\3\1\u01d0\3\3"+
    "\1\5\7\3\1\0\6\3\1\u01d0\3\3\1\u01d2\24\3"+
    "\1\0\1\3\1\u01d0\3\3\1\u01d1\1\7\5\3\1\10"+
    "\1\0\6\3\1\u01d0\3\3\1\u01d2\24\3\10\0\1\u01f7"+
    "\111\0\1\u01f8\33\0\1\u01f9\55\0\1\u01fa\61\0\1\u01fb"+
    "\37\0\1\u01fc\67\0\1\u01fd\43\0\1\u01fe\76\0\1\u01ff"+
    "\55\0\1\u0200\55\0\1\u0201\55\0\1\u0202\46\0\1\u0203"+
    "\43\0\1\u0204\76\0\1\u0205\51\0\1\u0206\74\0\1\u0207"+
    "\31\0\1\u0208\66\0\1\u0209\51\0\1\u020a\74\0\1\u020b"+
    "\35\0\1\u020c\105\0\1\u020d\45\0\1\u020e\35\0\1\u020f"+
    "\62\0\1\u0210\55\0\1\u0211\34\0\1\u0212\76\0\1\u0213"+
    "\70\0\1\u0214\31\0\1\u0215\66\0\1\u0216\70\0\1\u0217"+
    "\35\0\1\u0218\75\0\1\u0219\42\0\1\u021a\41\0\1\u021b"+
    "\50\0\1\u021c\57\0\1\u021d\60\0\1\u021e\50\0\1\u021f"+
    "\114\0\1\u0220\21\0\1\u0221\52\0\1\u0222\74\0\1\u0223"+
    "\57\0\1\u0224\34\0\1\u0225\57\0\1\u0226\53\0\1\u0227"+
    "\114\0\1\u0228\16\0\1\u0229\65\0\1\u022a\66\0\1\u022b"+
    "\34\0\1\u022c\65\0\1\u022d\66\0\1\u022e\52\0\1\u022f"+
    "\36\0\1\u0230\77\0\1\u0231\34\0\1\u0232\76\0\1\u0233"+
    "\34\0\1\u0234\76\0\1\u0235\52\0\1\u0236\60\0\1\u0237"+
    "\52\0\1\u0238\60\0\1\u0239\52\0\1\u023a\51\0\1\u023b"+
    "\62\0\1\u023c\46\0\1\u023d\66\0\1\u023e\46\0\1\u023f"+
    "\55\0\1\u0240\55\0\1\u0241\64\0\1\u0242\46\0\1\u0243"+
    "\77\0\1\u0244\42\0\1\u0245\53\0\1\u0246\55\0\1\u0247"+
    "\43\0\1\u0248\66\0\1\u0249\51\0\1\u024a\55\0\1\u024b"+
    "\46\0\1\u024c\64\0\1\u024d\50\0\1\u024e\55\0\1\u024f"+
    "\71\0\1\u0250\37\0\1\u0251\14\0\1\u0252\40\0\1\u0253"+
    "\14\0\1\u0254\33\0\1\u0255\55\0\1\u0256\55\0\1\u0257"+
    "\55\0\1\u0258\50\0\1\u0259\2\0\1\u0259\1\0\1\u025a"+
    "\4\u0259\1\0\2\u0259\1\u025b\6\u0259\1\0\2\u0259\2\0"+
    "\2\u0259\1\0\21\u0259\1\0\1\u025c\2\0\1\u025c\1\0"+
    "\1\u025d\4\u025c\1\0\2\u025c\1\u025e\6\u025c\1\0\2\u025c"+
    "\2\0\2\u025c\1\0\21\u025c\1\0\1\u025f\2\0\1\u025f"+
    "\1\0\1\u0260\4\u025f\1\0\2\u025f\1\u0261\6\u025f\1\0"+
    "\2\u025f\2\0\2\u025f\1\0\21\u025f\1\0\1\u0262\2\0"+
    "\1\u0262\1\0\1\u0263\4\u0262\1\0\2\u0262\1\u0264\6\u0262"+
    "\1\0\2\u0262\2\0\2\u0262\1\0\21\u0262\1\0\1\u0259"+
    "\2\0\1\u0259\1\0\1\u0265\4\u0259\1\0\2\u0259\1\0"+
    "\6\u0259\1\0\2\u0259\2\0\2\u0259\1\0\21\u0259\6\0"+
    "\1\u025a\1\u0266\5\0\1\u0267\57\0\1\u0268\37\0\1\u025c"+
    "\2\0\1\u025c\1\0\1\u0269\4\u025c\1\0\2\u025c\1\0"+
    "\6\u025c\1\0\2\u025c\2\0\2\u025c\1\0\21\u025c\6\0"+
    "\1\u025d\1\u026a\5\0\1\u026b\57\0\1\u026c\37\0\1\u025f"+
    "\2\0\1\u025f\1\0\1\u026d\4\u025f\1\0\2\u025f\1\0"+
    "\6\u025f\1\0\2\u025f\2\0\2\u025f\1\0\21\u025f\6\0"+
    "\1\u0260\1\u026e\5\0\1\u026f\60\0\1\u0270\36\0\1\u0262"+
    "\2\0\1\u0262\1\0\1\u0271\4\u0262\1\0\2\u0262\1\0"+
    "\6\u0262\1\0\2\u0262\2\0\2\u0262\1\0\21\u0262\6\0"+
    "\1\u0263\1\u0272\5\0\1\u0273\60\0\1\u0274\43\0\1\u025a"+
    "\1\u0266\4\0\1\u0275\1\u0267\50\0\1\u0267\55\0\1\u0276"+
    "\65\0\1\u0277\43\0\1\u025d\1\u026a\5\0\1\u026b\7\0"+
    "\1\u0278\40\0\1\u026b\55\0\1\u0279\65\0\1\u027a\43\0"+
    "\1\u0260\1\u026e\4\0\1\u027b\1\u026f\50\0\1\u026f\55\0"+
    "\1\u027c\77\0\1\u027d\31\0\1\u0263\1\u0272\5\0\1\u0273"+
    "\7\0\1\u027e\40\0\1\u0273\55\0\1\u027f\77\0\1\u0280"+
    "\54\0\1\u0281\35\0\1\u0282\65\0\1\u0283\50\0\1\u0275"+
    "\52\0\1\u0284\65\0\1\u0285\65\0\1\u0286\35\0\1\u0287"+
    "\70\0\1\u0288\45\0\1\u027b\52\0\1\u0289\70\0\1\u028a"+
    "\43\0\1\u028b\1\u028c\64\0\1\u028d\45\0\1\u028e\1\u028f"+
    "\64\0\1\u0290\45\0\1\u0291\1\u0292\75\0\1\u0293\34\0"+
    "\1\u0294\1\u0295\75\0\1\u0296\35\0\1\u028c\56\0\1\u0297"+
    "\64\0\1\u0298\45\0\1\u028f\56\0\1\u0299\64\0\1\u029a"+
    "\45\0\1\u0292\56\0\1\u029b\63\0\1\u029c\46\0\1\u0295"+
    "\56\0\1\u029d\63\0\1\u029e\47\0\1\u029f\62\0\1\u02a0"+
    "\50\0\1\u02a1\62\0\1\u02a2\50\0\1\u02a3\62\0\1\u02a4"+
    "\50\0\1\u02a5\62\0\1\u02a6\40\0\2\u02a7\1\0\7\u02a7"+
    "\1\0\6\u02a7\1\0\3\u02a7\1\0\2\u02a7\1\0\21\u02a7"+
    "\24\0\1\u02a8\35\0\2\u02a9\1\0\7\u02a9\1\0\6\u02a9"+
    "\1\0\3\u02a9\1\0\2\u02a9\1\0\21\u02a9\24\0\1\u02aa"+
    "\35\0\2\u02ab\1\0\7\u02ab\1\0\6\u02ab\1\0\3\u02ab"+
    "\1\0\2\u02ab\1\0\21\u02ab\24\0\1\u02ac\35\0\2\u02ad"+
    "\1\0\7\u02ad\1\0\6\u02ad\1\0\3\u02ad\1\0\2\u02ad"+
    "\1\0\21\u02ad\24\0\1\u02ae\35\0\2\u02a7\1\u02af\7\u02a7"+
    "\1\0\6\u02a7\1\0\3\u02a7\1\0\2\u02a7\1\0\21\u02a7"+
    "\10\0\1\u02b0\51\0\2\u02a9\1\u02b1\7\u02a9\1\0\6\u02a9"+
    "\1\0\3\u02a9\1\0\2\u02a9\1\0\21\u02a9\10\0\1\u02b2"+
    "\51\0\2\u02ab\1\u02b3\7\u02ab\1\0\6\u02ab\1\0\3\u02ab"+
    "\1\0\2\u02ab\1\0\21\u02ab\10\0\1\u02b4\51\0\2\u02ad"+
    "\1\u02b5\7\u02ad\1\0\6\u02ad\1\0\3\u02ad\1\0\2\u02ad"+
    "\1\0\21\u02ad\10\0\1\u02b6\46\0\1\u0259\1\u02b7\1\0"+
    "\1\u0259\1\0\1\u02b8\4\u0259\1\0\2\u0259\1\0\6\u0259"+
    "\1\u02b7\2\u0259\2\0\2\u0259\1\0\21\u0259\24\0\1\u02b9"+
    "\32\0\1\u025c\1\u02ba\1\0\1\u025c\1\0\1\u02bb\4\u025c"+
    "\1\0\2\u025c\1\0\6\u025c\1\u02ba\2\u025c\2\0\2\u025c"+
    "\1\0\21\u025c\24\0\1\u02bc\32\0\1\u025f\1\u02bd\1\0"+
    "\1\u025f\1\0\1\u02be\4\u025f\1\0\2\u025f\1\0\6\u025f"+
    "\1\u02bd\2\u025f\2\0\2\u025f\1\0\21\u025f\24\0\1\u02bf"+
    "\32\0\1\u0262\1\u02c0\1\0\1\u0262\1\0\1\u02c1\4\u0262"+
    "\1\0\2\u0262\1\0\6\u0262\1\u02c0\2\u0262\2\0\2\u0262"+
    "\1\0\21\u0262\24\0\1\u02c2\32\0\1\u0259\1\u02b7\1\0"+
    "\1\u0259\1\0\1\u0265\4\u0259\1\0\2\u0259\1\0\6\u0259"+
    "\1\u02b7\2\u0259\2\0\2\u0259\1\0\21\u0259\1\0\1\u0259"+
    "\1\u02b7\1\0\1\u0259\1\0\1\u02b8\1\u02c3\3\u0259\1\0"+
    "\1\u02c4\1\u02c5\1\0\6\u0259\1\u02b7\2\u0259\2\0\2\u0259"+
    "\1\0\21\u0259\25\0\1\u02c6\31\0\1\u025c\1\u02ba\1\0"+
    "\1\u025c\1\0\1\u0269\4\u025c\1\0\2\u025c\1\0\6\u025c"+
    "\1\u02ba\2\u025c\2\0\2\u025c\1\0\21\u025c\1\0\1\u025c"+
    "\1\u02ba\1\0\1\u025c\1\0\1\u02bb\1\u02c7\3\u025c\1\0"+
    "\1\u025c\1\u02c8\1\0\6\u025c\1\u02c9\2\u025c\2\0\2\u025c"+
    "\1\0\21\u025c\25\0\1\u02ca\31\0\1\u025f\1\u02bd\1\0"+
    "\1\u025f\1\0\1\u026d\4\u025f\1\0\2\u025f\1\0\6\u025f"+
    "\1\u02bd\2\u025f\2\0\2\u025f\1\0\21\u025f\1\0\1\u025f"+
    "\1\u02bd\1\0\1\u025f\1\0\1\u02be\1\u02cb\3\u025f\1\0"+
    "\1\u02cc\1\u02cd\1\0\6\u025f\1\u02bd\2\u025f\2\0\2\u025f"+
    "\1\0\21\u025f\25\0\1\u02ce\31\0\1\u0262\1\u02c0\1\0"+
    "\1\u0262\1\0\1\u0271\4\u0262\1\0\2\u0262\1\0\6\u0262"+
    "\1\u02c0\2\u0262\2\0\2\u0262\1\0\21\u0262\1\0\1\u0262"+
    "\1\u02c0\1\0\1\u0262\1\0\1\u02c1\1\u02cf\3\u0262\1\0"+
    "\1\u0262\1\u02d0\1\0\6\u0262\1\u02d1\2\u0262\2\0\2\u0262"+
    "\1\0\21\u0262\25\0\1\u02d2\31\0\1\u0259\2\0\1\u0259"+
    "\1\0\1\u0265\1\u0259\1\u02c5\2\u0259\1\0\2\u0259\1\0"+
    "\6\u0259\1\0\2\u0259\2\0\2\u0259\1\0\21\u0259\1\0"+
    "\1\u0259\2\0\1\u0259\1\0\1\u0265\4\u0259\1\0\2\u0259"+
    "\1\0\6\u0259\1\0\2\u0259\1\0\1\u0281\2\u0259\1\0"+
    "\21\u0259\1\0\1\u0259\2\0\1\u0259\1\0\1\u0265\1\u0259"+
    "\1\u02d3\2\u0259\1\0\2\u0259\1\0\6\u0259\1\0\2\u0259"+
    "\2\0\2\u0259\1\0\21\u0259\15\0\1\u02d4\41\0\1\u025c"+
    "\2\0\1\u025c\1\0\1\u0269\1\u025c\1\u02c8\2\u025c\1\0"+
    "\2\u025c\1\0\6\u025c\1\0\2\u025c\2\0\2\u025c\1\0"+
    "\21\u025c\1\0\1\u025c\2\0\1\u025c\1\0\1\u0269\1\u025c"+
    "\1\u02d5\2\u025c\1\0\2\u025c\1\0\6\u025c\1\0\2\u025c"+
    "\2\0\2\u025c\1\0\21\u025c\1\0\1\u025c\1\u02ba\1\0"+
    "\1\u025c\1\0\1\u0269\4\u025c\1\0\1\u02d6\1\u025c\1\0"+
    "\6\u025c\1\u02ba\2\u025c\2\0\2\u025c\1\0\21\u025c\15\0"+
    "\1\u02d7\41\0\1\u025f\2\0\1\u025f\1\0\1\u026d\1\u025f"+
    "\1\u02cd\2\u025f\1\0\2\u025f\1\0\6\u025f\1\0\2\u025f"+
    "\2\0\2\u025f\1\0\21\u025f\1\0\1\u025f\2\0\1\u025f"+
    "\1\0\1\u026d\4\u025f\1\0\2\u025f\1\0\6\u025f\1\0"+
    "\2\u025f\1\0\1\u0286\2\u025f\1\0\21\u025f\1\0\1\u025f"+
    "\2\0\1\u025f\1\0\1\u026d\1\u025f\1\u02d8\2\u025f\1\0"+
    "\2\u025f\1\0\6\u025f\1\0\2\u025f\2\0\2\u025f\1\0"+
    "\21\u025f\15\0\1\u02d9\41\0\1\u0262\2\0\1\u0262\1\0"+
    "\1\u0271\1\u0262\1\u02d0\2\u0262\1\0\2\u0262\1\0\6\u0262"+
    "\1\0\2\u0262\2\0\2\u0262\1\0\21\u0262\1\0\1\u0262"+
    "\2\0\1\u0262\1\0\1\u0271\1\u0262\1\u02da\2\u0262\1\0"+
    "\2\u0262\1\0\6\u0262\1\0\2\u0262\2\0\2\u0262\1\0"+
    "\21\u0262\1\0\1\u0262\1\u02c0\1\0\1\u0262\1\0\1\u0271"+
    "\4\u0262\1\0\1\u02db\1\u0262\1\0\6\u0262\1\u02c0\2\u0262"+
    "\2\0\2\u0262\1\0\21\u0262\15\0\1\u02dc\41\0\1\u0259"+
    "\2\0\1\u0259\1\0\1\u0265\2\u0259\1\u02dd\1\u0259\1\0"+
    "\2\u0259\1\0\6\u0259\1\0\2\u0259\2\0\2\u0259\1\0"+
    "\21\u0259\20\0\1\u02de\36\0\1\u025c\2\0\1\u025c\1\0"+
    "\1\u0269\2\u025c\1\u02df\1\u025c\1\0\2\u025c\1\0\6\u025c"+
    "\1\0\2\u025c\2\0\2\u025c\1\0\21\u025c\1\0\1\u025c"+
    "\2\0\1\u025c\1\0\1\u0269\4\u025c\1\0\2\u025c\1\0"+
    "\6\u025c\1\0\2\u025c\1\0\1\u0281\2\u025c\1\0\21\u025c"+
    "\20\0\1\u02e0\36\0\1\u025f\2\0\1\u025f\1\0\1\u026d"+
    "\2\u025f\1\u02e1\1\u025f\1\0\2\u025f\1\0\6\u025f\1\0"+
    "\2\u025f\2\0\2\u025f\1\0\21\u025f\20\0\1\u02e2\36\0"+
    "\1\u0262\2\0\1\u0262\1\0\1\u0271\2\u0262\1\u02e3\1\u0262"+
    "\1\0\2\u0262\1\0\6\u0262\1\0\2\u0262\2\0\2\u0262"+
    "\1\0\21\u0262\1\0\1\u0262\2\0\1\u0262\1\0\1\u0271"+
    "\4\u0262\1\0\2\u0262\1\0\6\u0262\1\0\2\u0262\1\0"+
    "\1\u0286\2\u0262\1\0\21\u0262\20\0\1\u02e4\36\0\1\u0259"+
    "\2\0\1\u0259\1\0\1\u0265\3\u0259\1\u02e5\1\u028c\2\u0259"+
    "\1\0\6\u0259\1\0\2\u0259\2\0\2\u0259\1\0\21\u0259"+
    "\26\0\1\u02e6\30\0\1\u025c\2\0\1\u025c\1\0\1\u0269"+
    "\3\u025c\1\u02e7\1\u028f\2\u025c\1\0\6\u025c\1\0\2\u025c"+
    "\2\0\2\u025c\1\0\21\u025c\26\0\1\u02e8\30\0\1\u025f"+
    "\2\0\1\u025f\1\0\1\u026d\3\u025f\1\u02e9\1\u0292\2\u025f"+
    "\1\0\6\u025f\1\0\2\u025f\2\0\2\u025f\1\0\21\u025f"+
    "\26\0\1\u02ea\30\0\1\u0262\2\0\1\u0262\1\0\1\u0271"+
    "\3\u0262\1\u02eb\1\u0295\2\u0262\1\0\6\u0262\1\0\2\u0262"+
    "\2\0\2\u0262\1\0\21\u0262\26\0\1\u02ec\30\0\1\u0259"+
    "\2\0\1\u0259\1\0\1\u0265\4\u0259\1\u028c\2\u0259\1\0"+
    "\6\u0259\1\0\2\u0259\2\0\2\u0259\1\0\21\u0259\22\0"+
    "\1\u02ed\34\0\1\u025c\2\0\1\u025c\1\0\1\u0269\4\u025c"+
    "\1\u028f\2\u025c\1\0\6\u025c\1\0\2\u025c\2\0\2\u025c"+
    "\1\0\21\u025c\22\0\1\u02ee\34\0\1\u025f\2\0\1\u025f"+
    "\1\0\1\u026d\4\u025f\1\u0292\2\u025f\1\0\6\u025f\1\0"+
    "\2\u025f\2\0\2\u025f\1\0\21\u025f\22\0\1\u02ef\34\0"+
    "\1\u0262\2\0\1\u0262\1\0\1\u0271\4\u0262\1\u0295\2\u0262"+
    "\1\0\6\u0262\1\0\2\u0262\2\0\2\u0262\1\0\21\u0262"+
    "\22\0\1\u02f0\62\0\1\u02f1\55\0\1\u02f2\55\0\1\u02f3"+
    "\55\0\1\u02f4\50\0\1\u02f5\55\0\1\u02f6\55\0\1\u02f7"+
    "\55\0\1\u02f8\50\0\1\u02f9\55\0\1\u02fa\55\0\1\u02fb"+
    "\55\0\1\u02fc\53\0\1\u0251\72\0\1\u0252\40\0\1\u0253"+
    "\72\0\1\u0254\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31464];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\21\0\1\1\56\0\1\1\102\0"+
    "\2\1\100\0\1\11\6\0\1\1\7\0\1\11\43\0"+
    "\1\11\13\0\2\11\13\0\1\11\2\0\1\11\1\1"+
    "\1\0\3\11\1\0\3\11\14\0\1\11\14\0\2\11"+
    "\10\0\1\11\1\0\1\11\2\0\1\11\11\0\1\11"+
    "\1\0\1\11\12\0\1\1\3\11\5\0\3\11\1\0"+
    "\3\11\14\0\1\11\1\0\1\11\25\0\1\11\6\0"+
    "\1\1\1\11\1\0\5\11\17\0\1\11\16\0\2\11"+
    "\6\0\1\11\2\1\1\11\1\0\1\11\1\0\2\11"+
    "\10\0\2\11\4\0\1\11\10\0\4\11\14\0\4\11"+
    "\2\0\1\11\3\0\1\11\6\0\2\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\11\0\1\11\6\0\1\11"+
    "\2\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\4\0\1\11\3\0\1\11"+
    "\2\0\1\11\6\0\1\11\3\0\1\11\60\0\1\11"+
    "\4\0\1\11\166\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    
    BufferedWriter writer;  
    Boolean isSection = false;
    Boolean isInfo = false;

    /**
    * Inicializa el Writter para escribir sobre el HTML
    */
    public void InitFileWritter() throws IOException{
        this.writer = new BufferedWriter(new FileWriter("index.html"));
        this.Write("<html>\n"
            +"<head><title>UTN Parser</title></head>\n"
            +"<body>\n");
       
    }
    
    /**
    * Invoca al writter y nos permite escribir sobre el HTML
    * @param token String a escribir sobre el archivo de salida
    */
    public void Write(String token) throws IOException{
        this.writer.write(token);
    }

    /**
    * Cierra el archivo y agrega etiquetas de cierre HTML
    */
    public void CloseFileWritter() throws IOException{
        this.Write("</body>\n" + "</html>\n");
        this.writer.close();
    }

    /**
    * Crea y devuelve un nuevo simbolo para luego ser utilizado en parser
    */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
      try {
          this.InitFileWritter();
      } catch (IOException ex) {
          Logger.getLogger(LexerCup.class.getName()).log(Level.SEVERE, null, ex);
  }
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
      this.CloseFileWritter();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { this.isInfo = true;
    this.Write("<div style='background-color: green; color: white; font-size: 8px;'>"+"\n");
    return new Symbol(sym.AperturaInfo, yychar, yyline, yytext());
          }
        case 83: break;
        case 45: 
          { return new Symbol(sym.AperturaComment, yychar, yyline, yytext());
          }
        case 84: break;
        case 64: 
          { this.isSection = true;
    return new Symbol(sym.AperturaSimpleSect, yychar, yyline, yytext());
          }
        case 85: break;
        case 38: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaSurname, yychar, yyline, yytext());
          }
        case 86: break;
        case 40: 
          { this.Write("</table>"+"\n");
    return new Symbol(sym.CierreTgroup, yychar, yyline, yytext());
          }
        case 87: break;
        case 20: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreCity, yychar, yyline, yytext());
          }
        case 88: break;
        case 77: 
          { return new Symbol(sym.AperturaInformalTable, yychar, yyline, yytext());
          }
        case 89: break;
        case 18: 
          { if(this.isInfo == true){
        this.Write("<p>"+"\n");
    }
    return new Symbol(sym.CierreDate, yychar, yyline, yytext());
          }
        case 90: break;
        case 59: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAbstract, yychar, yyline, yytext());
          }
        case 91: break;
        case 68: 
          { this.isSection = false;
    return new Symbol(sym.CierreSimpleSect, yychar, yyline, yytext());
          }
        case 92: break;
        case 26: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaStreet, yychar, yyline, yytext());
          }
        case 93: break;
        case 54: 
          { this.Write("<td>");
    return new Symbol(sym.AperturaEntrytbl, yychar, yyline, yytext());
          }
        case 94: break;
        case 57: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreEmphasis, yychar, yyline, yytext());
          }
        case 95: break;
        case 34: 
          { this.Write("</td>");
    return new Symbol(sym.CierreEntry, yychar, yyline, yytext());
          }
        case 96: break;
        case 2: 
          { /*IGNORE*/
          }
        case 97: break;
        case 12: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }else if(this.isSection == true){
        this.Write("<h2>");
    }else{
        this.Write("<h1>");
    }
    return new Symbol(sym.AperturaTitulo, yychar, yyline, yytext());
          }
        case 98: break;
        case 56: 
          { this.Write("<li>");
    return new Symbol(sym.AperturaListItem, yychar, yyline, yytext());
          }
        case 99: break;
        case 39: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreHolder, yychar, yyline, yytext());
          }
        case 100: break;
        case 11: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaTfoot, yychar, yyline, yytext());
          }
        case 101: break;
        case 66: 
          { this.Write("</div>"+"\n");
    return new Symbol(sym.CierreImportant, yychar, yyline, yytext());
          }
        case 102: break;
        case 10: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaThead, yychar, yyline, yytext());
          }
        case 103: break;
        case 82: 
          { return new Symbol(sym.Imagedata, yychar, yyline, yytext());
          }
        case 104: break;
        case 22: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaEmail, yychar, yyline, yytext());
          }
        case 105: break;
        case 7: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaDate, yychar, yyline, yytext());
          }
        case 106: break;
        case 63: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaCopyright, yychar, yyline, yytext());
          }
        case 107: break;
        case 75: 
          { this.Write("<ul>"+"\n");
    return new Symbol(sym.AperturaItemizedList, yychar, yyline, yytext());
          }
        case 108: break;
        case 47: 
          { this.Write("</p>"+"\n");
    return new Symbol(sym.CierreSimPara, yychar, yyline, yytext());
          }
        case 109: break;
        case 62: 
          { this.Write("<div style='background-color: red; color: white;'>");
    return new Symbol(sym.AperturaImportant, yychar, yyline, yytext());
          }
        case 110: break;
        case 21: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreYear, yychar, yyline, yytext());
          }
        case 111: break;
        case 76: 
          { this.Write("</ul>"+"\n");
    return new Symbol(sym.CierreItemizedList, yychar, yyline, yytext());
          }
        case 112: break;
        case 8: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaCity, yychar, yyline, yytext());
          }
        case 113: break;
        case 28: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreTfoot, yychar, yyline, yytext());
          }
        case 114: break;
        case 72: 
          { return new Symbol(sym.CierreVideoobject, yychar, yyline, yytext());
          }
        case 115: break;
        case 74: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreMediaObject, yychar, yyline, yytext());
          }
        case 116: break;
        case 3: 
          { this.Write("<tr>");
    return new Symbol(sym.AperturaRow, yychar, yyline, yytext());
          }
        case 117: break;
        case 25: 
          { this.Write("<table>"+"\n");
    return new Symbol(sym.AperturaTgroup, yychar, yyline, yytext());
          }
        case 118: break;
        case 80: 
          { return new Symbol(sym.EncabezadoXML, yychar, yyline, yytext());
          }
        case 119: break;
        case 73: 
          { return new Symbol(sym.CierreImageobject, yychar, yyline, yytext());
          }
        case 120: break;
        case 27: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreThead, yychar, yyline, yytext());
          }
        case 121: break;
        case 52: 
          { return new Symbol(sym.CierreComment, yychar, yyline, yytext());
          }
        case 122: break;
        case 41: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreStreet, yychar, yyline, yytext());
          }
        case 123: break;
        case 42: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAuthor, yychar, yyline, yytext());
          }
        case 124: break;
        case 79: 
          { System.out.print(yytext());
    this.Write("<a href=\"");
    return new Symbol(sym.AperturaLink, yychar, yyline, yytext());
          }
        case 125: break;
        case 61: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaFirstName, yychar, yyline, yytext());
          }
        case 126: break;
        case 50: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreAddress, yychar, yyline, yytext());
          }
        case 127: break;
        case 37: 
          { this.isSection = true;
    return new Symbol(sym.AperturaSection, yychar, yyline, yytext());
          }
        case 128: break;
        case 67: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreCopyright, yychar, yyline, yytext());
          }
        case 129: break;
        case 81: 
          { return new Symbol(sym.Videodata, yychar, yyline, yytext());
          }
        case 130: break;
        case 33: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreEmail, yychar, yyline, yytext());
          }
        case 131: break;
        case 17: 
          { this.isInfo = false;
    this.Write("</div>"+"\n");
    return new Symbol(sym.CierreInfo, yychar, yyline, yytext());
          }
        case 132: break;
        case 55: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAbstract, yychar, yyline, yytext());
          }
        case 133: break;
        case 46: 
          { this.Write(yytext());
        return new Symbol(sym.Url, yychar, yyline, yytext());
          }
        case 134: break;
        case 13: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.AperturaTbody, yychar, yyline, yytext());
          }
        case 135: break;
        case 4: 
          { this.Write("<p>");
    return new Symbol(sym.AperturaPara, yychar, yyline, yytext());
          }
        case 136: break;
        case 53: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaEmphasis, yychar, yyline, yytext());
          }
        case 137: break;
        case 15: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaState, yychar, yyline, yytext());
          }
        case 138: break;
        case 24: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaHolder, yychar, yyline, yytext());
          }
        case 139: break;
        case 69: 
          { return new Symbol(sym.AperturaVideoobject, yychar, yyline, yytext());
          }
        case 140: break;
        case 14: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaPhone, yychar, yyline, yytext());
          }
        case 141: break;
        case 16: 
          { this.Write("</p>"+"\n");
    return new Symbol(sym.CierrePara, yychar, yyline, yytext());
          }
        case 142: break;
        case 23: 
          { this.Write("<td>");
    return new Symbol(sym.AperturaEntry, yychar, yyline, yytext());
          }
        case 143: break;
        case 49: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreSurname, yychar, yyline, yytext());
          }
        case 144: break;
        case 44: 
          { return new Symbol(sym.AperturaArticulo, yychar, yyline, yytext());
          }
        case 145: break;
        case 29: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }else if(this.isSection == true){
        this.Write("</h2>"+"\n");
    }else{
        this.Write("</h1>"+"\n");
    }
    return new Symbol(sym.CierreTitulo, yychar, yyline, yytext());
          }
        case 146: break;
        case 65: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreFirstName, yychar, yyline, yytext());
          }
        case 147: break;
        case 78: 
          { return new Symbol(sym.CierreInformalTable, yychar, yyline, yytext());
          }
        case 148: break;
        case 19: 
          { this.Write("</a>"+"\n");
    return new Symbol(sym.CierreLink, yychar, yyline, yytext());
          }
        case 149: break;
        case 30: 
          { this.Write(yytext()+"\n");
    return new Symbol(sym.CierreTbody, yychar, yyline, yytext());
          }
        case 150: break;
        case 9: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaYear, yychar, yyline, yytext());
          }
        case 151: break;
        case 5: 
          { this.Write("</tr>"+"\n");
    return new Symbol(sym.CierreRow, yychar, yyline, yytext());
          }
        case 152: break;
        case 71: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaMediaObject, yychar, yyline, yytext());
          }
        case 153: break;
        case 70: 
          { return new Symbol(sym.AperturaImageobject, yychar, yyline, yytext());
          }
        case 154: break;
        case 60: 
          { this.Write("</li>"+"\n");
    return new Symbol(sym.CierreListItem, yychar, yyline, yytext());
          }
        case 155: break;
        case 58: 
          { this.Write("</td>");
    return new Symbol(sym.CierreEntrytbl, yychar, yyline, yytext());
          }
        case 156: break;
        case 51: 
          { return new Symbol(sym.CierreArticulo, yychar, yyline, yytext());
          }
        case 157: break;
        case 48: 
          { this.isSection = false;
    return new Symbol(sym.CierreSection, yychar, yyline, yytext());
          }
        case 158: break;
        case 43: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAddress, yychar, yyline, yytext());
          }
        case 159: break;
        case 36: 
          { this.Write("<p>");
    return new Symbol(sym.AperturaSimPara, yychar, yyline, yytext());
          }
        case 160: break;
        case 31: 
          { if(this.isInfo == true){
        this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierrePhone, yychar, yyline, yytext());
          }
        case 161: break;
        case 35: 
          { if(this.isInfo == true){
        this.Write("<p>");
    }
    return new Symbol(sym.AperturaAuthor, yychar, yyline, yytext());
          }
        case 162: break;
        case 32: 
          { if(this.isInfo == true){
       this.Write("</p>"+"\n");
    }
    return new Symbol(sym.CierreState, yychar, yyline, yytext());
          }
        case 163: break;
        case 1: 
          { this.Write(yytext());
    return new Symbol(sym.Texto, yychar, yyline, yytext());
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
