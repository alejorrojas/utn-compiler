/* The following code was generated by JFlex 1.4.3 on 28/5/23, 08:23 */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/5/23, 08:23 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/utn-lexer/src/main/java/code/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\11\2\0\1\2\22\0\1\20\1\34\1\24\3\2"+
    "\2\0\4\2\1\1\1\2\1\1\1\10\12\1\1\7\1\2\1\13"+
    "\1\2\1\25\2\2\2\1\1\37\1\35\1\43\11\1\1\36\1\42"+
    "\3\1\1\40\4\1\1\41\1\1\3\2\1\0\1\1\1\0\1\31"+
    "\1\46\1\44\1\27\1\23\1\12\1\33\1\3\1\15\1\47\1\17"+
    "\1\14\1\32\1\16\1\30\1\5\1\1\1\22\1\6\1\4\1\50"+
    "\1\26\1\52\1\21\1\51\1\45\3\2\43\0\1\2\25\0\1\2"+
    "\7\0\1\2\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\1\1\2\3\1\20\0\1\1\54\0\2\1\100\0"+
    "\1\1\65\0\1\3\16\0\1\1\7\0\1\4\5\0"+
    "\1\5\24\0\1\6\22\0\1\7\14\0\1\10\2\0"+
    "\1\11\2\12\1\0\1\13\1\14\1\15\1\0\1\16"+
    "\1\17\1\0\1\20\13\0\1\21\5\0\1\22\5\0"+
    "\1\23\13\0\1\24\2\0\1\25\10\0\1\26\2\0"+
    "\1\27\12\0\1\30\1\31\1\32\5\0\1\33\1\34"+
    "\1\35\1\0\1\36\1\37\1\0\1\40\12\0\1\41"+
    "\2\0\1\42\27\0\1\43\5\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\20\0\1\52\13\0\1\53\3\0"+
    "\1\54\1\55\4\0\1\56\2\0\1\57\1\60\1\61"+
    "\6\0\1\62\2\0\1\63\1\64\3\0\1\65\1\0"+
    "\1\66\6\0\1\67\2\0\1\70\6\0\1\71\4\0"+
    "\1\72\1\0\1\73\2\0\1\74\3\0\1\75\6\0"+
    "\1\76\1\77\1\0\1\100\2\0\1\101\3\0\1\102"+
    "\11\0\1\103\11\0\1\104\1\0\1\105\1\106\3\0"+
    "\1\107\1\110\1\111\1\0\1\112\4\0\1\113\2\0"+
    "\1\114\3\0\1\115\13\0\1\116\54\0\1\117\2\0"+
    "\1\120\15\0\1\121\4\0\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\126\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a"+
    "\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a"+
    "\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a"+
    "\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2"+
    "\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932"+
    "\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a"+
    "\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2"+
    "\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a"+
    "\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92"+
    "\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69\0\53\0\u1f94\0\u1fbf"+
    "\0\u1fea\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117"+
    "\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee\0\u2219\0\u2244\0\u226f"+
    "\0\u229a\0\u22c5\0\u22f0\0\u231b\0\53\0\u2346\0\u2371\0\u239c"+
    "\0\u23c7\0\u23f2\0\53\0\u241d\0\u2448\0\u2473\0\u249e\0\u24c9"+
    "\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0\0\u25cb\0\u25f6\0\u2621"+
    "\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8\0\u2723\0\u274e\0\53"+
    "\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850\0\u287b\0\u28a6"+
    "\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8\0\u29d3\0\u29fe"+
    "\0\u2a29\0\u2a54\0\53\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b"+
    "\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02\0\u2c2d\0\u2c58\0\53"+
    "\0\u2c83\0\u2cae\0\53\0\u2cd9\0\u21ee\0\u2d04\0\53\0\53"+
    "\0\53\0\u2d2f\0\53\0\53\0\u2d5a\0\53\0\u2d85\0\u2db0"+
    "\0\u2ddb\0\u2e06\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08"+
    "\0\u2f33\0\53\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\u300a\0\53"+
    "\0\u3035\0\u3060\0\u308b\0\u30b6\0\u30e1\0\53\0\u310c\0\u3137"+
    "\0\u3162\0\u318d\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f"+
    "\0\u32ba\0\53\0\u32e5\0\u3310\0\53\0\u333b\0\u3366\0\u3391"+
    "\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468\0\53\0\u3493\0\u34be"+
    "\0\53\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0\0\u35eb"+
    "\0\u3616\0\u3641\0\u366c\0\53\0\53\0\53\0\u3697\0\u36c2"+
    "\0\u36ed\0\u3718\0\u3743\0\53\0\53\0\53\0\u376e\0\53"+
    "\0\53\0\u3799\0\53\0\u37c4\0\u37ef\0\u381a\0\u3845\0\u3870"+
    "\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\53\0\u3972\0\u399d"+
    "\0\53\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca"+
    "\0\u3af5\0\u3b20\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22"+
    "\0\u3c4d\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a"+
    "\0\53\0\u3da5\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51\0\53\0\53"+
    "\0\53\0\53\0\53\0\53\0\u3e7c\0\u3ea7\0\u3ed2\0\u3efd"+
    "\0\u3f28\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4\0\u3fff\0\u402a\0\u4055"+
    "\0\u4080\0\u40ab\0\u40d6\0\u4101\0\53\0\u412c\0\u4157\0\u4182"+
    "\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u4259\0\u4284\0\u42af\0\u42da"+
    "\0\53\0\u4305\0\u4330\0\u435b\0\53\0\53\0\u4386\0\u43b1"+
    "\0\u43dc\0\u4407\0\53\0\u4432\0\u445d\0\53\0\53\0\53"+
    "\0\u4488\0\u44b3\0\u44de\0\u4509\0\u4534\0\u455f\0\53\0\u458a"+
    "\0\u45b5\0\53\0\53\0\u45e0\0\u460b\0\u4636\0\53\0\u4661"+
    "\0\53\0\u468c\0\u46b7\0\u46e2\0\u470d\0\u4738\0\u4763\0\53"+
    "\0\u478e\0\u47b9\0\53\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890"+
    "\0\u48bb\0\53\0\u48e6\0\u4911\0\u493c\0\u4967\0\53\0\u4992"+
    "\0\53\0\u49bd\0\u49e8\0\53\0\u4a13\0\u4a3e\0\u4a69\0\53"+
    "\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40\0\u4b6b\0\53\0\53"+
    "\0\u4b96\0\53\0\u4bc1\0\u4bec\0\53\0\u4c17\0\u4c42\0\u4c6d"+
    "\0\53\0\u4c98\0\u4cc3\0\u4cee\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a"+
    "\0\u4dc5\0\u4df0\0\53\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7"+
    "\0\u4ef2\0\u4f1d\0\u4f48\0\u4f73\0\53\0\u4f9e\0\53\0\53"+
    "\0\u4fc9\0\u4ff4\0\u501f\0\53\0\53\0\53\0\u504a\0\53"+
    "\0\u5075\0\u50a0\0\u50cb\0\u50f6\0\53\0\u5121\0\u514c\0\53"+
    "\0\u5177\0\u51a2\0\u51cd\0\53\0\u51f8\0\u5223\0\u524e\0\u5279"+
    "\0\u52a4\0\u52cf\0\u52fa\0\u5325\0\u5350\0\u537b\0\u53a6\0\53"+
    "\0\u53d1\0\u53fc\0\u5427\0\u5452\0\u547d\0\u54a8\0\u54d3\0\u54fe"+
    "\0\u5529\0\u5554\0\u557f\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656"+
    "\0\u5681\0\u56ac\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783\0\u57ae"+
    "\0\u57d9\0\u5804\0\u582f\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906"+
    "\0\u5931\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u5a08\0\u5a33\0\u5a5e"+
    "\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\53\0\u5b35\0\u5b60\0\53"+
    "\0\u5b8b\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u5cb8"+
    "\0\u5ce3\0\u5d0e\0\u5d39\0\u5d64\0\u5d8f\0\u5b0a\0\u5dba\0\u5de5"+
    "\0\u5e10\0\u5e3b\0\u5ce3\0\u5d0e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\5\3\1\5\1\6\1\7\11\3"+
    "\1\2\25\3\54\0\12\3\1\0\11\3\1\0\25\3"+
    "\1\0\3\3\1\6\6\3\1\0\11\3\1\0\25\3"+
    "\1\0\3\3\1\10\6\3\1\0\11\3\1\0\25\3"+
    "\3\0\1\11\1\12\1\13\1\14\1\0\1\15\1\0"+
    "\1\16\1\0\1\17\1\20\4\0\1\21\1\22\2\0"+
    "\1\23\2\0\1\24\1\25\1\0\1\26\7\0\1\27"+
    "\4\0\1\30\2\0\4\3\1\31\5\3\1\0\11\3"+
    "\1\0\25\3\30\0\1\32\25\0\1\33\6\0\1\34"+
    "\2\0\1\35\15\0\1\36\12\0\1\37\7\0\1\40"+
    "\25\0\1\41\25\0\1\42\10\0\1\43\5\0\1\44"+
    "\24\0\1\45\5\0\1\46\1\47\1\50\1\51\3\0"+
    "\1\52\1\0\1\53\1\54\4\0\1\55\1\56\2\0"+
    "\1\57\2\0\1\60\1\61\11\0\1\62\4\0\1\63"+
    "\16\0\1\64\52\0\1\65\41\0\1\66\11\0\1\67"+
    "\13\0\1\70\50\0\1\71\40\0\1\72\13\0\1\73"+
    "\35\0\1\74\57\0\1\75\4\0\1\76\16\0\1\77"+
    "\1\0\1\100\25\0\1\101\64\0\1\102\32\0\1\103"+
    "\12\0\1\104\45\0\1\105\30\0\5\3\1\106\1\107"+
    "\3\3\1\0\11\3\1\0\25\3\14\0\1\110\61\0"+
    "\1\111\57\0\1\112\26\0\1\113\70\0\1\114\60\0"+
    "\1\115\52\0\1\116\44\0\1\117\52\0\1\120\6\0"+
    "\1\121\53\0\1\122\64\0\1\123\30\0\1\124\60\0"+
    "\1\125\25\0\1\126\6\0\1\127\2\0\1\130\15\0"+
    "\1\131\12\0\1\132\7\0\1\133\25\0\1\134\25\0"+
    "\1\135\10\0\1\136\5\0\1\137\24\0\1\140\17\0"+
    "\1\141\52\0\1\142\41\0\1\143\11\0\1\144\13\0"+
    "\1\145\50\0\1\146\40\0\1\147\13\0\1\150\35\0"+
    "\1\151\57\0\1\152\4\0\1\153\16\0\1\154\1\0"+
    "\1\155\25\0\1\156\44\0\1\157\12\0\1\160\45\0"+
    "\1\161\51\0\1\162\36\0\1\163\7\0\1\164\57\0"+
    "\1\165\41\0\1\166\45\0\1\167\23\0\1\170\73\0"+
    "\1\171\4\0\1\172\53\0\1\173\23\0\1\174\50\0"+
    "\1\175\27\0\1\176\75\0\1\177\31\0\1\200\50\0"+
    "\1\201\75\0\1\202\61\0\1\203\20\0\1\204\53\0"+
    "\1\205\24\0\1\206\51\0\1\207\22\0\6\3\1\107"+
    "\3\3\1\0\11\3\1\0\25\3\1\0\7\3\1\210"+
    "\2\3\1\0\11\3\1\0\25\3\27\0\1\211\54\0"+
    "\1\212\51\0\1\213\36\0\1\214\66\0\1\215\51\0"+
    "\1\216\41\0\1\217\65\0\1\220\44\0\1\221\33\0"+
    "\1\222\53\0\1\223\51\0\1\224\64\0\1\225\50\0"+
    "\1\226\61\0\1\227\57\0\1\230\26\0\1\231\70\0"+
    "\1\232\60\0\1\233\52\0\1\234\44\0\1\235\52\0"+
    "\1\236\6\0\1\237\53\0\1\240\64\0\1\241\30\0"+
    "\1\242\52\0\1\243\36\0\1\244\67\0\1\245\41\0"+
    "\1\246\45\0\1\247\23\0\1\250\73\0\1\251\4\0"+
    "\1\252\53\0\1\253\23\0\1\254\50\0\1\255\27\0"+
    "\1\256\75\0\1\257\31\0\1\260\50\0\1\261\75\0"+
    "\1\262\27\0\1\263\53\0\1\264\24\0\1\265\51\0"+
    "\1\266\27\0\1\267\50\0\1\270\65\0\1\271\65\0"+
    "\1\272\50\0\1\273\52\0\1\274\55\0\1\275\44\0"+
    "\1\276\47\0\1\277\33\0\1\300\64\0\1\301\60\0"+
    "\1\302\44\0\1\303\57\0\1\304\34\0\1\305\51\0"+
    "\1\306\64\0\1\307\74\0\1\310\64\0\1\311\52\0"+
    "\1\312\33\0\1\313\42\0\1\314\31\0\7\3\1\315"+
    "\2\3\1\0\11\3\1\0\25\3\23\0\1\316\56\0"+
    "\1\317\27\0\1\320\71\0\1\321\77\0\1\322\53\0"+
    "\1\323\24\0\1\324\54\0\1\325\50\0\1\326\52\0"+
    "\1\327\43\0\1\330\14\0\1\331\36\0\1\332\7\0"+
    "\1\333\56\0\1\334\50\0\1\335\54\0\1\336\51\0"+
    "\1\337\36\0\1\340\66\0\1\341\51\0\1\342\41\0"+
    "\1\343\65\0\1\344\44\0\1\345\33\0\1\346\53\0"+
    "\1\347\51\0\1\350\64\0\1\351\42\0\1\352\50\0"+
    "\1\353\100\0\1\354\50\0\1\355\52\0\1\356\55\0"+
    "\1\357\44\0\1\360\47\0\1\361\33\0\1\362\64\0"+
    "\1\363\60\0\1\364\44\0\1\365\57\0\1\366\34\0"+
    "\1\367\51\0\1\370\64\0\1\371\106\0\1\372\52\0"+
    "\1\373\33\0\1\374\42\0\1\375\34\0\1\376\63\0"+
    "\1\377\55\0\1\u0100\47\0\1\u0101\57\0\1\u0102\2\0"+
    "\1\u0103\47\0\1\u0104\53\0\1\u0105\100\0\1\u0106\32\0"+
    "\1\u0107\35\0\1\u0108\66\0\1\u0109\66\0\1\u010a\31\0"+
    "\1\u010b\51\0\1\u010c\60\0\1\u010d\53\0\1\u010e\61\0"+
    "\1\u010f\37\0\1\u0110\47\0\1\u0111\53\0\1\u0112\54\0"+
    "\1\u0113\25\0\1\u0114\10\u0115\1\3\1\u0115\1\u0114\11\u0115"+
    "\1\u0114\25\u0115\22\0\1\u0116\55\0\1\u0117\52\0\1\u0118"+
    "\52\0\1\u0119\32\0\1\u011a\72\0\1\u011b\52\0\1\u011c"+
    "\31\0\1\u011d\73\0\1\u011e\50\0\1\u011f\51\0\1\u0120"+
    "\60\0\1\u0121\54\0\1\u0122\43\0\1\u0123\56\0\1\u0124"+
    "\27\0\1\u0125\71\0\1\u0126\77\0\1\u0127\53\0\1\u0128"+
    "\24\0\1\u0129\54\0\1\u012a\50\0\1\u012b\52\0\1\u012c"+
    "\43\0\1\u012d\14\0\1\u012e\36\0\1\u012f\7\0\1\u0130"+
    "\56\0\1\u0131\25\0\1\u0132\63\0\1\u0133\52\0\1\u0134"+
    "\57\0\1\u0135\2\0\1\u0136\47\0\1\u0137\53\0\1\u0138"+
    "\100\0\1\u0139\32\0\1\u013a\35\0\1\u013b\66\0\1\u013c"+
    "\66\0\1\u013d\31\0\1\u013e\51\0\1\u013f\60\0\1\u0140"+
    "\53\0\1\u0141\46\0\1\u0142\47\0\1\u0143\53\0\1\u0144"+
    "\54\0\1\u0145\43\0\1\u0146\40\0\1\u0147\67\0\1\u0148"+
    "\76\0\1\u0149\37\0\1\u014a\24\0\1\u014b\75\0\1\u014c"+
    "\1\u014d\47\0\1\u014e\20\0\1\u014f\12\0\1\u0150\71\0"+
    "\1\u0151\54\0\1\u0152\1\u0153\36\0\1\u0154\44\0\1\u0155"+
    "\75\0\1\u0156\43\0\1\u0157\60\0\1\u0158\63\0\1\u0159"+
    "\26\0\1\u015a\53\0\1\u015b\34\0\11\u0114\1\0\41\u0114"+
    "\25\0\1\u015c\52\0\1\u015d\52\0\1\u015e\33\0\1\u015f"+
    "\75\0\1\u0160\37\0\1\u0161\57\0\1\u0162\51\0\1\u0163"+
    "\55\0\1\u0164\52\0\1\u0165\52\0\1\u0166\32\0\1\u0167"+
    "\72\0\1\u0168\52\0\1\u0169\31\0\1\u016a\73\0\1\u016b"+
    "\50\0\1\u016c\51\0\1\u016d\60\0\1\u016e\54\0\1\u016f"+
    "\36\0\1\u0170\40\0\1\u0171\113\0\1\u0172\37\0\1\u0173"+
    "\24\0\1\u0174\76\0\1\u0175\47\0\1\u0176\20\0\1\u0177"+
    "\12\0\1\u0178\71\0\1\u0179\55\0\1\u017a\36\0\1\u017b"+
    "\44\0\1\u017c\75\0\1\u017d\43\0\1\u017e\60\0\1\u017f"+
    "\37\0\1\u0180\53\0\1\u0181\65\0\1\u0182\44\0\1\u0183"+
    "\43\0\1\u0184\61\0\1\u0185\60\0\1\u0186\52\0\1\u0187"+
    "\52\0\1\u0188\67\0\1\u0189\20\0\1\u018a\53\0\1\u018b"+
    "\66\0\1\u018c\67\0\1\u018d\27\0\1\u018e\35\0\1\u018f"+
    "\110\0\1\u0190\33\0\1\u0191\73\0\1\u0192\46\0\1\u0193"+
    "\43\0\1\u0194\23\0\1\u0195\71\0\1\u0196\54\0\1\u0197"+
    "\52\0\1\u0198\52\0\1\u0199\52\0\1\u019a\52\0\1\u019b"+
    "\52\0\1\u019c\33\0\1\u019d\75\0\1\u019e\37\0\1\u019f"+
    "\57\0\1\u01a0\60\0\1\u01a1\44\0\1\u01a2\52\0\1\u01a3"+
    "\60\0\1\u01a4\52\0\1\u01a5\67\0\1\u01a6\20\0\1\u01a7"+
    "\53\0\1\u01a8\103\0\1\u01a9\27\0\1\u01aa\35\0\1\u01ab"+
    "\110\0\1\u01ac\33\0\1\u01ad\73\0\1\u01ae\37\0\1\u01af"+
    "\23\0\1\u01b0\100\0\1\u01b1\52\0\1\u01b2\35\0\1\u01b3"+
    "\64\0\1\u01b4\37\0\1\u01b5\54\0\1\u01b6\40\0\1\u01b7"+
    "\115\0\1\u01b8\30\0\1\u01b9\33\0\1\u01ba\50\0\1\u01bb"+
    "\115\0\1\u01bc\30\0\1\u01bd\52\0\1\u01be\31\0\1\u01bf"+
    "\115\0\1\u01c0\46\0\1\u01c1\12\0\1\u01c2\74\0\1\u01c3"+
    "\71\0\1\u01c4\31\0\1\u01c5\54\0\1\u01c6\52\0\1\u01c7"+
    "\52\0\1\u01c8\57\0\1\u01c9\52\0\1\u01ca\47\0\1\u01cb"+
    "\37\0\1\u01cc\54\0\1\u01cd\103\0\1\u01ce\30\0\1\u01cf"+
    "\33\0\1\u01d0\113\0\1\u01d1\30\0\1\u01d2\52\0\1\u01d3"+
    "\31\0\1\u01d4\115\0\1\u01d5\6\0\1\u01d6\74\0\1\u01d7"+
    "\50\0\1\u01d8\54\0\1\u01d9\43\0\1\u01da\50\0\1\u01db"+
    "\42\0\1\u01dc\52\0\1\u01dd\77\0\1\u01de\44\0\1\u01df"+
    "\54\0\1\u01e0\56\0\1\u01e1\44\0\1\u01e2\54\0\1\u01e3"+
    "\50\0\1\u01e4\47\0\1\u01e5\36\0\1\u01e6\52\0\1\u01e7"+
    "\112\0\1\u01e8\31\0\1\u01e9\54\0\1\u01ea\41\0\1\u01eb"+
    "\42\0\1\u01ec\52\0\1\u01ed\71\0\1\u01ee\54\0\1\u01ef"+
    "\50\0\1\u01f0\54\0\1\u01f1\50\0\1\u01f2\33\0\1\u01f3"+
    "\73\0\1\u01f4\44\0\1\u01f5\50\0\1\u01f6\66\0\1\u01f7"+
    "\46\0\1\u01f8\45\0\1\u01f9\76\0\1\u01fa\26\0\1\u01fb"+
    "\76\0\1\u01fc\52\0\1\u01fd\37\0\1\u01fe\46\0\1\u01ff"+
    "\52\0\1\u0200\31\0\1\u0201\73\0\1\u0202\42\0\1\u0203"+
    "\66\0\1\u0204\46\0\1\u0205\71\0\1\u0206\52\0\1\u0207"+
    "\52\0\1\u0208\33\0\1\u0209\34\0\1\u020a\51\0\1\u020b"+
    "\112\0\1\u020c\16\0\1\u020d\44\0\1\u020e\60\0\1\u020f"+
    "\44\0\1\u0210\52\0\1\u0211\70\0\1\u0212\55\0\1\u0213"+
    "\33\0\1\u0214\112\0\1\u0215\10\0\1\u0216\52\0\1\u0217"+
    "\52\0\1\u0218\51\0\1\u0219\53\0\1\u021a\62\0\1\u021b"+
    "\53\0\1\u021c\62\0\1\u021d\42\0\1\u021e\62\0\1\u021f"+
    "\52\0\1\u0220\31\0\1\u0221\52\0\1\u0222\62\0\1\u0223"+
    "\63\0\1\u0224\52\0\1\u0225\52\0\1\u0226\47\0\1\u0227"+
    "\55\0\1\u0228\50\0\1\u0229\43\0\1\u022a\52\0\1\u022b"+
    "\53\0\1\u022c\62\0\1\u022d\50\0\1\u022e\52\0\1\u022f"+
    "\54\0\1\u0230\50\0\1\u0231\52\0\1\u0232\73\0\1\u0233"+
    "\33\0\1\u0234\37\0\1\u0235\62\0\1\u0236\52\0\1\u0237"+
    "\44\0\1\u0238\45\0\1\u0239\66\0\1\u023a\52\0\1\u023b"+
    "\52\0\1\u023c\53\0\1\u023d\40\0\1\u023e\52\0\1\u023f"+
    "\65\0\1\u0240\30\0\1\u0241\6\0\1\u0242\1\u0243\46\0"+
    "\1\u0244\52\0\1\u0245\47\0\1\u0242\52\0\1\u0246\62\0"+
    "\1\u0247\62\0\1\u0248\52\0\1\u0249\33\0\1\u024a\62\0"+
    "\1\u024b\36\0\1\u024c\1\0\1\u024d\3\u024c\1\0\1\u024c"+
    "\1\0\1\u024e\1\u024f\4\u024c\1\0\3\u024c\2\0\6\u024c"+
    "\1\0\16\u024c\1\0\1\u0250\1\0\1\u0251\3\u0250\1\0"+
    "\1\u0250\1\0\1\u0252\1\u0253\4\u0250\1\0\3\u0250\2\0"+
    "\6\u0250\1\0\16\u0250\6\0\1\u0254\1\u0255\61\0\1\164"+
    "\35\0\1\u024c\1\0\1\u024d\3\u024c\1\0\1\u024c\1\0"+
    "\1\u024e\1\0\4\u024c\1\0\3\u024c\1\u0256\1\0\6\u024c"+
    "\1\0\16\u024c\1\0\1\u024c\1\0\1\u024d\1\u024e\2\u024c"+
    "\1\0\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0\3\u024c"+
    "\1\u0256\1\0\6\u024c\1\0\16\u024c\1\0\1\u024c\1\0"+
    "\1\u024d\1\u0257\2\u024c\1\0\1\u024c\1\0\1\u024e\1\0"+
    "\4\u024c\1\0\3\u024c\1\u0256\1\0\6\u024c\1\0\16\u024c"+
    "\15\0\1\u0258\36\0\1\u0250\1\0\1\u0251\3\u0250\1\0"+
    "\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0\3\u0250\1\u0259"+
    "\1\0\6\u0250\1\0\16\u0250\1\0\1\u0250\1\0\1\u0251"+
    "\1\u0252\2\u0250\1\0\1\u0250\1\0\1\u0252\1\0\4\u0250"+
    "\1\0\3\u0250\1\u0259\1\0\6\u0250\1\0\16\u0250\1\0"+
    "\1\u0250\1\0\1\u0251\1\u025a\2\u0250\1\0\1\u0250\1\0"+
    "\1\u0252\1\0\4\u0250\1\0\3\u0250\1\u0259\1\0\6\u0250"+
    "\1\0\16\u0250\26\0\1\u025b\33\0\1\u0255\53\0\1\u025c"+
    "\62\0\1\u025d\33\0\1\u024c\1\0\1\u024d\1\u024c\1\u025e"+
    "\1\u024c\1\0\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0"+
    "\3\u024c\1\u0256\1\0\6\u024c\1\0\16\u024c\32\0\1\u025f"+
    "\40\0\1\u0260\33\0\1\u0250\1\0\1\u0251\1\u0250\1\u0261"+
    "\1\u0250\1\0\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0"+
    "\3\u0250\1\u0259\1\0\6\u0250\1\0\16\u0250\15\0\1\u0262"+
    "\45\0\1\u0263\52\0\1\u0264\43\0\1\u024c\1\0\1\u024d"+
    "\2\u024c\1\u0265\1\u0266\1\u024c\1\0\1\u024e\1\0\4\u024c"+
    "\1\0\3\u024c\1\u0256\1\0\6\u024c\1\0\16\u024c\31\0"+
    "\1\u0267\31\0\1\u0268\43\0\1\u0250\1\0\1\u0251\2\u0250"+
    "\1\u0269\1\u026a\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0"+
    "\3\u0250\1\u0259\1\0\6\u0250\1\0\16\u0250\27\0\1\u026b"+
    "\23\0\11\u026c\1\0\41\u026c\25\0\1\u026d\26\0\1\u024c"+
    "\1\0\1\u024d\3\u024c\1\u0266\1\u024c\1\0\1\u024e\1\0"+
    "\4\u024c\1\0\3\u024c\1\u0256\1\0\6\u024c\1\0\16\u024c"+
    "\10\0\1\u026e\75\0\1\u026f\44\0\1\u0270\26\0\1\u0250"+
    "\1\0\1\u0251\3\u0250\1\u026a\1\u0250\1\0\1\u0252\1\0"+
    "\4\u0250\1\0\3\u0250\1\u0259\1\0\6\u0250\1\0\16\u0250"+
    "\10\0\1\u0271\65\0\1\u0272\27\0\11\u026c\1\0\12\u026c"+
    "\1\u0273\26\u026c\10\0\1\u0274\65\0\1\u0275\37\0\1\u0276"+
    "\72\0\1\u0277\22\0\11\u026c\1\0\6\u026c\1\u0278\3\u026c"+
    "\1\u0273\26\u026c\11\u0279\1\0\41\u0279\27\0\1\u014c\23\0"+
    "\11\u027a\1\0\41\u027a\27\0\1\u0152\23\0\10\u026c\1\u027b"+
    "\1\0\12\u026c\1\u0273\26\u026c\11\u0279\1\0\12\u0279\1\u027c"+
    "\26\u0279\11\u027a\1\0\12\u027a\1\u027d\26\u027a\11\u026c\1\0"+
    "\12\u026c\1\u0273\1\u027e\25\u026c\11\u0279\1\0\6\u0279\1\u027f"+
    "\3\u0279\1\u027c\26\u0279\11\u027a\1\0\6\u027a\1\u0280\3\u027a"+
    "\1\u027d\26\u027a\10\u0279\1\u0281\1\0\12\u0279\1\u027c\26\u0279"+
    "\10\u027a\1\u0282\1\0\12\u027a\1\u027d\26\u027a\11\u0279\1\0"+
    "\12\u0279\1\u027c\1\u0283\25\u0279\11\u027a\1\0\12\u027a\1\u027d"+
    "\1\u0284\25\u027a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24166];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\20\0\1\1\54\0\2\1\100\0"+
    "\1\1\65\0\1\11\16\0\1\1\7\0\1\11\5\0"+
    "\1\11\24\0\1\11\22\0\1\11\14\0\1\11\2\0"+
    "\1\11\2\1\1\0\3\11\1\0\2\11\1\0\1\11"+
    "\13\0\1\11\5\0\1\11\5\0\1\11\13\0\1\11"+
    "\2\0\1\11\10\0\1\11\2\0\1\11\12\0\3\11"+
    "\5\0\3\11\1\0\2\11\1\0\1\11\12\0\1\11"+
    "\2\0\1\11\27\0\1\11\5\0\6\11\20\0\1\11"+
    "\13\0\1\11\3\0\2\11\4\0\1\11\2\0\3\11"+
    "\6\0\1\11\2\0\2\11\3\0\1\11\1\0\1\11"+
    "\6\0\1\11\2\0\1\11\6\0\1\11\4\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\6\0\2\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\11\0\1\11"+
    "\11\0\1\11\1\0\2\11\3\0\3\11\1\0\1\11"+
    "\4\0\1\11\2\0\1\11\3\0\1\11\13\0\1\11"+
    "\54\0\1\11\2\0\1\11\15\0\1\1\4\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { lexeme=yytext(); return AperturaCopyright;
          }
        case 82: break;
        case 76: 
          { lexeme=yytext(); return AperturaInformalTable;
          }
        case 83: break;
        case 56: 
          { lexeme=yytext(); return AperturaAbstract;
          }
        case 84: break;
        case 3: 
          { lexeme=yytext(); return AperturaRow;
          }
        case 85: break;
        case 29: 
          { lexeme=yytext(); return CierreTitulo;
          }
        case 86: break;
        case 4: 
          { lexeme=yytext(); return AperturaPara;
          }
        case 87: break;
        case 70: 
          { lexeme=yytext(); return AperturaMediaObject;
          }
        case 88: break;
        case 78: 
          { lexeme=yytext(); return EncabezadoXML;
          }
        case 89: break;
        case 72: 
          { lexeme=yytext(); return CierreVideoobject;
          }
        case 90: break;
        case 69: 
          { lexeme=yytext(); return AperturaVideobject;
          }
        case 91: break;
        case 18: 
          { lexeme=yytext(); return CierreSeccion;
          }
        case 92: break;
        case 57: 
          { lexeme=yytext(); return CierreListItem;
          }
        case 93: break;
        case 38: 
          { lexeme=yytext(); return AperturaSurname;
          }
        case 94: break;
        case 64: 
          { lexeme=yytext(); return CierreFirstName;
          }
        case 95: break;
        case 52: 
          { lexeme=yytext(); return CierreAddress;
          }
        case 96: break;
        case 77: 
          { lexeme=yytext(); return CierreInformalTable;
          }
        case 97: break;
        case 74: 
          { lexeme=yytext(); return AperturaItemizedList;
          }
        case 98: break;
        case 9: 
          { lexeme=yytext(); return AperturaYear;
          }
        case 99: break;
        case 24: 
          { lexeme=yytext(); return AperturaHolder;
          }
        case 100: break;
        case 43: 
          { lexeme=yytext(); return AperturaEntrybl;
          }
        case 101: break;
        case 41: 
          { lexeme=yytext(); return CierreStreet;
          }
        case 102: break;
        case 80: 
          { lexeme=yytext(); return Videodata;
          }
        case 103: break;
        case 37: 
          { lexeme=yytext(); return AperturaSection;
          }
        case 104: break;
        case 67: 
          { lexeme=yytext(); return CierreSimpleSect;
          }
        case 105: break;
        case 60: 
          { lexeme=yytext(); return AperturaFirstName;
          }
        case 106: break;
        case 71: 
          { lexeme=yytext(); return CierreImageobject;
          }
        case 107: break;
        case 12: 
          { lexeme=yytext(); return AperturaTfoot;
          }
        case 108: break;
        case 55: 
          { lexeme=yytext(); return AperturaEmphasis;
          }
        case 109: break;
        case 47: 
          { lexeme=yytext(); return CierreSimPara;
          }
        case 110: break;
        case 28: 
          { lexeme=yytext(); return CierreTfoot;
          }
        case 111: break;
        case 13: 
          { lexeme=yytext(); return AperturaTitulo;
          }
        case 112: break;
        case 65: 
          { lexeme=yytext(); return CierreImportant;
          }
        case 113: break;
        case 75: 
          { lexeme=yytext(); return CierreItemizedList;
          }
        case 114: break;
        case 59: 
          { lexeme=yytext(); return CierreAbstract;
          }
        case 115: break;
        case 42: 
          { lexeme=yytext(); return CierreAuthor;
          }
        case 116: break;
        case 73: 
          { lexeme=yytext(); return CierreMediaObject;
          }
        case 117: break;
        case 53: 
          { lexeme=yytext(); return CierreComment;
          }
        case 118: break;
        case 16: 
          { lexeme=yytext(); return AperturaState;
          }
        case 119: break;
        case 20: 
          { lexeme=yytext(); return CierreCity;
          }
        case 120: break;
        case 32: 
          { lexeme=yytext(); return CierreState;
          }
        case 121: break;
        case 44: 
          { lexeme=yytext(); return AperturaArticulo;
          }
        case 122: break;
        case 5: 
          { lexeme=yytext(); return AperturaSeccion;
          }
        case 123: break;
        case 40: 
          { lexeme=yytext(); return CierreTgroup;
          }
        case 124: break;
        case 19: 
          { lexeme=yytext(); return CierreInfo;
          }
        case 125: break;
        case 45: 
          { lexeme=yytext(); return AperturaAddress;
          }
        case 126: break;
        case 63: 
          { lexeme=yytext(); return AperturaSimpleSect;
          }
        case 127: break;
        case 61: 
          { lexeme=yytext(); return AperturaImportant;
          }
        case 128: break;
        case 26: 
          { lexeme=yytext(); return AperturaStreet;
          }
        case 129: break;
        case 14: 
          { lexeme=yytext(); return AperturaTbody;
          }
        case 130: break;
        case 1: 
          { lexeme=yytext(); return Texto;
          }
        case 131: break;
        case 30: 
          { lexeme=yytext(); return CierreTbody;
          }
        case 132: break;
        case 36: 
          { lexeme=yytext(); return AperturaSimPara;
          }
        case 133: break;
        case 33: 
          { lexeme=yytext(); return CierreEntry;
          }
        case 134: break;
        case 11: 
          { lexeme=yytext(); return AperturaThead;
          }
        case 135: break;
        case 2: 
          { return Linea;
          }
        case 136: break;
        case 35: 
          { lexeme=yytext(); return AperturaAuthor;
          }
        case 137: break;
        case 27: 
          { lexeme=yytext(); return CierreThead;
          }
        case 138: break;
        case 58: 
          { lexeme=yytext(); return CierreEmphasis;
          }
        case 139: break;
        case 17: 
          { lexeme=yytext(); return CierrePara;
          }
        case 140: break;
        case 54: 
          { lexeme=yytext(); return AperturaListItem;
          }
        case 141: break;
        case 66: 
          { lexeme=yytext(); return CierreCopyright;
          }
        case 142: break;
        case 8: 
          { lexeme=yytext(); return AperturaCity;
          }
        case 143: break;
        case 15: 
          { lexeme=yytext(); return AperturaPhone;
          }
        case 144: break;
        case 34: 
          { lexeme=yytext(); return CierreEmail;
          }
        case 145: break;
        case 22: 
          { lexeme=yytext(); return AperturaEntry;
          }
        case 146: break;
        case 31: 
          { lexeme=yytext(); return CierrePhone;
          }
        case 147: break;
        case 25: 
          { lexeme=yytext(); return AperturaTgroup;
          }
        case 148: break;
        case 49: 
          { lexeme=yytext(); return CierreSurname;
          }
        case 149: break;
        case 7: 
          { lexeme=yytext(); return AperturaInfo;
          }
        case 150: break;
        case 6: 
          { lexeme=yytext(); return CierreRow;
          }
        case 151: break;
        case 68: 
          { lexeme=yytext(); return AperturaImageobject;
          }
        case 152: break;
        case 23: 
          { lexeme=yytext(); return AperturaEmail;
          }
        case 153: break;
        case 81: 
          { lexeme=yytext(); return Link;
          }
        case 154: break;
        case 46: 
          { lexeme=yytext(); return AperturaComment;
          }
        case 155: break;
        case 51: 
          { lexeme=yytext(); return CierreArticulo;
          }
        case 156: break;
        case 50: 
          { lexeme=yytext(); return CierreEntrybl;
          }
        case 157: break;
        case 39: 
          { lexeme=yytext(); return CierreHolder;
          }
        case 158: break;
        case 48: 
          { lexeme=yytext(); return CierreSection;
          }
        case 159: break;
        case 21: 
          { lexeme=yytext(); return CierreYear;
          }
        case 160: break;
        case 10: 
          { lexeme=yytext(); return Url;
          }
        case 161: break;
        case 79: 
          { lexeme=yytext(); return Imagedata;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
