/* The following code was generated by JFlex 1.4.3 on 23/5/23, 08:23 */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 23/5/23, 08:23 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/neatbeans-lexer/src/main/java/code/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\11\2\0\1\2\22\0\1\20\1\34\1\24\3\2"+
    "\2\0\4\2\1\1\1\2\1\1\1\10\12\1\1\7\1\2\1\13"+
    "\1\2\1\25\2\2\3\1\1\35\26\1\3\2\1\0\1\1\1\0"+
    "\1\31\1\41\1\36\1\27\1\23\1\12\1\33\1\3\1\15\1\42"+
    "\1\17\1\14\1\32\1\16\1\30\1\5\1\1\1\22\1\6\1\4"+
    "\1\43\1\26\1\44\1\21\1\37\1\40\3\2\43\0\1\2\25\0"+
    "\1\2\7\0\1\2\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\1\1\2\3\1\20\0\1\1\54\0\2\1\100\0"+
    "\1\1\65\0\1\3\16\0\1\1\7\0\1\4\5\0"+
    "\1\5\24\0\1\6\22\0\1\7\14\0\1\10\2\0"+
    "\1\11\2\12\1\0\1\13\1\14\1\15\1\0\1\16"+
    "\1\17\1\0\1\20\13\0\1\21\5\0\1\22\5\0"+
    "\1\23\13\0\1\24\2\0\1\25\10\0\1\26\2\0"+
    "\1\27\12\0\1\30\1\31\1\32\5\0\1\33\1\34"+
    "\1\35\1\0\1\36\1\37\1\0\1\40\12\0\1\41"+
    "\2\0\1\42\27\0\1\43\5\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\20\0\1\52\13\0\1\53\3\0"+
    "\1\54\1\55\4\0\1\56\2\0\1\57\1\60\1\61"+
    "\6\0\1\62\2\0\1\63\1\64\3\0\1\65\1\0"+
    "\1\66\6\0\1\67\2\0\1\70\6\0\1\71\4\0"+
    "\1\72\1\0\1\73\2\0\1\74\3\0\1\75\6\0"+
    "\1\76\1\77\1\0\1\100\2\0\1\101\3\0\1\102"+
    "\11\0\1\103\11\0\1\104\1\0\1\105\1\106\3\0"+
    "\1\107\1\110\1\111\1\0\1\112\4\0\1\113\2\0"+
    "\1\114\3\0\1\115\13\0\1\116\54\0\1\117\2\0"+
    "\1\120\15\0\1\121\4\0\1\117\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\112\0\224\0\271\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e"+
    "\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456"+
    "\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e"+
    "\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6"+
    "\0\u06cb\0\u06f0\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce"+
    "\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6"+
    "\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e"+
    "\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46"+
    "\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e"+
    "\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96"+
    "\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe"+
    "\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6"+
    "\0\u100b\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e"+
    "\0\u1133\0\u1158\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236"+
    "\0\u125b\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e"+
    "\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486"+
    "\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae"+
    "\0\u15d3\0\u15f8\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6"+
    "\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe"+
    "\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926"+
    "\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e"+
    "\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\45\0\u1b2c\0\u1b51"+
    "\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79"+
    "\0\u1c9e\0\u1cc3\0\u1ce8\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1"+
    "\0\u1dc6\0\u1deb\0\u1e10\0\u1e35\0\45\0\u1e5a\0\u1e7f\0\u1ea4"+
    "\0\u1ec9\0\u1eee\0\45\0\u1f13\0\u1f38\0\u1f5d\0\u1f82\0\u1fa7"+
    "\0\u1fcc\0\u1ff1\0\u2016\0\u203b\0\u2060\0\u2085\0\u20aa\0\u20cf"+
    "\0\u20f4\0\u2119\0\u213e\0\u2163\0\u2188\0\u21ad\0\u21d2\0\45"+
    "\0\u21f7\0\u221c\0\u2241\0\u2266\0\u228b\0\u22b0\0\u22d5\0\u22fa"+
    "\0\u231f\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8\0\u23fd\0\u2422"+
    "\0\u2447\0\u246c\0\45\0\u2491\0\u24b6\0\u24db\0\u2500\0\u2525"+
    "\0\u254a\0\u256f\0\u2594\0\u25b9\0\u25de\0\u2603\0\u2628\0\45"+
    "\0\u264d\0\u2672\0\45\0\u2697\0\u1d32\0\u26bc\0\45\0\45"+
    "\0\45\0\u26e1\0\45\0\45\0\u2706\0\45\0\u272b\0\u2750"+
    "\0\u2775\0\u279a\0\u27bf\0\u27e4\0\u2809\0\u282e\0\u2853\0\u2878"+
    "\0\u289d\0\45\0\u28c2\0\u28e7\0\u290c\0\u2931\0\u2956\0\45"+
    "\0\u297b\0\u29a0\0\u29c5\0\u29ea\0\u2a0f\0\45\0\u2a34\0\u2a59"+
    "\0\u2a7e\0\u2aa3\0\u2ac8\0\u2aed\0\u2b12\0\u2b37\0\u2b5c\0\u2b81"+
    "\0\u2ba6\0\45\0\u2bcb\0\u2bf0\0\45\0\u2c15\0\u2c3a\0\u2c5f"+
    "\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2d18\0\45\0\u2d3d\0\u2d62"+
    "\0\45\0\u2d87\0\u2dac\0\u2dd1\0\u2df6\0\u2e1b\0\u2e40\0\u2e65"+
    "\0\u2e8a\0\u2eaf\0\u2ed4\0\45\0\45\0\45\0\u2ef9\0\u2f1e"+
    "\0\u2f43\0\u2f68\0\u2f8d\0\45\0\45\0\45\0\u2fb2\0\45"+
    "\0\45\0\u2fd7\0\45\0\u2ffc\0\u3021\0\u3046\0\u306b\0\u3090"+
    "\0\u30b5\0\u30da\0\u30ff\0\u3124\0\u3149\0\45\0\u316e\0\u3193"+
    "\0\45\0\u31b8\0\u31dd\0\u3202\0\u3227\0\u324c\0\u3271\0\u3296"+
    "\0\u32bb\0\u32e0\0\u3305\0\u332a\0\u334f\0\u3374\0\u3399\0\u33be"+
    "\0\u33e3\0\u3408\0\u342d\0\u3452\0\u3477\0\u349c\0\u34c1\0\u34e6"+
    "\0\45\0\u350b\0\u3530\0\u3555\0\u357a\0\u359f\0\45\0\45"+
    "\0\45\0\45\0\45\0\45\0\u35c4\0\u35e9\0\u360e\0\u3633"+
    "\0\u3658\0\u367d\0\u36a2\0\u36c7\0\u36ec\0\u3711\0\u3736\0\u375b"+
    "\0\u3780\0\u37a5\0\u37ca\0\u37ef\0\45\0\u3814\0\u3839\0\u385e"+
    "\0\u3883\0\u38a8\0\u38cd\0\u38f2\0\u3917\0\u393c\0\u3961\0\u3986"+
    "\0\45\0\u39ab\0\u39d0\0\u39f5\0\45\0\45\0\u3a1a\0\u3a3f"+
    "\0\u3a64\0\u3a89\0\45\0\u3aae\0\u3ad3\0\45\0\45\0\45"+
    "\0\u3af8\0\u3b1d\0\u3b42\0\u3b67\0\u3b8c\0\u3bb1\0\45\0\u3bd6"+
    "\0\u3bfb\0\45\0\45\0\u3c20\0\u3c45\0\u3c6a\0\45\0\u3c8f"+
    "\0\45\0\u3cb4\0\u3cd9\0\u3cfe\0\u3d23\0\u3d48\0\u3d6d\0\45"+
    "\0\u3d92\0\u3db7\0\45\0\u3ddc\0\u3e01\0\u3e26\0\u3e4b\0\u3e70"+
    "\0\u3e95\0\45\0\u3eba\0\u3edf\0\u3f04\0\u3f29\0\45\0\u3f4e"+
    "\0\45\0\u3f73\0\u3f98\0\45\0\u3fbd\0\u3fe2\0\u4007\0\45"+
    "\0\u402c\0\u4051\0\u4076\0\u409b\0\u40c0\0\u40e5\0\45\0\45"+
    "\0\u410a\0\45\0\u412f\0\u4154\0\45\0\u4179\0\u419e\0\u41c3"+
    "\0\45\0\u41e8\0\u420d\0\u4232\0\u4257\0\u427c\0\u42a1\0\u42c6"+
    "\0\u42eb\0\u4310\0\45\0\u4335\0\u435a\0\u437f\0\u43a4\0\u43c9"+
    "\0\u43ee\0\u4413\0\u4438\0\u445d\0\45\0\u4482\0\45\0\45"+
    "\0\u44a7\0\u44cc\0\u44f1\0\45\0\45\0\45\0\u4516\0\45"+
    "\0\u453b\0\u4560\0\u4585\0\u45aa\0\45\0\u45cf\0\u45f4\0\45"+
    "\0\u4619\0\u463e\0\u4663\0\45\0\u4688\0\u46ad\0\u46d2\0\u46f7"+
    "\0\u471c\0\u4741\0\u4766\0\u478b\0\u47b0\0\u47d5\0\u47fa\0\45"+
    "\0\u481f\0\u4844\0\u4869\0\u488e\0\u48b3\0\u48d8\0\u48fd\0\u4922"+
    "\0\u4947\0\u496c\0\u4991\0\u49b6\0\u49db\0\u4a00\0\u4a25\0\u4a4a"+
    "\0\u4a6f\0\u4a94\0\u4ab9\0\u4ade\0\u4b03\0\u4b28\0\u4b4d\0\u4b72"+
    "\0\u4b97\0\u4bbc\0\u4be1\0\u4c06\0\u4c2b\0\u4c50\0\u4c75\0\u4c9a"+
    "\0\u4cbf\0\u4ce4\0\u4d09\0\u4d2e\0\u4d53\0\u4d78\0\u4d9d\0\u4dc2"+
    "\0\u4de7\0\u4e0c\0\u4e31\0\u4e56\0\45\0\u4e7b\0\u4ea0\0\45"+
    "\0\u4ec5\0\u4eea\0\u4f0f\0\u4f34\0\u4f59\0\u4f7e\0\u4fa3\0\u4fc8"+
    "\0\u4fed\0\u5012\0\u5037\0\u505c\0\u5081\0\u4e56\0\u50a6\0\u50cb"+
    "\0\u50f0\0\u5115\0\u4fed\0\u5012";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\5\3\1\5\1\6\1\7\11\3"+
    "\1\2\17\3\46\0\12\3\1\0\11\3\1\0\17\3"+
    "\1\0\3\3\1\6\6\3\1\0\11\3\1\0\17\3"+
    "\1\0\3\3\1\10\6\3\1\0\11\3\1\0\17\3"+
    "\3\0\1\11\1\12\1\13\1\14\1\0\1\15\1\0"+
    "\1\16\1\0\1\17\1\20\4\0\1\21\1\22\2\0"+
    "\1\23\2\0\1\24\1\25\1\0\1\26\1\0\1\27"+
    "\1\30\6\0\4\3\1\31\5\3\1\0\11\3\1\0"+
    "\17\3\30\0\1\32\17\0\1\33\6\0\1\34\2\0"+
    "\1\35\15\0\1\36\5\0\1\37\6\0\1\40\25\0"+
    "\1\41\17\0\1\42\10\0\1\43\5\0\1\44\17\0"+
    "\1\45\4\0\1\46\1\47\1\50\1\51\3\0\1\52"+
    "\1\0\1\53\1\54\4\0\1\55\1\56\2\0\1\57"+
    "\2\0\1\60\1\61\3\0\1\62\1\63\22\0\1\64"+
    "\44\0\1\65\33\0\1\66\11\0\1\67\13\0\1\70"+
    "\42\0\1\71\32\0\1\72\13\0\1\73\27\0\1\74"+
    "\51\0\1\75\4\0\1\76\11\0\1\77\1\0\1\100"+
    "\24\0\1\101\56\0\1\102\24\0\1\103\12\0\1\104"+
    "\37\0\1\105\22\0\5\3\1\106\1\107\3\3\1\0"+
    "\11\3\1\0\17\3\14\0\1\110\53\0\1\111\51\0"+
    "\1\112\20\0\1\113\62\0\1\114\52\0\1\115\44\0"+
    "\1\116\36\0\1\117\44\0\1\120\6\0\1\121\45\0"+
    "\1\122\50\0\1\123\30\0\1\124\52\0\1\125\17\0"+
    "\1\126\6\0\1\127\2\0\1\130\15\0\1\131\5\0"+
    "\1\132\6\0\1\133\25\0\1\134\17\0\1\135\10\0"+
    "\1\136\5\0\1\137\17\0\1\140\16\0\1\141\44\0"+
    "\1\142\33\0\1\143\11\0\1\144\13\0\1\145\42\0"+
    "\1\146\32\0\1\147\13\0\1\150\27\0\1\151\51\0"+
    "\1\152\4\0\1\153\11\0\1\154\1\0\1\155\24\0"+
    "\1\156\36\0\1\157\12\0\1\160\37\0\1\161\43\0"+
    "\1\162\30\0\1\163\7\0\1\164\51\0\1\165\33\0"+
    "\1\166\37\0\1\167\23\0\1\170\57\0\1\171\4\0"+
    "\1\172\45\0\1\173\23\0\1\174\42\0\1\175\21\0"+
    "\1\176\67\0\1\177\23\0\1\200\42\0\1\201\67\0"+
    "\1\202\45\0\1\203\20\0\1\204\45\0\1\205\24\0"+
    "\1\206\43\0\1\207\14\0\6\3\1\107\3\3\1\0"+
    "\11\3\1\0\17\3\1\0\7\3\1\210\2\3\1\0"+
    "\11\3\1\0\17\3\27\0\1\211\46\0\1\212\43\0"+
    "\1\213\30\0\1\214\60\0\1\215\43\0\1\216\33\0"+
    "\1\217\57\0\1\220\36\0\1\221\25\0\1\222\45\0"+
    "\1\223\43\0\1\224\56\0\1\225\42\0\1\226\53\0"+
    "\1\227\51\0\1\230\20\0\1\231\62\0\1\232\52\0"+
    "\1\233\44\0\1\234\36\0\1\235\44\0\1\236\6\0"+
    "\1\237\45\0\1\240\50\0\1\241\30\0\1\242\44\0"+
    "\1\243\30\0\1\244\61\0\1\245\33\0\1\246\37\0"+
    "\1\247\23\0\1\250\57\0\1\251\4\0\1\252\45\0"+
    "\1\253\23\0\1\254\42\0\1\255\21\0\1\256\67\0"+
    "\1\257\23\0\1\260\42\0\1\261\67\0\1\262\21\0"+
    "\1\263\45\0\1\264\24\0\1\265\43\0\1\266\21\0"+
    "\1\267\42\0\1\270\57\0\1\271\57\0\1\272\42\0"+
    "\1\273\44\0\1\274\47\0\1\275\36\0\1\276\41\0"+
    "\1\277\25\0\1\300\56\0\1\301\52\0\1\302\36\0"+
    "\1\303\51\0\1\304\26\0\1\305\43\0\1\306\56\0"+
    "\1\307\65\0\1\310\45\0\1\311\44\0\1\312\37\0"+
    "\1\313\34\0\1\314\23\0\7\3\1\315\2\3\1\0"+
    "\11\3\1\0\17\3\23\0\1\316\50\0\1\317\21\0"+
    "\1\320\63\0\1\321\64\0\1\322\40\0\1\323\30\0"+
    "\1\324\46\0\1\325\42\0\1\326\44\0\1\327\35\0"+
    "\1\330\14\0\1\331\30\0\1\332\7\0\1\333\50\0"+
    "\1\334\42\0\1\335\46\0\1\336\43\0\1\337\30\0"+
    "\1\340\60\0\1\341\43\0\1\342\33\0\1\343\57\0"+
    "\1\344\36\0\1\345\25\0\1\346\45\0\1\347\43\0"+
    "\1\350\56\0\1\351\34\0\1\352\42\0\1\353\72\0"+
    "\1\354\42\0\1\355\44\0\1\356\47\0\1\357\36\0"+
    "\1\360\41\0\1\361\25\0\1\362\56\0\1\363\52\0"+
    "\1\364\36\0\1\365\51\0\1\366\26\0\1\367\43\0"+
    "\1\370\56\0\1\371\66\0\1\372\44\0\1\373\37\0"+
    "\1\374\34\0\1\375\26\0\1\376\55\0\1\377\47\0"+
    "\1\u0100\41\0\1\u0101\51\0\1\u0102\2\0\1\u0103\41\0"+
    "\1\u0104\45\0\1\u0105\60\0\1\u0106\36\0\1\u0107\27\0"+
    "\1\u0108\60\0\1\u0109\52\0\1\u010a\31\0\1\u010b\43\0"+
    "\1\u010c\52\0\1\u010d\45\0\1\u010e\17\0\1\u010f\65\0"+
    "\1\u0110\41\0\1\u0111\45\0\1\u0112\46\0\1\u0113\17\0"+
    "\1\u0114\10\u0115\1\3\1\u0115\1\u0114\11\u0115\1\u0114\17\u0115"+
    "\22\0\1\u0116\47\0\1\u0117\44\0\1\u0118\44\0\1\u0119"+
    "\24\0\1\u011a\64\0\1\u011b\44\0\1\u011c\23\0\1\u011d"+
    "\65\0\1\u011e\42\0\1\u011f\43\0\1\u0120\52\0\1\u0121"+
    "\46\0\1\u0122\35\0\1\u0123\50\0\1\u0124\21\0\1\u0125"+
    "\63\0\1\u0126\64\0\1\u0127\40\0\1\u0128\30\0\1\u0129"+
    "\46\0\1\u012a\42\0\1\u012b\44\0\1\u012c\35\0\1\u012d"+
    "\14\0\1\u012e\30\0\1\u012f\7\0\1\u0130\50\0\1\u0131"+
    "\17\0\1\u0132\55\0\1\u0133\44\0\1\u0134\51\0\1\u0135"+
    "\2\0\1\u0136\41\0\1\u0137\45\0\1\u0138\60\0\1\u0139"+
    "\36\0\1\u013a\27\0\1\u013b\60\0\1\u013c\52\0\1\u013d"+
    "\31\0\1\u013e\43\0\1\u013f\52\0\1\u0140\45\0\1\u0141"+
    "\40\0\1\u0142\41\0\1\u0143\45\0\1\u0144\46\0\1\u0145"+
    "\35\0\1\u0146\32\0\1\u0147\61\0\1\u0148\63\0\1\u0149"+
    "\36\0\1\u014a\16\0\1\u014b\67\0\1\u014c\1\u014d\41\0"+
    "\1\u014e\13\0\1\u014f\11\0\1\u0150\63\0\1\u0151\46\0"+
    "\1\u0152\1\u0153\30\0\1\u0154\36\0\1\u0155\67\0\1\u0156"+
    "\35\0\1\u0157\52\0\1\u0158\53\0\1\u0159\22\0\1\u015a"+
    "\45\0\1\u015b\26\0\11\u0114\1\0\33\u0114\25\0\1\u015c"+
    "\44\0\1\u015d\44\0\1\u015e\25\0\1\u015f\67\0\1\u0160"+
    "\31\0\1\u0161\51\0\1\u0162\43\0\1\u0163\47\0\1\u0164"+
    "\44\0\1\u0165\44\0\1\u0166\24\0\1\u0167\64\0\1\u0168"+
    "\44\0\1\u0169\23\0\1\u016a\65\0\1\u016b\42\0\1\u016c"+
    "\43\0\1\u016d\52\0\1\u016e\46\0\1\u016f\30\0\1\u0170"+
    "\32\0\1\u0171\100\0\1\u0172\36\0\1\u0173\16\0\1\u0174"+
    "\70\0\1\u0175\41\0\1\u0176\13\0\1\u0177\11\0\1\u0178"+
    "\63\0\1\u0179\47\0\1\u017a\30\0\1\u017b\36\0\1\u017c"+
    "\67\0\1\u017d\35\0\1\u017e\52\0\1\u017f\31\0\1\u0180"+
    "\45\0\1\u0181\57\0\1\u0182\36\0\1\u0183\35\0\1\u0184"+
    "\53\0\1\u0185\52\0\1\u0186\44\0\1\u0187\44\0\1\u0188"+
    "\54\0\1\u0189\17\0\1\u018a\45\0\1\u018b\60\0\1\u018c"+
    "\54\0\1\u018d\26\0\1\u018e\27\0\1\u018f\74\0\1\u0190"+
    "\33\0\1\u0191\60\0\1\u0192\10\0\1\u0193\72\0\1\u0194"+
    "\15\0\1\u0195\63\0\1\u0196\46\0\1\u0197\44\0\1\u0198"+
    "\44\0\1\u0199\44\0\1\u019a\44\0\1\u019b\44\0\1\u019c"+
    "\25\0\1\u019d\67\0\1\u019e\31\0\1\u019f\51\0\1\u01a0"+
    "\52\0\1\u01a1\36\0\1\u01a2\44\0\1\u01a3\52\0\1\u01a4"+
    "\44\0\1\u01a5\54\0\1\u01a6\17\0\1\u01a7\45\0\1\u01a8"+
    "\70\0\1\u01a9\26\0\1\u01aa\27\0\1\u01ab\74\0\1\u01ac"+
    "\33\0\1\u01ad\60\0\1\u01ae\36\0\1\u01af\15\0\1\u01b0"+
    "\72\0\1\u01b1\44\0\1\u01b2\27\0\1\u01b3\56\0\1\u01b4"+
    "\31\0\1\u01b5\46\0\1\u01b6\32\0\1\u01b7\102\0\1\u01b8"+
    "\27\0\1\u01b9\25\0\1\u01ba\42\0\1\u01bb\102\0\1\u01bc"+
    "\27\0\1\u01bd\44\0\1\u01be\23\0\1\u01bf\102\0\1\u01c0"+
    "\25\0\1\u01c1\24\0\1\u01c2\66\0\1\u01c3\55\0\1\u01c4"+
    "\31\0\1\u01c5\46\0\1\u01c6\44\0\1\u01c7\44\0\1\u01c8"+
    "\51\0\1\u01c9\44\0\1\u01ca\41\0\1\u01cb\31\0\1\u01cc"+
    "\46\0\1\u01cd\70\0\1\u01ce\27\0\1\u01cf\25\0\1\u01d0"+
    "\100\0\1\u01d1\27\0\1\u01d2\44\0\1\u01d3\23\0\1\u01d4"+
    "\102\0\1\u01d5\5\0\1\u01d6\66\0\1\u01d7\42\0\1\u01d8"+
    "\46\0\1\u01d9\35\0\1\u01da\42\0\1\u01db\34\0\1\u01dc"+
    "\44\0\1\u01dd\71\0\1\u01de\36\0\1\u01df\46\0\1\u01e0"+
    "\50\0\1\u01e1\36\0\1\u01e2\46\0\1\u01e3\42\0\1\u01e4"+
    "\41\0\1\u01e5\30\0\1\u01e6\44\0\1\u01e7\76\0\1\u01e8"+
    "\31\0\1\u01e9\46\0\1\u01ea\33\0\1\u01eb\34\0\1\u01ec"+
    "\44\0\1\u01ed\63\0\1\u01ee\46\0\1\u01ef\42\0\1\u01f0"+
    "\46\0\1\u01f1\42\0\1\u01f2\25\0\1\u01f3\65\0\1\u01f4"+
    "\36\0\1\u01f5\42\0\1\u01f6\60\0\1\u01f7\40\0\1\u01f8"+
    "\37\0\1\u01f9\62\0\1\u01fa\26\0\1\u01fb\62\0\1\u01fc"+
    "\44\0\1\u01fd\37\0\1\u01fe\40\0\1\u01ff\44\0\1\u0200"+
    "\23\0\1\u0201\65\0\1\u0202\34\0\1\u0203\60\0\1\u0204"+
    "\40\0\1\u0205\55\0\1\u0206\44\0\1\u0207\44\0\1\u0208"+
    "\33\0\1\u0209\26\0\1\u020a\43\0\1\u020b\77\0\1\u020c"+
    "\15\0\1\u020d\36\0\1\u020e\52\0\1\u020f\36\0\1\u0210"+
    "\44\0\1\u0211\62\0\1\u0212\47\0\1\u0213\25\0\1\u0214"+
    "\77\0\1\u0215\7\0\1\u0216\44\0\1\u0217\44\0\1\u0218"+
    "\43\0\1\u0219\45\0\1\u021a\54\0\1\u021b\45\0\1\u021c"+
    "\54\0\1\u021d\34\0\1\u021e\54\0\1\u021f\44\0\1\u0220"+
    "\23\0\1\u0221\44\0\1\u0222\54\0\1\u0223\55\0\1\u0224"+
    "\44\0\1\u0225\44\0\1\u0226\41\0\1\u0227\47\0\1\u0228"+
    "\42\0\1\u0229\35\0\1\u022a\44\0\1\u022b\45\0\1\u022c"+
    "\54\0\1\u022d\42\0\1\u022e\44\0\1\u022f\46\0\1\u0230"+
    "\42\0\1\u0231\44\0\1\u0232\57\0\1\u0233\33\0\1\u0234"+
    "\31\0\1\u0235\54\0\1\u0236\44\0\1\u0237\36\0\1\u0238"+
    "\37\0\1\u0239\60\0\1\u023a\44\0\1\u023b\44\0\1\u023c"+
    "\45\0\1\u023d\32\0\1\u023e\44\0\1\u023f\57\0\1\u0240"+
    "\22\0\1\u0241\6\0\1\u0242\1\u0243\40\0\1\u0244\44\0"+
    "\1\u0245\41\0\1\u0242\44\0\1\u0246\54\0\1\u0247\54\0"+
    "\1\u0248\44\0\1\u0249\25\0\1\u024a\54\0\1\u024b\30\0"+
    "\1\u024c\1\0\1\u024d\3\u024c\1\0\1\u024c\1\0\1\u024e"+
    "\1\u024f\4\u024c\1\0\3\u024c\2\0\6\u024c\1\0\10\u024c"+
    "\1\0\1\u0250\1\0\1\u0251\3\u0250\1\0\1\u0250\1\0"+
    "\1\u0252\1\u0253\4\u0250\1\0\3\u0250\2\0\6\u0250\1\0"+
    "\10\u0250\6\0\1\u0254\1\u0255\53\0\1\164\27\0\1\u024c"+
    "\1\0\1\u024d\3\u024c\1\0\1\u024c\1\0\1\u024e\1\0"+
    "\4\u024c\1\0\3\u024c\1\u0256\1\0\6\u024c\1\0\10\u024c"+
    "\1\0\1\u024c\1\0\1\u024d\1\u024e\2\u024c\1\0\1\u024c"+
    "\1\0\1\u024e\1\0\4\u024c\1\0\3\u024c\1\u0256\1\0"+
    "\6\u024c\1\0\10\u024c\1\0\1\u024c\1\0\1\u024d\1\u0257"+
    "\2\u024c\1\0\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0"+
    "\3\u024c\1\u0256\1\0\6\u024c\1\0\10\u024c\15\0\1\u0258"+
    "\30\0\1\u0250\1\0\1\u0251\3\u0250\1\0\1\u0250\1\0"+
    "\1\u0252\1\0\4\u0250\1\0\3\u0250\1\u0259\1\0\6\u0250"+
    "\1\0\10\u0250\1\0\1\u0250\1\0\1\u0251\1\u0252\2\u0250"+
    "\1\0\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0\3\u0250"+
    "\1\u0259\1\0\6\u0250\1\0\10\u0250\1\0\1\u0250\1\0"+
    "\1\u0251\1\u025a\2\u0250\1\0\1\u0250\1\0\1\u0252\1\0"+
    "\4\u0250\1\0\3\u0250\1\u0259\1\0\6\u0250\1\0\10\u0250"+
    "\26\0\1\u025b\25\0\1\u0255\45\0\1\u025c\54\0\1\u025d"+
    "\25\0\1\u024c\1\0\1\u024d\1\u024c\1\u025e\1\u024c\1\0"+
    "\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0\3\u024c\1\u0256"+
    "\1\0\6\u024c\1\0\10\u024c\32\0\1\u025f\32\0\1\u0260"+
    "\25\0\1\u0250\1\0\1\u0251\1\u0250\1\u0261\1\u0250\1\0"+
    "\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0\3\u0250\1\u0259"+
    "\1\0\6\u0250\1\0\10\u0250\15\0\1\u0262\37\0\1\u0263"+
    "\44\0\1\u0264\35\0\1\u024c\1\0\1\u024d\2\u024c\1\u0265"+
    "\1\u0266\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0\3\u024c"+
    "\1\u0256\1\0\6\u024c\1\0\10\u024c\31\0\1\u0267\23\0"+
    "\1\u0268\35\0\1\u0250\1\0\1\u0251\2\u0250\1\u0269\1\u026a"+
    "\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0\3\u0250\1\u0259"+
    "\1\0\6\u0250\1\0\10\u0250\27\0\1\u026b\15\0\11\u026c"+
    "\1\0\33\u026c\25\0\1\u026d\20\0\1\u024c\1\0\1\u024d"+
    "\3\u024c\1\u0266\1\u024c\1\0\1\u024e\1\0\4\u024c\1\0"+
    "\3\u024c\1\u0256\1\0\6\u024c\1\0\10\u024c\10\0\1\u026e"+
    "\67\0\1\u026f\36\0\1\u0270\20\0\1\u0250\1\0\1\u0251"+
    "\3\u0250\1\u026a\1\u0250\1\0\1\u0252\1\0\4\u0250\1\0"+
    "\3\u0250\1\u0259\1\0\6\u0250\1\0\10\u0250\10\0\1\u0271"+
    "\57\0\1\u0272\21\0\11\u026c\1\0\12\u026c\1\u0273\20\u026c"+
    "\10\0\1\u0274\57\0\1\u0275\31\0\1\u0276\64\0\1\u0277"+
    "\14\0\11\u026c\1\0\6\u026c\1\u0278\3\u026c\1\u0273\20\u026c"+
    "\11\u0279\1\0\33\u0279\27\0\1\u014c\15\0\11\u027a\1\0"+
    "\33\u027a\27\0\1\u0152\15\0\10\u026c\1\u027b\1\0\12\u026c"+
    "\1\u0273\20\u026c\11\u0279\1\0\12\u0279\1\u027c\20\u0279\11\u027a"+
    "\1\0\12\u027a\1\u027d\20\u027a\11\u026c\1\0\12\u026c\1\u0273"+
    "\1\u027e\17\u026c\11\u0279\1\0\6\u0279\1\u027f\3\u0279\1\u027c"+
    "\20\u0279\11\u027a\1\0\6\u027a\1\u0280\3\u027a\1\u027d\20\u027a"+
    "\10\u0279\1\u0281\1\0\12\u0279\1\u027c\20\u0279\10\u027a\1\u0282"+
    "\1\0\12\u027a\1\u027d\20\u027a\11\u0279\1\0\12\u0279\1\u027c"+
    "\1\u0283\17\u0279\11\u027a\1\0\12\u027a\1\u027d\1\u0284\17\u027a";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20794];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\6\1\20\0\1\1\54\0\2\1\100\0"+
    "\1\1\65\0\1\11\16\0\1\1\7\0\1\11\5\0"+
    "\1\11\24\0\1\11\22\0\1\11\14\0\1\11\2\0"+
    "\1\11\2\1\1\0\3\11\1\0\2\11\1\0\1\11"+
    "\13\0\1\11\5\0\1\11\5\0\1\11\13\0\1\11"+
    "\2\0\1\11\10\0\1\11\2\0\1\11\12\0\3\11"+
    "\5\0\3\11\1\0\2\11\1\0\1\11\12\0\1\11"+
    "\2\0\1\11\27\0\1\11\5\0\6\11\20\0\1\11"+
    "\13\0\1\11\3\0\2\11\4\0\1\11\2\0\3\11"+
    "\6\0\1\11\2\0\2\11\3\0\1\11\1\0\1\11"+
    "\6\0\1\11\2\0\1\11\6\0\1\11\4\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\6\0\2\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\11\0\1\11"+
    "\11\0\1\11\1\0\2\11\3\0\3\11\1\0\1\11"+
    "\4\0\1\11\2\0\1\11\3\0\1\11\13\0\1\11"+
    "\54\0\1\11\2\0\1\11\15\0\1\1\4\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[644];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { lexeme=yytext(); return AperturaCopyright;
          }
        case 82: break;
        case 76: 
          { lexeme=yytext(); return AperturaInformalTable;
          }
        case 83: break;
        case 56: 
          { lexeme=yytext(); return AperturaAbstract;
          }
        case 84: break;
        case 3: 
          { lexeme=yytext(); return AperturaRow;
          }
        case 85: break;
        case 29: 
          { lexeme=yytext(); return CierreTitulo;
          }
        case 86: break;
        case 4: 
          { lexeme=yytext(); return AperturaPara;
          }
        case 87: break;
        case 70: 
          { lexeme=yytext(); return AperturaMediaObject;
          }
        case 88: break;
        case 78: 
          { lexeme=yytext(); return EncabezadoXML;
          }
        case 89: break;
        case 72: 
          { lexeme=yytext(); return CierreVideoobject;
          }
        case 90: break;
        case 69: 
          { lexeme=yytext(); return AperturaVideobject;
          }
        case 91: break;
        case 18: 
          { lexeme=yytext(); return CierreSeccion;
          }
        case 92: break;
        case 57: 
          { lexeme=yytext(); return CierreListItem;
          }
        case 93: break;
        case 38: 
          { lexeme=yytext(); return AperturaSurname;
          }
        case 94: break;
        case 64: 
          { lexeme=yytext(); return CierreFirstName;
          }
        case 95: break;
        case 52: 
          { lexeme=yytext(); return CierreAddress;
          }
        case 96: break;
        case 77: 
          { lexeme=yytext(); return CierreInformalTable;
          }
        case 97: break;
        case 74: 
          { lexeme=yytext(); return AperturaItemizedList;
          }
        case 98: break;
        case 9: 
          { lexeme=yytext(); return AperturaYear;
          }
        case 99: break;
        case 24: 
          { lexeme=yytext(); return AperturaHolder;
          }
        case 100: break;
        case 43: 
          { lexeme=yytext(); return AperturaEntrybl;
          }
        case 101: break;
        case 41: 
          { lexeme=yytext(); return CierreStreet;
          }
        case 102: break;
        case 80: 
          { lexeme=yytext(); return Videodata;
          }
        case 103: break;
        case 37: 
          { lexeme=yytext(); return AperturaSection;
          }
        case 104: break;
        case 67: 
          { lexeme=yytext(); return CierreSimpleSect;
          }
        case 105: break;
        case 60: 
          { lexeme=yytext(); return AperturaFirstName;
          }
        case 106: break;
        case 71: 
          { lexeme=yytext(); return CierreImageobject;
          }
        case 107: break;
        case 12: 
          { lexeme=yytext(); return AperturaTfoot;
          }
        case 108: break;
        case 55: 
          { lexeme=yytext(); return AperturaEmphasis;
          }
        case 109: break;
        case 47: 
          { lexeme=yytext(); return CierreSimPara;
          }
        case 110: break;
        case 28: 
          { lexeme=yytext(); return CierreTfoot;
          }
        case 111: break;
        case 13: 
          { lexeme=yytext(); return AperturaTitulo;
          }
        case 112: break;
        case 65: 
          { lexeme=yytext(); return CierreImportant;
          }
        case 113: break;
        case 75: 
          { lexeme=yytext(); return CierreItemizedList;
          }
        case 114: break;
        case 59: 
          { lexeme=yytext(); return CierreAbstract;
          }
        case 115: break;
        case 42: 
          { lexeme=yytext(); return CierreAuthor;
          }
        case 116: break;
        case 73: 
          { lexeme=yytext(); return CierreMediaObject;
          }
        case 117: break;
        case 53: 
          { lexeme=yytext(); return CierreComment;
          }
        case 118: break;
        case 16: 
          { lexeme=yytext(); return AperturaState;
          }
        case 119: break;
        case 20: 
          { lexeme=yytext(); return CierreCity;
          }
        case 120: break;
        case 32: 
          { lexeme=yytext(); return CierreState;
          }
        case 121: break;
        case 44: 
          { lexeme=yytext(); return AperturaArticulo;
          }
        case 122: break;
        case 5: 
          { lexeme=yytext(); return AperturaSeccion;
          }
        case 123: break;
        case 40: 
          { lexeme=yytext(); return CierreTgroup;
          }
        case 124: break;
        case 19: 
          { lexeme=yytext(); return CierreInfo;
          }
        case 125: break;
        case 45: 
          { lexeme=yytext(); return AperturaAddress;
          }
        case 126: break;
        case 63: 
          { lexeme=yytext(); return AperturaSimpleSect;
          }
        case 127: break;
        case 61: 
          { lexeme=yytext(); return AperturaImportant;
          }
        case 128: break;
        case 26: 
          { lexeme=yytext(); return AperturaStreet;
          }
        case 129: break;
        case 14: 
          { lexeme=yytext(); return AperturaTbody;
          }
        case 130: break;
        case 1: 
          { lexeme=yytext(); return Texto;
          }
        case 131: break;
        case 30: 
          { lexeme=yytext(); return CierreTbody;
          }
        case 132: break;
        case 36: 
          { lexeme=yytext(); return AperturaSimPara;
          }
        case 133: break;
        case 33: 
          { lexeme=yytext(); return CierreEntry;
          }
        case 134: break;
        case 11: 
          { lexeme=yytext(); return AperturaThead;
          }
        case 135: break;
        case 2: 
          { return Linea;
          }
        case 136: break;
        case 35: 
          { lexeme=yytext(); return AperturaAuthor;
          }
        case 137: break;
        case 27: 
          { lexeme=yytext(); return CierreThead;
          }
        case 138: break;
        case 58: 
          { lexeme=yytext(); return CierreEmphasis;
          }
        case 139: break;
        case 17: 
          { lexeme=yytext(); return CierrePara;
          }
        case 140: break;
        case 54: 
          { lexeme=yytext(); return AperturaListItem;
          }
        case 141: break;
        case 66: 
          { lexeme=yytext(); return CierreCopyright;
          }
        case 142: break;
        case 8: 
          { lexeme=yytext(); return AperturaCity;
          }
        case 143: break;
        case 15: 
          { lexeme=yytext(); return AperturaPhone;
          }
        case 144: break;
        case 34: 
          { lexeme=yytext(); return CierreEmail;
          }
        case 145: break;
        case 22: 
          { lexeme=yytext(); return AperturaEntry;
          }
        case 146: break;
        case 31: 
          { lexeme=yytext(); return CierrePhone;
          }
        case 147: break;
        case 25: 
          { lexeme=yytext(); return AperturaTgroup;
          }
        case 148: break;
        case 49: 
          { lexeme=yytext(); return CierreSurname;
          }
        case 149: break;
        case 7: 
          { lexeme=yytext(); return AperturaInfo;
          }
        case 150: break;
        case 6: 
          { lexeme=yytext(); return CierreRow;
          }
        case 151: break;
        case 68: 
          { lexeme=yytext(); return AperturaImageobject;
          }
        case 152: break;
        case 23: 
          { lexeme=yytext(); return AperturaEmail;
          }
        case 153: break;
        case 81: 
          { lexeme=yytext(); return Link;
          }
        case 154: break;
        case 46: 
          { lexeme=yytext(); return AperturaComment;
          }
        case 155: break;
        case 51: 
          { lexeme=yytext(); return CierreArticulo;
          }
        case 156: break;
        case 50: 
          { lexeme=yytext(); return CierreEntrybl;
          }
        case 157: break;
        case 39: 
          { lexeme=yytext(); return CierreHolder;
          }
        case 158: break;
        case 48: 
          { lexeme=yytext(); return CierreSection;
          }
        case 159: break;
        case 21: 
          { lexeme=yytext(); return CierreYear;
          }
        case 160: break;
        case 10: 
          { lexeme=yytext(); return Url;
          }
        case 161: break;
        case 79: 
          { lexeme=yytext(); return Imagedata;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
