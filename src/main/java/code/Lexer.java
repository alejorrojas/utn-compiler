/* The following code was generated by JFlex 1.4.3 on 13/5/23, 16:39 */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 13/5/23, 16:39 from the specification file
 * <tt>C:/Users/alejo/Desktop/proyectos/utn/neatbeans-lexer/src/main/java/code/lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\37\2\0\1\3\22\0\1\3\13\0\1\3\2\0"+
    "\1\15\12\2\2\0\1\4\1\0\1\14\2\0\32\1\4\0\1\1"+
    "\1\0\1\5\1\26\1\11\1\24\1\13\1\20\1\33\1\31\1\10"+
    "\1\27\1\34\1\12\1\22\1\17\1\21\1\25\1\1\1\6\1\16"+
    "\1\7\1\30\1\36\1\35\1\1\1\32\1\23\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\175\0\1\5"+
    "\111\0\1\6\2\0\1\7\13\0\1\10\41\0\1\11"+
    "\3\0\1\12\2\0\1\13\5\0\1\14\1\15\1\16"+
    "\1\17\11\0\1\20\1\21\1\0\1\22\14\0\1\23"+
    "\2\0\1\24\13\0\1\25\3\0\1\26\2\0\1\27"+
    "\1\0\1\30\7\0\1\31\6\0\1\32\1\33\16\0"+
    "\1\34\1\35\1\36\1\37\10\0\1\40\1\0\1\41"+
    "\1\0\1\42\7\0\1\43\2\0\1\44\6\0\1\45"+
    "\2\0\1\46\1\47\6\0\1\50\2\0\1\51\4\0"+
    "\1\52\1\53\11\0\1\54\6\0\1\55\1\0\1\56"+
    "\1\0\1\57\1\60\4\0\1\61\6\0\1\62\1\63"+
    "\1\64\1\65\5\0\1\66\2\0\1\67\1\0\1\70"+
    "\1\0\1\71\1\72\14\0\1\73\1\74\1\75\5\0"+
    "\1\76\1\77\5\0\1\100\6\0\1\101\3\0\1\102"+
    "\1\103\1\0\1\104\2\0\1\105\2\0\1\106\2\0"+
    "\1\107\3\0\1\110\2\0\1\111\1\112\1\113\3\0"+
    "\1\114\1\115\1\116\1\117\1\120\1\0\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\40\0\100\0\140\0\200\0\140\0\240\0\300"+
    "\0\340\0\u0100\0\u0120\0\u0140\0\u0160\0\u0180\0\u01a0\0\u01c0"+
    "\0\u01e0\0\u0200\0\u0220\0\u0240\0\u0260\0\u0280\0\u02a0\0\u02c0"+
    "\0\u02e0\0\u0300\0\u0320\0\u0340\0\u0360\0\u0380\0\u03a0\0\u03c0"+
    "\0\u03e0\0\u0400\0\u0420\0\u0440\0\u0460\0\u0480\0\u04a0\0\u04c0"+
    "\0\u04e0\0\u0500\0\u0520\0\u0540\0\u0560\0\u0580\0\u05a0\0\u05c0"+
    "\0\u05e0\0\u0600\0\u0620\0\u0640\0\u0660\0\u0680\0\u06a0\0\u06c0"+
    "\0\u06e0\0\u0700\0\u0720\0\u0740\0\u0760\0\u0780\0\u07a0\0\u07c0"+
    "\0\u07e0\0\u0800\0\u0820\0\u0840\0\u0860\0\u0880\0\u08a0\0\u08c0"+
    "\0\u08e0\0\u0900\0\u0920\0\u0940\0\u0960\0\u0980\0\u09a0\0\u09c0"+
    "\0\u09e0\0\u0a00\0\u0a20\0\u0a40\0\u0a60\0\u0a80\0\u0aa0\0\u0ac0"+
    "\0\u0ae0\0\u0b00\0\u0b20\0\u0b40\0\u0b60\0\u0b80\0\u0ba0\0\u0bc0"+
    "\0\u0be0\0\u0c00\0\u0c20\0\u0c40\0\u0c60\0\u0c80\0\u0ca0\0\u0cc0"+
    "\0\u0ce0\0\u0d00\0\u0d20\0\u0d40\0\u0d60\0\u0d80\0\u0da0\0\u0dc0"+
    "\0\u0de0\0\u0e00\0\u0e20\0\u0e40\0\u0e60\0\u0e80\0\u0ea0\0\u0ec0"+
    "\0\u0ee0\0\u0f00\0\u0f20\0\u0f40\0\u0f60\0\u0f80\0\u0fa0\0\u0fc0"+
    "\0\u0fe0\0\u1000\0\u1020\0\40\0\u1040\0\u1060\0\u1080\0\u10a0"+
    "\0\u10c0\0\u10e0\0\u1100\0\u1120\0\u1140\0\u1160\0\u1180\0\u11a0"+
    "\0\u11c0\0\u11e0\0\u1200\0\u1220\0\u1240\0\u1260\0\u1280\0\u12a0"+
    "\0\u12c0\0\u12e0\0\u1300\0\u1320\0\u1340\0\u1360\0\u1380\0\u13a0"+
    "\0\u13c0\0\u13e0\0\u1400\0\u1420\0\u1440\0\u1460\0\u1480\0\u14a0"+
    "\0\u14c0\0\u14e0\0\u1500\0\u1520\0\u1540\0\u1560\0\u1580\0\u15a0"+
    "\0\u15c0\0\u15e0\0\u1600\0\u1620\0\u1640\0\u1660\0\u1680\0\u16a0"+
    "\0\u16c0\0\u16e0\0\u1700\0\u1720\0\u1740\0\u1760\0\u1780\0\u17a0"+
    "\0\u17c0\0\u17e0\0\u1800\0\u1820\0\u1840\0\u1860\0\u1880\0\u18a0"+
    "\0\u18c0\0\u18e0\0\u1900\0\u1920\0\u1940\0\40\0\u1960\0\u1980"+
    "\0\40\0\u19a0\0\u19c0\0\u19e0\0\u1a00\0\u1a20\0\u1a40\0\u1a60"+
    "\0\u1a80\0\u1aa0\0\u1ac0\0\u1ae0\0\40\0\u1b00\0\u1b20\0\u1b40"+
    "\0\u1b60\0\u1b80\0\u1ba0\0\u1bc0\0\u1be0\0\u1c00\0\u1c20\0\u1c40"+
    "\0\u1c60\0\u1c80\0\u1ca0\0\u1cc0\0\u1ce0\0\u1d00\0\u1d20\0\u1d40"+
    "\0\u1d60\0\u1d80\0\u1da0\0\u1dc0\0\u1de0\0\u1e00\0\u1e20\0\u1e40"+
    "\0\u1e60\0\u1e80\0\u1ea0\0\u1ec0\0\u1ee0\0\u1f00\0\40\0\u1f20"+
    "\0\u1f40\0\u1f60\0\40\0\u1f80\0\u1fa0\0\40\0\u1fc0\0\u1fe0"+
    "\0\u2000\0\u2020\0\u2040\0\40\0\40\0\40\0\40\0\u2060"+
    "\0\u2080\0\u20a0\0\u20c0\0\u20e0\0\u2100\0\u2120\0\u2140\0\u2160"+
    "\0\40\0\40\0\u2180\0\40\0\u21a0\0\u21c0\0\u21e0\0\u2200"+
    "\0\u2220\0\u2240\0\u2260\0\u2280\0\u22a0\0\u22c0\0\u22e0\0\u2300"+
    "\0\40\0\u2320\0\u2340\0\40\0\u2360\0\u2380\0\u23a0\0\u23c0"+
    "\0\u23e0\0\u2400\0\u2420\0\u2440\0\u2460\0\u2480\0\u24a0\0\40"+
    "\0\u24c0\0\u24e0\0\u2500\0\40\0\u2520\0\u2540\0\40\0\u2560"+
    "\0\40\0\u2580\0\u25a0\0\u25c0\0\u25e0\0\u2600\0\u2620\0\u2640"+
    "\0\40\0\u2660\0\u2680\0\u26a0\0\u26c0\0\u26e0\0\u2700\0\40"+
    "\0\40\0\u2720\0\u2740\0\u2760\0\u2780\0\u27a0\0\u27c0\0\u27e0"+
    "\0\u2800\0\u2820\0\u2840\0\u2860\0\u2880\0\u28a0\0\u28c0\0\40"+
    "\0\40\0\40\0\40\0\u28e0\0\u2900\0\u2920\0\u2940\0\u2960"+
    "\0\u2980\0\u29a0\0\u29c0\0\40\0\u29e0\0\40\0\u2a00\0\40"+
    "\0\u2a20\0\u2a40\0\u2a60\0\u2a80\0\u2aa0\0\u2ac0\0\u2ae0\0\40"+
    "\0\u2b00\0\u2b20\0\40\0\u2b40\0\u2b60\0\u2b80\0\u2ba0\0\u2bc0"+
    "\0\u2be0\0\40\0\u2c00\0\u2c20\0\40\0\40\0\u2c40\0\u2c60"+
    "\0\u2c80\0\u2ca0\0\u2cc0\0\u2ce0\0\40\0\u2d00\0\u2d20\0\40"+
    "\0\u2d40\0\u2d60\0\u2d80\0\u2da0\0\40\0\40\0\u2dc0\0\u2de0"+
    "\0\u2e00\0\u2e20\0\u2e40\0\u2e60\0\u2e80\0\u2ea0\0\u2ec0\0\40"+
    "\0\u2ee0\0\u2f00\0\u2f20\0\u2f40\0\u2f60\0\u2f80\0\40\0\u2fa0"+
    "\0\40\0\u2fc0\0\40\0\40\0\u2fe0\0\u3000\0\u3020\0\u3040"+
    "\0\40\0\u3060\0\u3080\0\u30a0\0\u30c0\0\u30e0\0\u3100\0\40"+
    "\0\40\0\40\0\40\0\u3120\0\u3140\0\u3160\0\u3180\0\u31a0"+
    "\0\40\0\u31c0\0\u31e0\0\40\0\u3200\0\40\0\u3220\0\40"+
    "\0\40\0\u3240\0\u3260\0\u3280\0\u32a0\0\u32c0\0\u32e0\0\u3300"+
    "\0\u3320\0\u3340\0\u3360\0\u3380\0\u33a0\0\40\0\40\0\40"+
    "\0\u33c0\0\u33e0\0\u3400\0\u3420\0\u3440\0\40\0\40\0\u3460"+
    "\0\u3480\0\u34a0\0\u34c0\0\u34e0\0\40\0\u3500\0\u3520\0\u3540"+
    "\0\u3560\0\u3580\0\u35a0\0\40\0\u35c0\0\u35e0\0\u3600\0\40"+
    "\0\40\0\u3620\0\40\0\u3640\0\u3660\0\40\0\u3680\0\u36a0"+
    "\0\40\0\u36c0\0\u36e0\0\40\0\u3700\0\u3720\0\u3740\0\40"+
    "\0\u3760\0\u3780\0\40\0\40\0\40\0\u37a0\0\u37c0\0\u37e0"+
    "\0\40\0\40\0\40\0\40\0\40\0\u3800\0\40";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\7\3\2\2\21\3"+
    "\1\6\41\0\3\3\1\0\7\3\2\0\22\3\3\0"+
    "\1\4\33\0\1\4\5\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\17\1\0\1\20"+
    "\1\0\1\21\2\0\1\22\3\0\1\23\1\24\3\0"+
    "\1\25\7\0\1\26\15\0\1\27\1\0\1\30\1\0"+
    "\1\31\30\0\1\32\26\0\1\33\7\0\1\34\5\0"+
    "\1\35\2\0\1\36\1\0\1\37\13\0\1\40\7\0"+
    "\1\41\2\0\1\42\25\0\1\43\10\0\1\44\26\0"+
    "\1\45\46\0\1\46\2\0\1\47\22\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\2\0\1\57\1\0"+
    "\1\60\1\0\1\61\2\0\1\62\3\0\1\63\1\64"+
    "\3\0\1\65\10\0\1\66\1\67\2\0\1\70\14\0"+
    "\1\71\17\0\1\72\42\0\1\73\31\0\1\74\23\0"+
    "\1\75\27\0\1\76\31\0\1\77\34\0\1\100\36\0"+
    "\1\101\54\0\1\102\31\0\1\103\30\0\1\104\65\0"+
    "\1\105\11\0\1\106\51\0\1\107\37\0\1\110\31\0"+
    "\1\111\32\0\1\112\44\0\1\113\44\0\1\114\24\0"+
    "\1\115\17\0\1\116\21\0\1\117\52\0\1\120\2\0"+
    "\1\121\30\0\1\122\1\123\27\0\1\124\35\0\1\125"+
    "\17\0\1\126\20\0\1\127\15\0\1\130\1\0\1\131"+
    "\1\0\1\132\30\0\1\133\26\0\1\134\7\0\1\135"+
    "\5\0\1\136\2\0\1\137\1\0\1\140\13\0\1\141"+
    "\7\0\1\142\2\0\1\143\25\0\1\144\10\0\1\145"+
    "\26\0\1\146\46\0\1\147\2\0\1\150\24\0\1\151"+
    "\1\152\2\0\1\153\14\0\1\154\17\0\1\155\42\0"+
    "\1\156\31\0\1\157\23\0\1\160\27\0\1\161\31\0"+
    "\1\162\34\0\1\163\34\0\1\164\1\165\53\0\1\166"+
    "\26\0\1\167\34\0\1\170\37\0\1\171\55\0\1\172"+
    "\21\0\1\173\52\0\1\174\30\0\1\175\32\0\1\176"+
    "\56\0\1\177\23\0\1\200\35\0\1\201\40\0\1\202"+
    "\61\0\1\203\22\0\1\204\35\0\1\205\46\0\1\206"+
    "\42\0\1\207\20\0\1\210\53\0\1\211\40\0\1\212"+
    "\36\0\1\213\51\0\1\214\25\0\1\215\50\0\1\216"+
    "\27\0\1\217\47\0\1\220\14\0\1\221\64\0\1\222"+
    "\11\0\1\223\41\0\1\224\60\0\1\225\15\0\1\226"+
    "\54\0\1\227\31\0\1\230\30\0\1\231\65\0\1\232"+
    "\11\0\1\233\51\0\1\234\37\0\1\235\31\0\1\236"+
    "\32\0\1\237\44\0\1\240\44\0\1\241\24\0\1\242"+
    "\17\0\1\243\21\0\1\244\52\0\1\245\2\0\1\246"+
    "\30\0\1\247\30\0\1\250\35\0\1\251\17\0\1\252"+
    "\17\0\1\253\1\254\53\0\1\255\26\0\1\256\34\0"+
    "\1\257\37\0\1\260\55\0\1\261\21\0\1\262\52\0"+
    "\1\263\30\0\1\264\32\0\1\265\56\0\1\266\22\0"+
    "\1\267\43\0\1\270\51\0\1\271\21\0\1\272\47\0"+
    "\1\273\36\0\1\274\31\0\1\275\34\0\1\276\51\0"+
    "\1\277\44\0\1\300\21\0\1\301\44\0\1\302\35\0"+
    "\1\303\41\0\1\304\32\0\1\305\52\0\1\306\31\0"+
    "\1\307\33\0\1\310\62\0\1\311\31\0\1\312\43\0"+
    "\1\313\17\0\1\314\35\0\1\315\5\0\1\316\36\0"+
    "\1\317\32\0\1\320\45\0\1\321\36\0\1\322\32\0"+
    "\1\323\41\0\1\324\44\0\1\325\54\0\1\326\17\0"+
    "\1\327\32\0\1\330\42\0\1\331\35\0\1\332\40\0"+
    "\1\333\61\0\1\334\22\0\1\335\35\0\1\336\46\0"+
    "\1\337\42\0\1\340\20\0\1\341\53\0\1\342\40\0"+
    "\1\343\36\0\1\344\51\0\1\345\25\0\1\346\50\0"+
    "\1\347\27\0\1\350\47\0\1\351\14\0\1\352\36\0"+
    "\1\353\41\0\1\354\60\0\1\355\15\0\1\356\43\0"+
    "\1\357\51\0\1\360\21\0\1\361\47\0\1\362\36\0"+
    "\1\363\31\0\1\364\34\0\1\365\51\0\1\366\44\0"+
    "\1\367\21\0\1\370\44\0\1\371\37\0\1\372\37\0"+
    "\1\373\31\0\1\374\4\0\1\375\35\0\1\376\3\0"+
    "\1\377\30\0\1\u0100\41\0\1\u0101\35\0\1\u0102\46\0"+
    "\1\u0103\36\0\1\u0104\37\0\1\u0105\40\0\1\u0106\44\0"+
    "\1\u0107\30\0\1\u0108\43\0\1\u0109\26\0\1\u010a\40\0"+
    "\1\u010b\45\0\1\u010c\37\0\1\u010d\37\0\1\u010e\37\0"+
    "\1\u010f\50\0\1\u0110\35\0\1\u0111\36\0\1\u0112\36\0"+
    "\1\u0113\2\0\1\u0114\22\0\1\u0115\47\0\1\u0116\30\0"+
    "\1\u0117\36\0\1\u0118\44\0\1\u0119\37\0\1\u011a\11\0"+
    "\1\u011b\25\0\1\u011c\41\0\1\u011d\32\0\1\u011e\41\0"+
    "\1\u011f\32\0\1\u0120\52\0\1\u0121\31\0\1\u0122\33\0"+
    "\1\u0123\62\0\1\u0124\31\0\1\u0125\43\0\1\u0126\17\0"+
    "\1\u0127\35\0\1\u0128\5\0\1\u0129\36\0\1\u012a\32\0"+
    "\1\u012b\45\0\1\u012c\36\0\1\u012d\32\0\1\u012e\41\0"+
    "\1\u012f\61\0\1\u0130\17\0\1\u0131\32\0\1\u0132\45\0"+
    "\1\u0133\37\0\1\u0134\31\0\1\u0135\4\0\1\u0136\35\0"+
    "\1\u0137\3\0\1\u0138\30\0\1\u0139\41\0\1\u013a\35\0"+
    "\1\u013b\46\0\1\u013c\36\0\1\u013d\37\0\1\u013e\40\0"+
    "\1\u013f\44\0\1\u0140\32\0\1\u0141\32\0\1\u0142\36\0"+
    "\1\u0143\44\0\1\u0144\45\0\1\u0145\40\0\1\u0146\34\0"+
    "\1\u0147\41\0\1\u0148\32\0\1\u0149\31\0\1\u014a\52\0"+
    "\1\u014b\2\0\1\u014c\26\0\1\u014d\42\0\1\u014e\32\0"+
    "\1\u014f\42\0\1\u0150\37\0\1\u0151\36\0\1\u0152\31\0"+
    "\1\u0153\60\0\1\u0154\16\0\1\u0155\37\0\1\u0156\41\0"+
    "\1\u0157\63\0\1\u0158\17\0\1\u0159\36\0\1\u015a\35\0"+
    "\1\u015b\41\0\1\u015c\43\0\1\u015d\26\0\1\u015e\40\0"+
    "\1\u015f\45\0\1\u0160\37\0\1\u0161\37\0\1\u0162\37\0"+
    "\1\u0163\50\0\1\u0164\35\0\1\u0165\36\0\1\u0166\36\0"+
    "\1\u0167\25\0\1\u0168\47\0\1\u0169\30\0\1\u016a\36\0"+
    "\1\u016b\44\0\1\u016c\11\0\1\u016d\25\0\1\u016e\41\0"+
    "\1\u016f\35\0\1\u0170\32\0\1\u0171\36\0\1\u0172\44\0"+
    "\1\u0173\45\0\1\u0174\40\0\1\u0175\34\0\1\u0176\41\0"+
    "\1\u0177\32\0\1\u0178\31\0\1\u0179\52\0\1\u017a\32\0"+
    "\1\u017b\30\0\1\u017c\50\0\1\u017d\40\0\1\u017e\33\0"+
    "\1\u017f\31\0\1\u0180\60\0\1\u0181\25\0\1\u0182\51\0"+
    "\1\u0183\16\0\1\u0184\46\0\1\u0185\37\0\1\u0186\32\0"+
    "\1\u0187\54\0\1\u0188\25\0\1\u0189\54\0\1\u018a\17\0"+
    "\1\u018b\47\0\1\u018c\34\0\1\u018d\54\0\1\u018e\30\0"+
    "\1\u018f\31\0\1\u0190\41\0\1\u0191\34\0\1\u0192\42\0"+
    "\1\u0193\32\0\1\u0194\42\0\1\u0195\37\0\1\u0196\36\0"+
    "\1\u0197\31\0\1\u0198\60\0\1\u0199\16\0\1\u019a\41\0"+
    "\1\u019b\63\0\1\u019c\17\0\1\u019d\36\0\1\u019e\35\0"+
    "\1\u019f\43\0\1\u01a0\30\0\1\u01a1\50\0\1\u01a2\40\0"+
    "\1\u01a3\33\0\1\u01a4\31\0\1\u01a5\60\0\1\u01a6\25\0"+
    "\1\u01a7\51\0\1\u01a8\25\0\1\u01a9\36\0\1\u01aa\40\0"+
    "\1\u01ab\37\0\1\u01ac\45\0\1\u01ad\44\0\1\u01ae\37\0"+
    "\1\u01af\17\0\1\u01b0\44\0\1\u01b1\35\0\1\u01b2\34\0"+
    "\1\u01b3\43\0\1\u01b4\31\0\1\u01b5\41\0\1\u01b6\37\0"+
    "\1\u01b7\44\0\1\u01b8\37\0\1\u01b9\37\0\1\u01ba\37\0"+
    "\1\u01bb\32\0\1\u01bc\54\0\1\u01bd\25\0\1\u01be\54\0"+
    "\1\u01bf\27\0\1\u01c0\34\0\1\u01c1\54\0\1\u01c2\30\0"+
    "\1\u01c3\31\0\1\u01c4\41\0\1\u01c5\35\0\1\u01c6\36\0"+
    "\1\u01c7\40\0\1\u01c8\37\0\1\u01c9\45\0\1\u01ca\44\0"+
    "\1\u01cb\37\0\1\u01cc\21\0\1\u01cd\41\0\1\u01ce\37\0"+
    "\1\u01cf\37\0\1\u01d0\31\0\1\u01d1\42\0\1\u01d2\34\0"+
    "\1\u01d3\43\0\1\u01d4\43\0\1\u01d5\36\0\1\u01d6\37\0"+
    "\1\u01d7\37\0\1\u01d8\35\0\1\u01d9\34\0\1\u01da\43\0"+
    "\1\u01db\33\0\1\u01dc\37\0\1\u01dd\44\0\1\u01de\37\0"+
    "\1\u01df\34\0\1\u01e0\41\0\1\u01e1\37\0\1\u01e2\37\0"+
    "\1\u01e3\33\0\1\u01e4\44\0\1\u01e5\34\0\1\u01e6\37\0"+
    "\1\u01e7\43\0\1\u01e8\40\0\1\u01e9\47\0\1\u01ea\20\0"+
    "\1\u01eb\44\0\1\u01ec\33\0\1\u01ed\34\0\1\u01ee\43\0"+
    "\1\u01ef\42\0\1\u01f0\37\0\1\u01f1\32\0\1\u01f2\44\0"+
    "\1\u01f3\34\0\1\u01f4\37\0\1\u01f5\42\0\1\u01f6\32\0"+
    "\1\u01f7\37\0\1\u01f8\44\0\1\u01f9\32\0\1\u01fa\42\0"+
    "\1\u01fb\41\0\1\u01fc\41\0\1\u01fd\47\0\1\u01fe\20\0"+
    "\1\u01ff\44\0\1\u0200\32\0\1\u0201\37\0\1\u0202\44\0"+
    "\1\u0203\37\0\1\u0204\37\0\1\u0205\36\0\1\u0206\33\0"+
    "\1\u0207\42\0\1\u0208\41\0\1\u0209\37\0\1\u020a\37\0"+
    "\1\u020b\37\0\1\u020c\37\0\1\u020d\36\0\1\u020e\40\0"+
    "\1\u020f\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14368];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\175\0\1\11\111\0\1\11\2\0"+
    "\1\11\13\0\1\11\41\0\1\11\3\0\1\11\2\0"+
    "\1\11\5\0\4\11\11\0\2\11\1\0\1\11\14\0"+
    "\1\11\2\0\1\11\13\0\1\11\3\0\1\11\2\0"+
    "\1\11\1\0\1\11\7\0\1\11\6\0\2\11\16\0"+
    "\4\11\10\0\1\11\1\0\1\11\1\0\1\11\7\0"+
    "\1\11\2\0\1\11\6\0\1\11\2\0\2\11\6\0"+
    "\1\11\2\0\1\11\4\0\2\11\11\0\1\11\6\0"+
    "\1\11\1\0\1\11\1\0\2\11\4\0\1\11\6\0"+
    "\4\11\5\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\2\11\14\0\3\11\5\0\2\11\5\0\1\11\6\0"+
    "\1\11\3\0\2\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\3\0\1\11\2\0\3\11\3\0"+
    "\5\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[527];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { lexeme=yytext(); return AperturaCopyright;
          }
        case 82: break;
        case 79: 
          { lexeme=yytext(); return AperturaInformalTable;
          }
        case 83: break;
        case 49: 
          { lexeme=yytext(); return AperturaAbstract;
          }
        case 84: break;
        case 5: 
          { lexeme=yytext(); return AperturaRow;
          }
        case 85: break;
        case 28: 
          { lexeme=yytext(); return CierreTitulo;
          }
        case 86: break;
        case 73: 
          { lexeme=yytext(); return AperturaMediaObject;
          }
        case 87: break;
        case 10: 
          { lexeme=yytext(); return AperturaPara;
          }
        case 88: break;
        case 78: 
          { lexeme=yytext(); return CierreVideoobject;
          }
        case 89: break;
        case 74: 
          { lexeme=yytext(); return AperturaVideobject;
          }
        case 90: break;
        case 21: 
          { lexeme=yytext(); return CierreSeccion;
          }
        case 91: break;
        case 62: 
          { lexeme=yytext(); return CierreListItem;
          }
        case 92: break;
        case 48: 
          { lexeme=yytext(); return AperturaSurname;
          }
        case 93: break;
        case 68: 
          { lexeme=yytext(); return CierreFirstName;
          }
        case 94: break;
        case 53: 
          { lexeme=yytext(); return CierreAddress;
          }
        case 95: break;
        case 3: 
          { /*Ignore*/
          }
        case 96: break;
        case 81: 
          { lexeme=yytext(); return CierreInformalTable;
          }
        case 97: break;
        case 75: 
          { lexeme=yytext(); return AperturaItemizedList;
          }
        case 98: break;
        case 11: 
          { lexeme=yytext(); return AperturaYear;
          }
        case 99: break;
        case 37: 
          { lexeme=yytext(); return AperturaHolder;
          }
        case 100: break;
        case 41: 
          { lexeme=yytext(); return AperturaEntrybl;
          }
        case 101: break;
        case 44: 
          { lexeme=yytext(); return CierreStreet;
          }
        case 102: break;
        case 47: 
          { lexeme=yytext(); return AperturaSection;
          }
        case 103: break;
        case 70: 
          { lexeme=yytext(); return Videodata;
          }
        case 104: break;
        case 72: 
          { lexeme=yytext(); return CierreSimpleSect;
          }
        case 105: break;
        case 64: 
          { lexeme=yytext(); return AperturaFirstName;
          }
        case 106: break;
        case 76: 
          { lexeme=yytext(); return CierreImageobject;
          }
        case 107: break;
        case 13: 
          { lexeme=yytext(); return AperturaTfoot;
          }
        case 108: break;
        case 51: 
          { lexeme=yytext(); return AperturaEmphasis;
          }
        case 109: break;
        case 56: 
          { lexeme=yytext(); return CierreSimPara;
          }
        case 110: break;
        case 29: 
          { lexeme=yytext(); return CierreTfoot;
          }
        case 111: break;
        case 1: 
          { return ERROR;
          }
        case 112: break;
        case 12: 
          { lexeme=yytext(); return AperturaTitulo;
          }
        case 113: break;
        case 66: 
          { lexeme=yytext(); return CierreImportant;
          }
        case 114: break;
        case 80: 
          { lexeme=yytext(); return CierreItemizedList;
          }
        case 115: break;
        case 61: 
          { lexeme=yytext(); return CierreAbstract;
          }
        case 116: break;
        case 42: 
          { lexeme=yytext(); return CierreAuthor;
          }
        case 117: break;
        case 77: 
          { lexeme=yytext(); return CierreMediaObject;
          }
        case 118: break;
        case 54: 
          { lexeme=yytext(); return CierreComment;
          }
        case 119: break;
        case 24: 
          { lexeme=yytext(); return AperturaState;
          }
        case 120: break;
        case 20: 
          { lexeme=yytext(); return CierreCity;
          }
        case 121: break;
        case 34: 
          { lexeme=yytext(); return CierreState;
          }
        case 122: break;
        case 38: 
          { lexeme=yytext(); return AperturaArticulo;
          }
        case 123: break;
        case 9: 
          { lexeme=yytext(); return AperturaSeccion;
          }
        case 124: break;
        case 43: 
          { lexeme=yytext(); return CierreTgroup;
          }
        case 125: break;
        case 19: 
          { lexeme=yytext(); return CierreInfo;
          }
        case 126: break;
        case 39: 
          { lexeme=yytext(); return AperturaAddress;
          }
        case 127: break;
        case 69: 
          { lexeme=yytext(); return AperturaSimpleSect;
          }
        case 128: break;
        case 59: 
          { lexeme=yytext(); return AperturaImportant;
          }
        case 129: break;
        case 36: 
          { lexeme=yytext(); return AperturaStreet;
          }
        case 130: break;
        case 14: 
          { lexeme=yytext(); return AperturaTbody;
          }
        case 131: break;
        case 2: 
          { lexeme=yytext(); return Texto;
          }
        case 132: break;
        case 30: 
          { lexeme=yytext(); return CierreTbody;
          }
        case 133: break;
        case 46: 
          { lexeme=yytext(); return AperturaSimPara;
          }
        case 134: break;
        case 32: 
          { lexeme=yytext(); return CierreEntry;
          }
        case 135: break;
        case 15: 
          { lexeme=yytext(); return AperturaThead;
          }
        case 136: break;
        case 4: 
          { return Linea;
          }
        case 137: break;
        case 26: 
          { lexeme=yytext(); return AperturaAuthor;
          }
        case 138: break;
        case 31: 
          { lexeme=yytext(); return CierreThead;
          }
        case 139: break;
        case 63: 
          { lexeme=yytext(); return CierreEmphasis;
          }
        case 140: break;
        case 22: 
          { lexeme=yytext(); return CierrePara;
          }
        case 141: break;
        case 50: 
          { lexeme=yytext(); return AperturaListItem;
          }
        case 142: break;
        case 67: 
          { lexeme=yytext(); return CierreCopyright;
          }
        case 143: break;
        case 7: 
          { lexeme=yytext(); return AperturaCity;
          }
        case 144: break;
        case 25: 
          { lexeme=yytext(); return AperturaPhone;
          }
        case 145: break;
        case 33: 
          { lexeme=yytext(); return CierreEmail;
          }
        case 146: break;
        case 17: 
          { lexeme=yytext(); return AperturaEntry;
          }
        case 147: break;
        case 35: 
          { lexeme=yytext(); return CierrePhone;
          }
        case 148: break;
        case 27: 
          { lexeme=yytext(); return AperturaTgroup;
          }
        case 149: break;
        case 58: 
          { lexeme=yytext(); return CierreSurname;
          }
        case 150: break;
        case 6: 
          { lexeme=yytext(); return AperturaInfo;
          }
        case 151: break;
        case 8: 
          { lexeme=yytext(); return CierreRow;
          }
        case 152: break;
        case 71: 
          { lexeme=yytext(); return AperturaImageobject;
          }
        case 153: break;
        case 18: 
          { lexeme=yytext(); return AperturaEmail;
          }
        case 154: break;
        case 16: 
          { lexeme=yytext(); return Link;
          }
        case 155: break;
        case 40: 
          { lexeme=yytext(); return AperturaComment;
          }
        case 156: break;
        case 52: 
          { lexeme=yytext(); return CierreArticulo;
          }
        case 157: break;
        case 55: 
          { lexeme=yytext(); return CierreEntrybl;
          }
        case 158: break;
        case 45: 
          { lexeme=yytext(); return CierreHolder;
          }
        case 159: break;
        case 57: 
          { lexeme=yytext(); return CierreSection;
          }
        case 160: break;
        case 23: 
          { lexeme=yytext(); return CierreYear;
          }
        case 161: break;
        case 65: 
          { lexeme=yytext(); return Imagedata;
          }
        case 162: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
